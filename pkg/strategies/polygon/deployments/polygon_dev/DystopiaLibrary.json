{
  "address": "0xb0C5eB4bEE6f70Ff1c7166310311dABb8D56151c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDystopiaRouter",
          "name": "dystRouter",
          "type": "IDystopiaRouter"
        },
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "middleToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isStablePair0",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isStablePair1",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountInput",
          "type": "uint256"
        }
      ],
      "name": "_getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1dd5d1b37be7ee72e3653d21387a29c20766900ecee68af4620bd21a938c66a",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xb0C5eB4bEE6f70Ff1c7166310311dABb8D56151c",
    "transactionIndex": 7,
    "gasUsed": "843359",
    "logsBloom": "0x
    "blockHash": "0x0e2d64df87fa041b3144c46b25ef34b46a67020e9d1b7e3d4299f9f52f72c5ff",
    "transactionHash": "0xc1dd5d1b37be7ee72e3653d21387a29c20766900ecee68af4620bd21a938c66a",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 29830937,
        "transactionHash": "0xc1dd5d1b37be7ee72e3653d21387a29c20766900ecee68af4620bd21a938c66a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016938b3a4ec9a6b000000000000000000000000000000000000000000000000340d035d07b1a9ce00000000000000000000000000000000000000000000245533e9e3a4b7e58d5300000000000000000000000000000000000000000000000032a3caa962c50f6300000000000000000000000000000000000000000000245535531c585cd227be",
        "logIndex": 20,
        "blockHash": "0x0e2d64df87fa041b3144c46b25ef34b46a67020e9d1b7e3d4299f9f52f72c5ff"
      }
    ],
    "blockNumber": 29830937,
    "cumulativeGasUsed": "2068129",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "70b22e9ce485683d22fb1181406210d7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDystopiaRouter\",\"name\":\"dystRouter\",\"type\":\"IDystopiaRouter\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"middleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStablePair0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStablePair1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountInput\",\"type\":\"uint256\"}],\"name\":\"_getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/DystopiaLibrary.sol\":\"DystopiaLibrary\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/connectors/dystopia/interfaces/IDystopiaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IDystopiaRouter {\\n    \\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\n}\",\"keccak256\":\"0x87a434ab9664b57c728fada91322e54df37524e213a617ed10f4113c2a4dd34f\",\"license\":\"MIT\"},\"contracts/libraries/DystopiaLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/dystopia/interfaces/IDystopiaRouter.sol\\\";\\nimport \\\"../libraries/OvnMath.sol\\\";\\n\\nlibrary DystopiaLibrary {\\n\\n    // function _setDystopiaRouter(address _dystRouter) internal {\\n    //     dystRouter = IDystopiaRouter(_dystRouter);\\n    // }\\n\\n    function _swapExactTokensForTokens(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput,\\n        address recipient\\n    ) public returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(dystRouter), amountInput);\\n\\n        uint256 amountOutMin = _getAmountsOut(dystRouter, address(inputToken), address(middleToken), address(outputToken), isStablePair0, isStablePair1, amountInput);\\n        if (amountOutMin == 0) {\\n            return 0;\\n        }\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = dystRouter.swapExactTokensForTokens(\\n            amountInput,\\n            0,\\n            route,\\n            recipient,\\n            block.timestamp + 600\\n        );\\n    \\n        return amounts[2];\\n    }\\n\\n    function _getAmountsOut(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput\\n    ) public view returns (uint256) {\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = dystRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[2];\\n    }\\n\\n    function _addLiquidity(\\n        IDystopiaRouter dystRouter,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) public returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(dystRouter), amountADesired);\\n        IERC20(tokenB).approve(address(dystRouter), amountBDesired);\\n\\n        return dystRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            true,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n\\n    }\\n\\n    function _removeLiquidity(\\n        IDystopiaRouter dystRouter,\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) public returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(dystRouter), liquidity);\\n\\n        return dystRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            true,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbce41a023542c8c5fa7f5b20e4eb1ac5f9ab63cc3810ed3f4469db7082c1eb11\",\"license\":\"MIT\"},\"contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610e4c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80632b9aa9581461005b5780638f969d47146100815780639979c1fd146100b6578063eb34ab1c146100d6575b600080fd5b61006e610069366004610a72565b610111565b6040519081526020015b60405180910390f35b81801561008d57600080fd5b506100a161009c366004610b9f565b61033c565b60408051928352602083019190915201610078565b8180156100c257600080fd5b5061006e6100d1366004610aff565b6104a6565b8180156100e257600080fd5b506100f66100f1366004610c1c565b61078e565b60408051938452602084019290925290820152606001610078565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161012c579050509050878160008151811061016f5761016f610dc4565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106101a7576101a7610dc4565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505084816000815181106101df576101df610dc4565b60200260200101516040019015159081151581525050868160018151811061020957610209610dc4565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050858160018151811061024157610241610dc4565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050838160018151811061027957610279610dc4565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb4906102bc9087908690600401610d41565b60006040518083038186803b1580156102d457600080fd5b505afa1580156102e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103109190810190610989565b90508060028151811061032557610325610dc4565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526001600160a01b03898116600483015260248201869052600091829188169063095ea7b390604401602060405180830381600087803b15801561038b57600080fd5b505af115801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c39190610a4e565b506001600160a01b038a16630dede6c48a8a60018a8a8a8a6103e742610258610d9e565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016040805180830381600087803b15801561045d57600080fd5b505af1158015610471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104959190610c90565b915091509850989650505050505050565b60405163095ea7b360e01b81526001600160a01b038981166004830152602482018490526000919089169063095ea7b390604401602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190610a4e565b50600061053e8a8a8a8a8a8a8a610111565b90508061054f576000915050610782565b60408051600280825260608201909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161056757905050905089816000815181106105aa576105aa610dc4565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505088816000815181106105e2576105e2610dc4565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050868160008151811061061a5761061a610dc4565b60200260200101516040019015159081151581525050888160018151811061064457610644610dc4565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050878160018151811061067c5761067c610dc4565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505085816001815181106106b4576106b4610dc4565b602090810291909101015190151560409091015260006001600160a01b038c1663f41766d8878385896106e942610258610d9e565b6040518663ffffffff1660e01b8152600401610709959493929190610d62565b600060405180830381600087803b15801561072357600080fd5b505af1158015610737573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075f9190810190610989565b90508060028151811061077457610774610dc4565b602002602001015193505050505b98975050505050505050565b60405163095ea7b360e01b81526001600160a01b0389811660048301526024820187905260009182918291908b169063095ea7b390604401602060405180830381600087803b1580156107e057600080fd5b505af11580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190610a4e565b5060405163095ea7b360e01b81526001600160a01b038c81166004830152602482018990528a169063095ea7b390604401602060405180830381600087803b15801561086357600080fd5b505af1158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b9190610a4e565b506001600160a01b038b16635a47ddc38b8b60018c8c8c8c8c6108c042610258610d9e565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e482015261010481019190915261012401606060405180830381600087803b15801561093d57600080fd5b505af1158015610951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109759190610cb4565b925092509250985098509895505050505050565b6000602080838503121561099c57600080fd5b825167ffffffffffffffff808211156109b457600080fd5b818501915085601f8301126109c857600080fd5b8151818111156109da576109da610dda565b8060051b604051601f19603f830116810181811085821117156109ff576109ff610dda565b604052828152858101935084860182860187018a1015610a1e57600080fd5b600095505b83861015610a41578051855260019590950194938601938601610a23565b5098975050505050505050565b600060208284031215610a6057600080fd5b8151610a6b81610e08565b9392505050565b600080600080600080600060e0888a031215610a8d57600080fd5b8735610a9881610df0565b96506020880135610aa881610df0565b95506040880135610ab881610df0565b94506060880135610ac881610df0565b93506080880135610ad881610e08565b925060a0880135610ae881610e08565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610b1c57600080fd5b8835610b2781610df0565b97506020890135610b3781610df0565b96506040890135610b4781610df0565b95506060890135610b5781610df0565b94506080890135610b6781610e08565b935060a0890135610b7781610e08565b925060c0890135915060e0890135610b8e81610df0565b809150509295985092959890939650565b600080600080600080600080610100898b031215610bbc57600080fd5b8835610bc781610df0565b97506020890135610bd781610df0565b96506040890135610be781610df0565b95506060890135610bf781610df0565b94506080890135935060a0890135925060c0890135915060e0890135610b8e81610df0565b600080600080600080600080610100898b031215610c3957600080fd5b8835610c4481610df0565b97506020890135610c5481610df0565b96506040890135610c6481610df0565b9550606089013594506080890135935060a0890135925060c0890135915060e0890135610b8e81610df0565b60008060408385031215610ca357600080fd5b505080516020909101519092909150565b600080600060608486031215610cc957600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b83811015610d3657815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101610cf6565b509495945050505050565b828152604060208201526000610d5a6040830184610ce2565b949350505050565b85815284602082015260a060408201526000610d8160a0830186610ce2565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115610dbf57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e0557600080fd5b50565b8015158114610e0557600080fdfea264697066735822122054893e3189c91f09d7ba1a7b0fd2cbe3230b2f4487524278a7eee75f739b004864736f6c63430008060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80632b9aa9581461005b5780638f969d47146100815780639979c1fd146100b6578063eb34ab1c146100d6575b600080fd5b61006e610069366004610a72565b610111565b6040519081526020015b60405180910390f35b81801561008d57600080fd5b506100a161009c366004610b9f565b61033c565b60408051928352602083019190915201610078565b8180156100c257600080fd5b5061006e6100d1366004610aff565b6104a6565b8180156100e257600080fd5b506100f66100f1366004610c1c565b61078e565b60408051938452602084019290925290820152606001610078565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161012c579050509050878160008151811061016f5761016f610dc4565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106101a7576101a7610dc4565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505084816000815181106101df576101df610dc4565b60200260200101516040019015159081151581525050868160018151811061020957610209610dc4565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050858160018151811061024157610241610dc4565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050838160018151811061027957610279610dc4565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb4906102bc9087908690600401610d41565b60006040518083038186803b1580156102d457600080fd5b505afa1580156102e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103109190810190610989565b90508060028151811061032557610325610dc4565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526001600160a01b03898116600483015260248201869052600091829188169063095ea7b390604401602060405180830381600087803b15801561038b57600080fd5b505af115801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c39190610a4e565b506001600160a01b038a16630dede6c48a8a60018a8a8a8a6103e742610258610d9e565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016040805180830381600087803b15801561045d57600080fd5b505af1158015610471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104959190610c90565b915091509850989650505050505050565b60405163095ea7b360e01b81526001600160a01b038981166004830152602482018490526000919089169063095ea7b390604401602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190610a4e565b50600061053e8a8a8a8a8a8a8a610111565b90508061054f576000915050610782565b60408051600280825260608201909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161056757905050905089816000815181106105aa576105aa610dc4565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505088816000815181106105e2576105e2610dc4565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050868160008151811061061a5761061a610dc4565b60200260200101516040019015159081151581525050888160018151811061064457610644610dc4565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050878160018151811061067c5761067c610dc4565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505085816001815181106106b4576106b4610dc4565b602090810291909101015190151560409091015260006001600160a01b038c1663f41766d8878385896106e942610258610d9e565b6040518663ffffffff1660e01b8152600401610709959493929190610d62565b600060405180830381600087803b15801561072357600080fd5b505af1158015610737573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075f9190810190610989565b90508060028151811061077457610774610dc4565b602002602001015193505050505b98975050505050505050565b60405163095ea7b360e01b81526001600160a01b0389811660048301526024820187905260009182918291908b169063095ea7b390604401602060405180830381600087803b1580156107e057600080fd5b505af11580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190610a4e565b5060405163095ea7b360e01b81526001600160a01b038c81166004830152602482018990528a169063095ea7b390604401602060405180830381600087803b15801561086357600080fd5b505af1158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b9190610a4e565b506001600160a01b038b16635a47ddc38b8b60018c8c8c8c8c6108c042610258610d9e565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e482015261010481019190915261012401606060405180830381600087803b15801561093d57600080fd5b505af1158015610951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109759190610cb4565b925092509250985098509895505050505050565b6000602080838503121561099c57600080fd5b825167ffffffffffffffff808211156109b457600080fd5b818501915085601f8301126109c857600080fd5b8151818111156109da576109da610dda565b8060051b604051601f19603f830116810181811085821117156109ff576109ff610dda565b604052828152858101935084860182860187018a1015610a1e57600080fd5b600095505b83861015610a41578051855260019590950194938601938601610a23565b5098975050505050505050565b600060208284031215610a6057600080fd5b8151610a6b81610e08565b9392505050565b600080600080600080600060e0888a031215610a8d57600080fd5b8735610a9881610df0565b96506020880135610aa881610df0565b95506040880135610ab881610df0565b94506060880135610ac881610df0565b93506080880135610ad881610e08565b925060a0880135610ae881610e08565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610b1c57600080fd5b8835610b2781610df0565b97506020890135610b3781610df0565b96506040890135610b4781610df0565b95506060890135610b5781610df0565b94506080890135610b6781610e08565b935060a0890135610b7781610e08565b925060c0890135915060e0890135610b8e81610df0565b809150509295985092959890939650565b600080600080600080600080610100898b031215610bbc57600080fd5b8835610bc781610df0565b97506020890135610bd781610df0565b96506040890135610be781610df0565b95506060890135610bf781610df0565b94506080890135935060a0890135925060c0890135915060e0890135610b8e81610df0565b600080600080600080600080610100898b031215610c3957600080fd5b8835610c4481610df0565b97506020890135610c5481610df0565b96506040890135610c6481610df0565b9550606089013594506080890135935060a0890135925060c0890135915060e0890135610b8e81610df0565b60008060408385031215610ca357600080fd5b505080516020909101519092909150565b600080600060608486031215610cc957600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b83811015610d3657815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101610cf6565b509495945050505050565b828152604060208201526000610d5a6040830184610ce2565b949350505050565b85815284602082015260a060408201526000610d8160a0830186610ce2565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115610dbf57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e0557600080fd5b50565b8015158114610e0557600080fdfea264697066735822122054893e3189c91f09d7ba1a7b0fd2cbe3230b2f4487524278a7eee75f739b004864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
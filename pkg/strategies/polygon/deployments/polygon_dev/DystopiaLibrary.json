{
  "address": "0xB63a451FFA32BD79166444418824A734d0BD0Eb9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDystopiaRouter",
          "name": "dystRouter",
          "type": "IDystopiaRouter"
        },
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isStablePair",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountInput",
          "type": "uint256"
        }
      ],
      "name": "_getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDystopiaRouter",
          "name": "dystRouter",
          "type": "IDystopiaRouter"
        },
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "middleToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isStablePair0",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isStablePair1",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountInput",
          "type": "uint256"
        }
      ],
      "name": "_getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x06fc388ba8661927b6dc8f4a32e083120a7abb5004013cde6006519aeb4ac1df",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0xB63a451FFA32BD79166444418824A734d0BD0Eb9",
    "transactionIndex": 25,
    "gasUsed": "1119380",
    "logsBloom": "0x
    "blockHash": "0x19a201de3433e853c7b93ed445a6dd28e19c49c7babf9f86c80afac2f07e95bb",
    "transactionHash": "0x06fc388ba8661927b6dc8f4a32e083120a7abb5004013cde6006519aeb4ac1df",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 30398719,
        "transactionHash": "0x06fc388ba8661927b6dc8f4a32e083120a7abb5004013cde6006519aeb4ac1df",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x000000000000000000000000b9ede6f94d192073d8eaf85f8db677133d483249"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000be8e12655d6aa0000000000000000000000000000000000000000000000003b7b273685558505c000000000000000000000000000000000000000000000f8479203aa5e8c1c140000000000000000000000000000000000000000000000003b6f3e555effae5bc000000000000000000000000000000000000000000000f8479dec8b84e1f2be0",
        "logIndex": 92,
        "blockHash": "0x19a201de3433e853c7b93ed445a6dd28e19c49c7babf9f86c80afac2f07e95bb"
      }
    ],
    "blockNumber": 30398719,
    "cumulativeGasUsed": "5188781",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4c2872c17f7c6d6623fb4c75ae61a34f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDystopiaRouter\",\"name\":\"dystRouter\",\"type\":\"IDystopiaRouter\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStablePair\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountInput\",\"type\":\"uint256\"}],\"name\":\"_getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDystopiaRouter\",\"name\":\"dystRouter\",\"type\":\"IDystopiaRouter\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"middleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStablePair0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStablePair1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountInput\",\"type\":\"uint256\"}],\"name\":\"_getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/DystopiaLibrary.sol\":\"DystopiaLibrary\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/connectors/dystopia/interfaces/IDystopiaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IDystopiaRouter {\\n    \\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\n}\",\"keccak256\":\"0x87a434ab9664b57c728fada91322e54df37524e213a617ed10f4113c2a4dd34f\",\"license\":\"MIT\"},\"contracts/libraries/DystopiaLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/dystopia/interfaces/IDystopiaRouter.sol\\\";\\nimport \\\"../libraries/OvnMath.sol\\\";\\n\\nlibrary DystopiaLibrary {\\n\\n\\n    function _swapExactTokensForTokens(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput,\\n        address recipient\\n    ) public returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(dystRouter), amountInput);\\n\\n        uint256 amountOutMin = _getAmountsOut(dystRouter, address(inputToken), address(middleToken), address(outputToken), isStablePair0, isStablePair1, amountInput);\\n        if (amountOutMin == 0) {\\n            return 0;\\n        }\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = dystRouter.swapExactTokensForTokens(\\n            amountInput,\\n            0,\\n            route,\\n            recipient,\\n            block.timestamp + 600\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n    function _swap(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountInput,\\n        address recipient\\n    ) public returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(dystRouter), amountInput);\\n\\n        uint256 amountOutMin = _getAmountOut(dystRouter, address(inputToken), address(outputToken), isStablePair,  amountInput);\\n        if (amountOutMin == 0) {\\n            return 0;\\n        }\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = dystRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            route,\\n            recipient,\\n            block.timestamp + 600\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n    function _getAmountOut(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountInput\\n    ) public view returns (uint256) {\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = dystRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[2];\\n    }\\n\\n    function _getAmountsOut(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput\\n    ) public view returns (uint256) {\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = dystRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[2];\\n    }\\n\\n    function _addLiquidity(\\n        IDystopiaRouter dystRouter,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) public returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(dystRouter), amountADesired);\\n        IERC20(tokenB).approve(address(dystRouter), amountBDesired);\\n\\n        return dystRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            true,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n\\n    }\\n\\n    function _removeLiquidity(\\n        IDystopiaRouter dystRouter,\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) public returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(dystRouter), liquidity);\\n\\n        return dystRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            true,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x537a22d6e2c07dfaccb01cd7c2d004255ba122f8be7dc900f0b9352db9b8407b\",\"license\":\"MIT\"},\"contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61134b61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80632b9aa958146100715780634f3ea505146100975780638f969d47146100b75780639979c1fd146100ec578063c57ee2981461010c578063eb34ab1c1461011f575b600080fd5b61008461007f366004610e94565b61015a565b6040519081526020015b60405180910390f35b8180156100a357600080fd5b506100846100b23660046110a2565b610385565b8180156100c357600080fd5b506100d76100d2366004610fc1565b6105cf565b6040805192835260208301919091520161008e565b8180156100f857600080fd5b50610084610107366004610f21565b610739565b61008461011a36600461103e565b610a21565b81801561012b57600080fd5b5061013f61013a36600461111b565b610bb0565b6040805193845260208401929092529082015260600161008e565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161017557905050905087816000815181106101b8576101b86112c3565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106101f0576101f06112c3565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110610228576102286112c3565b602002602001015160400190151590811515815250508681600181518110610252576102526112c3565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050858160018151811061028a5761028a6112c3565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505083816001815181106102c2576102c26112c3565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb4906103059087908690600401611240565b60006040518083038186803b15801561031d57600080fd5b505afa158015610331573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103599190810190610dab565b90508060028151811061036e5761036e6112c3565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526001600160a01b038781166004830152602482018490526000919087169063095ea7b390604401602060405180830381600087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610e70565b50600061041b8888888888610a21565b90508061042c5760009150506105c5565b60408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816104445790505090508781600081518110610487576104876112c3565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106104bf576104bf6112c3565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505085816000815181106104f7576104f76112c3565b602090810291909101015190151560409091015260006001600160a01b038a1663f41766d88785858961052c4261025861129d565b6040518663ffffffff1660e01b815260040161054c959493929190611261565b600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a29190810190610dab565b9050806002815181106105b7576105b76112c3565b602002602001015193505050505b9695505050505050565b60405163095ea7b360e01b81526001600160a01b03898116600483015260248201869052600091829188169063095ea7b390604401602060405180830381600087803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190610e70565b506001600160a01b038a16630dede6c48a8a60018a8a8a8a61067a4261025861129d565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016040805180830381600087803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610728919061118f565b915091509850989650505050505050565b60405163095ea7b360e01b81526001600160a01b038981166004830152602482018490526000919089169063095ea7b390604401602060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190610e70565b5060006107d18a8a8a8a8a8a8a61015a565b9050806107e2576000915050610a15565b60408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816107fa579050509050898160008151811061083d5761083d6112c3565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508881600081518110610875576108756112c3565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505086816000815181106108ad576108ad6112c3565b6020026020010151604001901515908115158152505088816001815181106108d7576108d76112c3565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050878160018151811061090f5761090f6112c3565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508581600181518110610947576109476112c3565b602090810291909101015190151560409091015260006001600160a01b038c1663f41766d88783858961097c4261025861129d565b6040518663ffffffff1660e01b815260040161099c959493929190611261565b600060405180830381600087803b1580156109b657600080fd5b505af11580156109ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109f29190810190610dab565b905080600281518110610a0757610a076112c3565b602002602001015193505050505b98975050505050505050565b60408051600280825260608201909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610a3c5790505090508581600081518110610a7f57610a7f6112c3565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508481600081518110610ab757610ab76112c3565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508381600081518110610aef57610aef6112c3565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b03891690639881fcb490610b329087908690600401611240565b60006040518083038186803b158015610b4a57600080fd5b505afa158015610b5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b869190810190610dab565b905080600281518110610b9b57610b9b6112c3565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526001600160a01b0389811660048301526024820187905260009182918291908b169063095ea7b390604401602060405180830381600087803b158015610c0257600080fd5b505af1158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190610e70565b5060405163095ea7b360e01b81526001600160a01b038c81166004830152602482018990528a169063095ea7b390604401602060405180830381600087803b158015610c8557600080fd5b505af1158015610c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd9190610e70565b506001600160a01b038b16635a47ddc38b8b60018c8c8c8c8c610ce24261025861129d565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e482015261010481019190915261012401606060405180830381600087803b158015610d5f57600080fd5b505af1158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9791906111b3565b925092509250985098509895505050505050565b60006020808385031215610dbe57600080fd5b825167ffffffffffffffff80821115610dd657600080fd5b818501915085601f830112610dea57600080fd5b815181811115610dfc57610dfc6112d9565b8060051b604051601f19603f83011681018181108582111715610e2157610e216112d9565b604052828152858101935084860182860187018a1015610e4057600080fd5b600095505b83861015610e63578051855260019590950194938601938601610e45565b5098975050505050505050565b600060208284031215610e8257600080fd5b8151610e8d81611307565b9392505050565b600080600080600080600060e0888a031215610eaf57600080fd5b8735610eba816112ef565b96506020880135610eca816112ef565b95506040880135610eda816112ef565b94506060880135610eea816112ef565b93506080880135610efa81611307565b925060a0880135610f0a81611307565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610f3e57600080fd5b8835610f49816112ef565b97506020890135610f59816112ef565b96506040890135610f69816112ef565b95506060890135610f79816112ef565b94506080890135610f8981611307565b935060a0890135610f9981611307565b925060c0890135915060e0890135610fb0816112ef565b809150509295985092959890939650565b600080600080600080600080610100898b031215610fde57600080fd5b8835610fe9816112ef565b97506020890135610ff9816112ef565b96506040890135611009816112ef565b95506060890135611019816112ef565b94506080890135935060a0890135925060c0890135915060e0890135610fb0816112ef565b600080600080600060a0868803121561105657600080fd5b8535611061816112ef565b94506020860135611071816112ef565b93506040860135611081816112ef565b9250606086013561109181611307565b949793965091946080013592915050565b60008060008060008060c087890312156110bb57600080fd5b86356110c6816112ef565b955060208701356110d6816112ef565b945060408701356110e6816112ef565b935060608701356110f681611307565b92506080870135915060a087013561110d816112ef565b809150509295509295509295565b600080600080600080600080610100898b03121561113857600080fd5b8835611143816112ef565b97506020890135611153816112ef565b96506040890135611163816112ef565b9550606089013594506080890135935060a0890135925060c0890135915060e0890135610fb0816112ef565b600080604083850312156111a257600080fd5b505080516020909101519092909150565b6000806000606084860312156111c857600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b8381101561123557815180516001600160a01b039081168952848201511684890152604090810151151590880152606090960195908201906001016111f5565b509495945050505050565b82815260406020820152600061125960408301846111e1565b949350505050565b85815284602082015260a06040820152600061128060a08301866111e1565b6001600160a01b0394909416606083015250608001529392505050565b600082198211156112be57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461130457600080fd5b50565b801515811461130457600080fdfea2646970667358221220a2d42af219f3b932221fa1170268a8fd2644dc47f643c827dfc24fdab91a552664736f6c63430008060033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80632b9aa958146100715780634f3ea505146100975780638f969d47146100b75780639979c1fd146100ec578063c57ee2981461010c578063eb34ab1c1461011f575b600080fd5b61008461007f366004610e94565b61015a565b6040519081526020015b60405180910390f35b8180156100a357600080fd5b506100846100b23660046110a2565b610385565b8180156100c357600080fd5b506100d76100d2366004610fc1565b6105cf565b6040805192835260208301919091520161008e565b8180156100f857600080fd5b50610084610107366004610f21565b610739565b61008461011a36600461103e565b610a21565b81801561012b57600080fd5b5061013f61013a36600461111b565b610bb0565b6040805193845260208401929092529082015260600161008e565b60408051600280825260608201909252600091829190816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161017557905050905087816000815181106101b8576101b86112c3565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106101f0576101f06112c3565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110610228576102286112c3565b602002602001015160400190151590811515815250508681600181518110610252576102526112c3565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050858160018151811061028a5761028a6112c3565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505083816001815181106102c2576102c26112c3565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb4906103059087908690600401611240565b60006040518083038186803b15801561031d57600080fd5b505afa158015610331573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103599190810190610dab565b90508060028151811061036e5761036e6112c3565b602002602001015192505050979650505050505050565b60405163095ea7b360e01b81526001600160a01b038781166004830152602482018490526000919087169063095ea7b390604401602060405180830381600087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610e70565b50600061041b8888888888610a21565b90508061042c5760009150506105c5565b60408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816104445790505090508781600081518110610487576104876112c3565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505086816000815181106104bf576104bf6112c3565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505085816000815181106104f7576104f76112c3565b602090810291909101015190151560409091015260006001600160a01b038a1663f41766d88785858961052c4261025861129d565b6040518663ffffffff1660e01b815260040161054c959493929190611261565b600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a29190810190610dab565b9050806002815181106105b7576105b76112c3565b602002602001015193505050505b9695505050505050565b60405163095ea7b360e01b81526001600160a01b03898116600483015260248201869052600091829188169063095ea7b390604401602060405180830381600087803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190610e70565b506001600160a01b038a16630dede6c48a8a60018a8a8a8a61067a4261025861129d565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016040805180830381600087803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610728919061118f565b915091509850989650505050505050565b60405163095ea7b360e01b81526001600160a01b038981166004830152602482018490526000919089169063095ea7b390604401602060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190610e70565b5060006107d18a8a8a8a8a8a8a61015a565b9050806107e2576000915050610a15565b60408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816107fa579050509050898160008151811061083d5761083d6112c3565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508881600081518110610875576108756112c3565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505086816000815181106108ad576108ad6112c3565b6020026020010151604001901515908115158152505088816001815181106108d7576108d76112c3565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050878160018151811061090f5761090f6112c3565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508581600181518110610947576109476112c3565b602090810291909101015190151560409091015260006001600160a01b038c1663f41766d88783858961097c4261025861129d565b6040518663ffffffff1660e01b815260040161099c959493929190611261565b600060405180830381600087803b1580156109b657600080fd5b505af11580156109ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109f29190810190610dab565b905080600281518110610a0757610a076112c3565b602002602001015193505050505b98975050505050505050565b60408051600280825260608201909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610a3c5790505090508581600081518110610a7f57610a7f6112c3565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508481600081518110610ab757610ab76112c3565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508381600081518110610aef57610aef6112c3565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b03891690639881fcb490610b329087908690600401611240565b60006040518083038186803b158015610b4a57600080fd5b505afa158015610b5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b869190810190610dab565b905080600281518110610b9b57610b9b6112c3565b60200260200101519250505095945050505050565b60405163095ea7b360e01b81526001600160a01b0389811660048301526024820187905260009182918291908b169063095ea7b390604401602060405180830381600087803b158015610c0257600080fd5b505af1158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190610e70565b5060405163095ea7b360e01b81526001600160a01b038c81166004830152602482018990528a169063095ea7b390604401602060405180830381600087803b158015610c8557600080fd5b505af1158015610c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd9190610e70565b506001600160a01b038b16635a47ddc38b8b60018c8c8c8c8c610ce24261025861129d565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e482015261010481019190915261012401606060405180830381600087803b158015610d5f57600080fd5b505af1158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9791906111b3565b925092509250985098509895505050505050565b60006020808385031215610dbe57600080fd5b825167ffffffffffffffff80821115610dd657600080fd5b818501915085601f830112610dea57600080fd5b815181811115610dfc57610dfc6112d9565b8060051b604051601f19603f83011681018181108582111715610e2157610e216112d9565b604052828152858101935084860182860187018a1015610e4057600080fd5b600095505b83861015610e63578051855260019590950194938601938601610e45565b5098975050505050505050565b600060208284031215610e8257600080fd5b8151610e8d81611307565b9392505050565b600080600080600080600060e0888a031215610eaf57600080fd5b8735610eba816112ef565b96506020880135610eca816112ef565b95506040880135610eda816112ef565b94506060880135610eea816112ef565b93506080880135610efa81611307565b925060a0880135610f0a81611307565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610f3e57600080fd5b8835610f49816112ef565b97506020890135610f59816112ef565b96506040890135610f69816112ef565b95506060890135610f79816112ef565b94506080890135610f8981611307565b935060a0890135610f9981611307565b925060c0890135915060e0890135610fb0816112ef565b809150509295985092959890939650565b600080600080600080600080610100898b031215610fde57600080fd5b8835610fe9816112ef565b97506020890135610ff9816112ef565b96506040890135611009816112ef565b95506060890135611019816112ef565b94506080890135935060a0890135925060c0890135915060e0890135610fb0816112ef565b600080600080600060a0868803121561105657600080fd5b8535611061816112ef565b94506020860135611071816112ef565b93506040860135611081816112ef565b9250606086013561109181611307565b949793965091946080013592915050565b60008060008060008060c087890312156110bb57600080fd5b86356110c6816112ef565b955060208701356110d6816112ef565b945060408701356110e6816112ef565b935060608701356110f681611307565b92506080870135915060a087013561110d816112ef565b809150509295509295509295565b600080600080600080600080610100898b03121561113857600080fd5b8835611143816112ef565b97506020890135611153816112ef565b96506040890135611163816112ef565b9550606089013594506080890135935060a0890135925060c0890135915060e0890135610fb0816112ef565b600080604083850312156111a257600080fd5b505080516020909101519092909150565b6000806000606084860312156111c857600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b8381101561123557815180516001600160a01b039081168952848201511684890152604090810151151590880152606090960195908201906001016111f5565b509495945050505050565b82815260406020820152600061125960408301846111e1565b949350505050565b85815284602082015260a06040820152600061128060a08301866111e1565b6001600160a01b0394909416606083015250608001529392505050565b600082198211156112be57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461130457600080fd5b50565b801515811461130457600080fdfea2646970667358221220a2d42af219f3b932221fa1170268a8fd2644dc47f643c827dfc24fdab91a552664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x1862f0115cc08dE3F24bE5109AdCcDf5E11B6350",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "crvPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardGauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "uniswapRouter",
          "type": "address"
        }
      ],
      "name": "StrategyCurveGeistUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "crvPoolToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "crvGaugeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "geistToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "crvToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wFtmToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "crvPoolTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "geistTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "crvTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wFtmTokenDenominator",
          "type": "uint256"
        }
      ],
      "name": "StrategyCurveGeistUpdatedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGaugeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "contract IStableSwapPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPoolToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPoolTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "geistToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "geistTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardGauge",
      "outputs": [
        {
          "internalType": "contract IRewardsOnlyGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crvPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardGauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvPoolToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvGaugeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_geistToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wFtmToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wFtmToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wFtmTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "17bec5a5db63c378ad30b852e6abf5b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crvPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardGauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uniswapRouter\",\"type\":\"address\"}],\"name\":\"StrategyCurveGeistUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crvPoolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crvGaugeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"geistToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crvToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wFtmToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvPoolTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"geistTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wFtmTokenDenominator\",\"type\":\"uint256\"}],\"name\":\"StrategyCurveGeistUpdatedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGaugeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"contract IStableSwapPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPoolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPoolTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geistToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geistTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGauge\",\"outputs\":[{\"internalType\":\"contract IRewardsOnlyGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crvPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardGauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvPoolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvGaugeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_geistToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wFtmToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wFtmToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wFtmTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyCurveGeist.sol\":\"StrategyCurveGeist\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/StrategyCurveGeist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./core/Strategy.sol\\\";\\nimport \\\"./exchanges/SpookySwapExchange.sol\\\";\\nimport \\\"./connectors/curve/interfaces/IStableSwapPool.sol\\\";\\nimport \\\"./connectors/curve/interfaces/IRewardsOnlyGauge.sol\\\";\\n\\ncontract StrategyCurveGeist is Strategy, SpookySwapExchange {\\n\\n    IERC20 public usdcToken;\\n    IERC20 public crvPoolToken;\\n    IERC20 public crvGaugeToken;\\n    IERC20 public geistToken;\\n    IERC20 public crvToken;\\n    IERC20 public wFtmToken;\\n\\n    uint256 public usdcTokenDenominator;\\n    uint256 public crvPoolTokenDenominator;\\n    uint256 public geistTokenDenominator;\\n    uint256 public crvTokenDenominator;\\n    uint256 public wFtmTokenDenominator;\\n\\n    IStableSwapPool public crvPool;\\n    IRewardsOnlyGauge public rewardGauge;\\n\\n\\n    // --- events\\n\\n    event StrategyCurveGeistUpdatedTokens(\\n        address usdcToken,\\n        address crvPoolToken,\\n        address crvGaugeToken,\\n        address geistToken,\\n        address crvToken,\\n        address wFtmToken,\\n        uint256 usdcTokenDenominator,\\n        uint256 crvPoolTokenDenominator,\\n        uint256 geistTokenDenominator,\\n        uint256 crvTokenDenominator,\\n        uint256 wFtmTokenDenominator\\n    );\\n\\n    event StrategyCurveGeistUpdatedParams(\\n        address crvPool,\\n        address rewardGauge,\\n        address uniswapRouter\\n    );\\n\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n\\n\\n    // --- Setters\\n\\n    function setTokens(\\n        address _usdcToken,\\n        address _crvPoolToken,\\n        address _crvGaugeToken,\\n        address _geistToken,\\n        address _crvToken,\\n        address _wFtmToken\\n    ) external onlyAdmin {\\n\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_crvPoolToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_crvGaugeToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_geistToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_crvToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_wFtmToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        usdcToken = IERC20(_usdcToken);\\n        crvPoolToken = IERC20(_crvPoolToken);\\n        crvGaugeToken = IERC20(_crvGaugeToken);\\n        geistToken = IERC20(_geistToken);\\n        crvToken = IERC20(_crvToken);\\n        wFtmToken = IERC20(_wFtmToken);\\n\\n        usdcTokenDenominator = 10 ** IERC20Metadata(_usdcToken).decimals();\\n        crvPoolTokenDenominator = 10 ** IERC20Metadata(_crvPoolToken).decimals();\\n        geistTokenDenominator = 10 ** IERC20Metadata(_geistToken).decimals();\\n        crvTokenDenominator = 10 ** IERC20Metadata(_crvToken).decimals();\\n        wFtmTokenDenominator = 10 ** IERC20Metadata(_wFtmToken).decimals();\\n\\n        emit StrategyCurveGeistUpdatedTokens(\\n            _usdcToken,\\n            _crvPoolToken,\\n            _crvGaugeToken,\\n            _geistToken,\\n            _crvToken,\\n            _wFtmToken,\\n            usdcTokenDenominator,\\n            crvPoolTokenDenominator,\\n            geistTokenDenominator,\\n            crvTokenDenominator,\\n            wFtmTokenDenominator\\n        );\\n    }\\n\\n    function setParams(\\n        address _crvPool,\\n        address _rewardGauge,\\n        address _uniswapRouter\\n    ) external onlyAdmin {\\n\\n        require(_crvPool != address(0), \\\"Zero address not allowed\\\");\\n        require(_rewardGauge != address(0), \\\"Zero address not allowed\\\");\\n        require(_uniswapRouter != address(0), \\\"Zero address not allowed\\\");\\n\\n        crvPool = IStableSwapPool(_crvPool);\\n        rewardGauge = IRewardsOnlyGauge(_rewardGauge);\\n        setUniswapRouter(_uniswapRouter);\\n\\n        emit StrategyCurveGeistUpdatedParams(\\n            _crvPool,\\n            _rewardGauge,\\n            _uniswapRouter\\n        );\\n    }\\n\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        require(crvPool.underlying_coins(1) == address(usdcToken), \\\"Invalid index for staking curve\\\");\\n\\n        uint256[3] memory amounts;\\n        amounts[0] = 0;\\n        amounts[1] = _amount;\\n        amounts[2] = 0;\\n        usdcToken.approve(address(crvPool), _amount);\\n        uint256 lpTokAmount = crvPool.calc_token_amount(amounts, true);\\n        //TODO: \\u043f\\u0440\\u043e\\u0446\\u0435\\u043d\\u0442\\u0430\\u0436\\u0438 \\u043a\\u0443\\u0434\\u0430\\u0442\\u043e \\u0432\\u044b\\u043d\\u0435\\u0441\\u0442\\u0438, slippage\\n        uint256 retAmount = crvPool.add_liquidity(amounts, lpTokAmount * 99 / 100, true);\\n\\n        uint256 crvPoolBalance = crvPoolToken.balanceOf(address(this));\\n        crvPoolToken.approve(address(rewardGauge), crvPoolBalance);\\n        rewardGauge.deposit(crvPoolBalance, address(this), false);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        address current = address(this);\\n\\n        // 6 = 18 + 6 - 18\\n        uint256 price = crvPool.get_virtual_price() * usdcTokenDenominator / crvPoolTokenDenominator;\\n\\n        // Add +1% - slippage curve\\n        uint256 amount = _amount * 101 / 100;\\n\\n        // 18 = 18 + 6 - 6\\n        uint256 tokenAmountToWithdrawFromGauge = crvPoolTokenDenominator * amount / price;\\n\\n        rewardGauge.withdraw(tokenAmountToWithdrawFromGauge, false);\\n\\n        uint256 withdrewAmount = _unstakeCurve();\\n\\n        return withdrewAmount;\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        uint256 _amount = crvGaugeToken.balanceOf(address(this));\\n\\n        address current = address(this);\\n        // gauge doesn't need approve on withdraw, but we should have amount token\\n        // on Strategy\\n\\n        rewardGauge.withdraw(_amount, false);\\n\\n        uint256 withdrewAmount = _unstakeCurve();\\n\\n        return withdrewAmount;\\n    }\\n\\n    function netAssetValue() external view override returns (uint256) {\\n        uint256 balance = crvGaugeToken.balanceOf(address(this));\\n        if (balance == 0) {\\n            return 0;\\n        }\\n\\n        // 6 = 18 + 6 - 18\\n        uint256 price = crvPool.get_virtual_price() * usdcTokenDenominator / crvPoolTokenDenominator;\\n        // 18 + 6 - 18 = 6\\n        return balance * price / crvPoolTokenDenominator;\\n    }\\n\\n    function liquidationValue() external view override returns (uint256) {\\n\\n        require(crvPool.underlying_coins(1) == address(usdcToken), \\\"Invalid index for liquidationValue curve\\\");\\n\\n        uint256 balance = crvGaugeToken.balanceOf(address(this));\\n        if (balance == 0) {\\n            return 0;\\n        }\\n\\n        uint256 withdrawUsdcAmount = crvPool.calc_withdraw_one_coin(balance, 1);\\n        return withdrawUsdcAmount;\\n    }\\n\\n    function _unstakeCurve() internal returns (uint256) {\\n\\n        require(crvPool.underlying_coins(1) == address(usdcToken), \\\"Invalid index for unstaking curve\\\");\\n\\n        uint256 lpTokenAmount = crvPoolToken.balanceOf(address(this));\\n\\n        crvPoolToken.approve(address(crvPool), lpTokenAmount);\\n\\n        //TODO: use withdrawAmount?\\n        uint256 retAmount = crvPool.remove_liquidity_one_coin(lpTokenAmount, 1, 0, true);\\n        return retAmount;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n        rewardGauge.claim_rewards(address(this));\\n\\n        uint256 totalUsdc;\\n\\n        uint256 geistBalance = geistToken.balanceOf(address(this));\\n        if (geistBalance != 0) {\\n            uint256 geistUsdc = swapTokenToUsdc(\\n                address(geistToken),\\n                address(usdcToken),\\n                geistTokenDenominator,\\n                address(this),\\n                address(this),\\n                geistBalance\\n            );\\n            totalUsdc += geistUsdc;\\n        }\\n\\n        uint256 crvBalance = crvToken.balanceOf(address(this));\\n        if (crvBalance != 0) {\\n            uint256 crvUsdc = swapTokenToUsdc(\\n                address(crvToken),\\n                address(usdcToken),\\n                crvTokenDenominator,\\n                address(this),\\n                address(this),\\n                crvBalance\\n            );\\n            totalUsdc += crvUsdc;\\n        }\\n\\n        uint256 wFtmBalance = wFtmToken.balanceOf(address(this));\\n        if (wFtmBalance != 0) {\\n            uint256 wFtmUsdc = swapTokenToUsdc(\\n                address(wFtmToken),\\n                address(usdcToken),\\n                wFtmTokenDenominator,\\n                address(this),\\n                address(this),\\n                wFtmBalance\\n            );\\n            totalUsdc += wFtmUsdc;\\n        }\\n\\n        usdcToken.transfer(_to, usdcToken.balanceOf(address(this)));\\n        return totalUsdc;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x07332d59baf3a393bd9197409aab067c26e9f2b2b2c6c0a4366b260d079a435a\",\"license\":\"MIT\"},\"contracts/connectors/curve/interfaces/IRewardsOnlyGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardsOnlyGauge is IERC20 {\\n\\n    function deposit(uint256 _value, address _addr, bool _claim_rewards) external;\\n\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    function deposit(uint256 _value, bool _claim_rewards) external;\\n\\n    function deposit(uint256 _value) external;\\n\\n    function withdraw(uint256 _value, bool _claim_rewards) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function lp_token() external returns (address);\\n\\n    function claim_rewards(address _addr, address _receiver) external;\\n\\n    function claim_rewards(address _addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claimed_reward(address _addr, address _token) external returns (uint256);\\n\\n    function claimable_reward(address _addr, address _token) external returns (uint256);\\n\\n    function claimable_reward_write(address _addr, address _token) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x35d108adb3c9afdcdcd4e5b3dd5c3ce116a5ad510a1673566d0fd21eeb4a61ec\",\"license\":\"MIT\"},\"contracts/connectors/curve/interfaces/IStableSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IStableSwapPool {\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts, bool _use_underlying) external returns (uint256[3] memory);\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\\n\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n\\n    function calc_token_amount(uint256[3] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    // Get the amount of coin j(received) one would receive for swapping _dx of coin i(send).\\n    function get_dy(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    function get_dy_underlying(int128 sendToken, int128 receivedToken, uint256 _dx) external view returns (uint256);\\n\\n    //Perform an exchange between two coins.\\n    // i: Index value for the coin to send\\n    // j: Index value of the coin to receive\\n    // _dx: Amount of i being exchanged\\n    // _min_dy: Minimum amount of j to receive\\n    // Returns the actual amount of coin j received. Index values can be found via the coins public getter method.\\n    function exchange(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function exchange_underlying(int128 sendToken, int128 receivedToken, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount, bool _use_underlying) external returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x43b3d798ddddb63ded40597449aa7cd0f67103f7c15354e632292c6e2d5ad294\",\"license\":\"MIT\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\n/**\\n * IUniswapV2Router01.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\n */\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n\\n}\\n\",\"keccak256\":\"0x8635dc634259e971de8edde1ac635dd2338e5223370c9a6e22ed58527cdbab07\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\n/**\\n * IUniswapV2Router02.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\n */\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address factoryC, address tokenA, address tokenB) external view returns (address pair) ;\\n\\n}\\n\",\"keccak256\":\"0x5ca1e640d0522c5fdcb8814e1c7972435a71e589703741f7ffdaf2116fcb6cb3\",\"license\":\"GNU-3\"},\"contracts/core/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external;\\n\\n    function unstake(\\n        address _asset, // USDC\\n        uint256 _amount, // minimum expected value for unstaking in USDC\\n        address _beneficiary, // PortfolioManager\\n        bool targetIsZero // allow unstake full value\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function liquidationValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x704853024cb4f4c92c33c999adbe18521136f4741e448096a8c08d5f0366d4d6\",\"license\":\"GPL-3.0\"},\"contracts/core/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external override onlyPortfolioManager {\\n        emit Stake(_amount);\\n        _stake(_asset, IERC20(_asset).balanceOf(address(this)));\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        uint256 balanceUSDC = IERC20(_asset).balanceOf(address(this));\\n        IERC20(_asset).transfer(_beneficiary, balanceUSDC);\\n        emit Unstake(_amount, balanceUSDC);\\n\\n        return balanceUSDC;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalUsdc = _claimRewards(_to);\\n        emit Reward(totalUsdc);\\n        return totalUsdc;\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x830172b96e4661c45f5f8f12c0ad829628fa7db58bdf18bcff64ba4e34e44cd7\",\"license\":\"MIT\"},\"contracts/exchanges/SpookySwapExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\\\";\\n\\nabstract contract SpookySwapExchange {\\n\\n    IUniswapV2Router02 private uniswapRouter;\\n\\n    function setUniswapRouter(address _uniswapRouter) internal {\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n    }\\n\\n    function swapTokenToUsdc(\\n        address swapToken,\\n        address usdcToken,\\n        uint256 swapTokenDenominator,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n\\n        uint256 amountOutMin = 0;\\n        IERC20(swapToken).approve(address(uniswapRouter), amount);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = swapToken;\\n        path[1] = usdcToken;\\n\\n        return uniswapRouter.swapExactTokensForTokens(amount, amountOutMin, path, recipient, block.timestamp + 600)[1];\\n    }\\n\\n    function getAmountsOut(\\n        address input,\\n        address output,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = input;\\n        path[1] = output;\\n\\n        uint[] memory amountsOut = uniswapRouter.getAmountsOut(amountInput, path);\\n\\n        return amountsOut[1];\\n    }\\n\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa373fe04c2a1b428a7b86c71eb06128542683f37a9689dd37dd74379dae80b85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16620000365760005460ff161562000040565b62000040620000e5565b620000a85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000cb576000805461ffff19166101011790555b8015620000de576000805461ff00191690555b5062000112565b6000620000fd306200010360201b620017d91760201c565b15905090565b6001600160a01b03163b151590565b60805160601c6138816200014d600039600081816109580152818161099801528181610a3801528181610a780152610b0701526138816000f3fe6080604052600436106102045760003560e01c80637d5f580211610118578063adc9772e116100a0578063e0ef81a21161006f578063e0ef81a2146105b7578063ecc1a41a146105d8578063ef5cfb8c146105ef578063f6f6b8811461060f578063f72c0d8b1461062f57600080fd5b8063adc9772e1461053f578063b20fdc0d1461055f578063b744bd7014610580578063d547741f1461059757600080fd5b8063a217fddf116100e7578063a217fddf146104be578063a2894942146104d3578063a3673b38146104ea578063a440b21a146104ff578063a7ab2e4d1461051f57600080fd5b80637d5f5802146104475780638129fc1c1461046957806391d148541461047e578063a081df7f1461049e57600080fd5b806332d7d66d1161019b57806340a9f0741161016a57806340a9f074146103bd5780634f1ef286146103de57806352d1902d146103f1578063620b75df1461040657806367a16aa51461042657600080fd5b806332d7d66d1461033b57806334c0d4421461035c57806336568abe1461037d5780633659cfe61461039d57600080fd5b80632576e65a116101d75780632576e65a146102cc5780632c04664a146102e15780632f2ff15d146102f85780632f8043271461031a57600080fd5b806301ffc9a71461020957806306da3f2e1461023e57806311eac85514610263578063248a9ca31461029c575b600080fd5b34801561021557600080fd5b50610229610224366004613225565b610663565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b506102556101655481565b604051908152602001610235565b34801561026f57600080fd5b5061015f54610284906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b3480156102a857600080fd5b506102556102b73660046131c3565b60009081526065602052604090206001015490565b3480156102d857600080fd5b5061025561069a565b3480156102ed57600080fd5b506102556101685481565b34801561030457600080fd5b506103186103133660046131f5565b6108a4565b005b34801561032657600080fd5b5061016054610284906001600160a01b031681565b34801561034757600080fd5b5061016354610284906001600160a01b031681565b34801561036857600080fd5b5061016b54610284906001600160a01b031681565b34801561038957600080fd5b506103186103983660046131f5565b6108cf565b3480156103a957600080fd5b506103186103b8366004612ecb565b61094d565b3480156103c957600080fd5b5061016254610284906001600160a01b031681565b6103186103ec366004612fd2565b610a2d565b3480156103fd57600080fd5b50610255610afa565b34801561041257600080fd5b5060fb54610284906001600160a01b031681565b34801561043257600080fd5b5061016454610284906001600160a01b031681565b34801561045357600080fd5b506102556000805160206137e583398151915281565b34801561047557600080fd5b50610318610bad565b34801561048a57600080fd5b506102296104993660046131f5565b610c26565b3480156104aa57600080fd5b506103186104b9366004612f05565b610c51565b3480156104ca57600080fd5b50610255600081565b3480156104df57600080fd5b506102556101665481565b3480156104f657600080fd5b50610255610d70565b34801561050b57600080fd5b5061031861051a366004612ecb565b610ec7565b34801561052b57600080fd5b5061031861053a366004612f50565b610fa5565b34801561054b57600080fd5b5061031861055a36600461307a565b611446565b34801561056b57600080fd5b5061016a54610284906001600160a01b031681565b34801561058c57600080fd5b506102556101695481565b3480156105a357600080fd5b506103186105b23660046131f5565b61152f565b3480156105c357600080fd5b5061016154610284906001600160a01b031681565b3480156105e457600080fd5b506102556101675481565b3480156105fb57600080fd5b5061025561060a366004612ecb565b611555565b34801561061b57600080fd5b5061025561062a3660046130a6565b6115d7565b34801561063b57600080fd5b506102557f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061069457506301ffc9a760e01b6001600160e01b03198316145b92915050565b61015f5461016a54604051630b9947eb60e41b8152600160048201526000926001600160a01b0390811692169063b9947eb09060240160206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190612ee8565b6001600160a01b03161461078c5760405162461bcd60e51b815260206004820152602860248201527f496e76616c696420696e64657820666f72206c69717569646174696f6e56616c604482015267756520637572766560c01b60648201526084015b60405180910390fd5b610161546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080991906131dc565b90508061081857600091505090565b61016a5460405163cc2b27d760e01b815260048101839052600160248201526000916001600160a01b03169063cc2b27d79060440160206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d91906131dc565b9392505050565b6000828152606560205260409020600101546108c081336117e8565b6108ca838361184c565b505050565b6001600160a01b038116331461093f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610783565b61094982826118d2565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109965760405162461bcd60e51b8152600401610783906133d1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109df600080516020613805833981519152546001600160a01b031690565b6001600160a01b031614610a055760405162461bcd60e51b81526004016107839061341d565b610a0e81611939565b60408051600080825260208201909252610a2a91839190611964565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a765760405162461bcd60e51b8152600401610783906133d1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610abf600080516020613805833981519152546001600160a01b031690565b6001600160a01b031614610ae55760405162461bcd60e51b81526004016107839061341d565b610aee82611939565b61094982826001611964565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b9a5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610783565b5060008051602061380583398151915290565b600054610100900460ff16610bc85760005460ff1615610bcc565b303b155b610be85760405162461bcd60e51b815260040161078390613469565b600054610100900460ff16158015610c0a576000805461ffff19166101011790555b610c12611ade565b8015610a2a576000805461ff001916905550565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610c5c600033610c26565b610c785760405162461bcd60e51b8152600401610783906134b7565b6001600160a01b038316610c9e5760405162461bcd60e51b81526004016107839061351c565b6001600160a01b038216610cc45760405162461bcd60e51b81526004016107839061351c565b6001600160a01b038116610cea5760405162461bcd60e51b81526004016107839061351c565b61016a80546001600160a01b038581166001600160a01b0319928316811790935561016b8054868316908416811790915561012d805492861692909316821790925560408051938452602084019290925282820152517f19d400abe010a4acdeb90b45592c375a7942de25cb548eacbbdf8c4ec9899cf8916060908290030190a1505050565b610161546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610db957600080fd5b505afa158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df191906131dc565b905080610e0057600091505090565b6000610166546101655461016a60009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9191906131dc565b610e9b919061371d565b610ea5919061360d565b61016654909150610eb6828461371d565b610ec0919061360d565b9250505090565b610ed2600033610c26565b610eee5760405162461bcd60e51b8152600401610783906134b7565b6001600160a01b038116610f145760405162461bcd60e51b81526004016107839061351c565b60fb54610f39906000805160206137e5833981519152906001600160a01b031661152f565b610f516000805160206137e5833981519152826108a4565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb79060200160405180910390a150565b610fb0600033610c26565b610fcc5760405162461bcd60e51b8152600401610783906134b7565b6001600160a01b038616610ff25760405162461bcd60e51b81526004016107839061351c565b6001600160a01b0385166110185760405162461bcd60e51b81526004016107839061351c565b6001600160a01b03841661103e5760405162461bcd60e51b81526004016107839061351c565b6001600160a01b0383166110645760405162461bcd60e51b81526004016107839061351c565b6001600160a01b03821661108a5760405162461bcd60e51b81526004016107839061351c565b6001600160a01b0381166110b05760405162461bcd60e51b81526004016107839061351c565b61015f80546001600160a01b03199081166001600160a01b038981169182179093556101608054831689851617905561016180548316888516179055610162805483168785161790556101638054831686851617905561016480549092169284169290921790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561114d57600080fd5b505afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611185919061324f565b61119090600a613672565b61016581905550846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d057600080fd5b505afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611208919061324f565b61121390600a613672565b61016681905550826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561125357600080fd5b505afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b919061324f565b61129690600a613672565b61016781905550816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d657600080fd5b505afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e919061324f565b61131990600a613672565b61016881905550806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611391919061324f565b61139c90600a613672565b61016981905561016554610166546101675461016854604080516001600160a01b038d811682528c811660208301528b8116828401528a811660608301528981166080830152881660a082015260c081019590955260e085019390935261010084019190915261012083015261014082019290925290517fdfcacee58efdb407103c7f270f63daaa870b1b32b9a0109315320c1d52d7e7f8918190036101600190a1505050505050565b61145e6000805160206137e583398151915233610c26565b61147a5760405162461bcd60e51b81526004016107839061339a565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b81523060048201526109499083906001600160a01b038216906370a082319060240160206040518083038186803b1580156114f257600080fd5b505afa158015611506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152a91906131dc565b611b80565b60008281526065602052604090206001015461154b81336117e8565b6108ca83836118d2565b600061156f6000805160206137e583398151915233610c26565b61158b5760405162461bcd60e51b81526004016107839061339a565b600061159683611fda565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea134816040516115c991815260200190565b60405180910390a192915050565b60006115f16000805160206137e583398151915233610c26565b61160d5760405162461bcd60e51b81526004016107839061339a565b600082156116265761161f8685612389565b9050611695565b6116318686866124b6565b9050848110156116955760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610783565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b1580156116d757600080fd5b505afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f91906131dc565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018390529192509088169063a9059cbb90604401602060405180830381600087803b15801561175d57600080fd5b505af1158015611771573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179591906131a6565b5060408051878152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19695505050505050565b6001600160a01b03163b151590565b6117f28282610c26565b6109495761180a816001600160a01b03166014612648565b611815836020612648565b6040516020016118269291906132b1565b60408051601f198184030181529082905262461bcd60e51b825261078391600401613367565b6118568282610c26565b6109495760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561188e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118dc8282610c26565b156109495760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361094981336117e8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611997576108ca836127e4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d057600080fd5b505afa925050508015611a00575060408051601f3d908101601f191682019092526119fd918101906131dc565b60015b611a635760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610783565b6000805160206138058339815191528114611ad25760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610783565b506108ca838383612880565b600054610100900460ff16611af95760005460ff1615611afd565b303b155b611b195760405162461bcd60e51b815260040161078390613469565b600054610100900460ff16158015611b3b576000805461ffff19166101011790555b611b436128ab565b611b4b6128ab565b611b5660003361184c565b610c127f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361184c565b61015f546001600160a01b03838116911614611bae5760405162461bcd60e51b8152600401610783906134e5565b61015f5461016a54604051630b9947eb60e41b8152600160048201526001600160a01b03928316929091169063b9947eb09060240160206040518083038186803b158015611bfb57600080fd5b505afa158015611c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c339190612ee8565b6001600160a01b031614611c895760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420696e64657820666f72207374616b696e67206375727665006044820152606401610783565b611c91612ead565b60008082526020820183905260408083019190915261015f5461016a54915163095ea7b360e01b81526001600160a01b0392831660048201526024810185905291169063095ea7b390604401602060405180830381600087803b158015611cf757600080fd5b505af1158015611d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2f91906131a6565b5061016a54604051633883e11960e01b81526000916001600160a01b031690633883e11990611d65908590600190600401613326565b60206040518083038186803b158015611d7d57600080fd5b505afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db591906131dc565b61016a549091506000906001600160a01b0316632b6e993a846064611ddb86606361371d565b611de5919061360d565b60016040518463ffffffff1660e01b8152600401611e0593929190613343565b602060405180830381600087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5791906131dc565b610160546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611ea157600080fd5b505afa158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed991906131dc565b6101605461016b5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611f2d57600080fd5b505af1158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6591906131a6565b5061016b546040516383df674760e01b815260048101839052306024820152600060448201526001600160a01b03909116906383df674790606401600060405180830381600087803b158015611fba57600080fd5b505af1158015611fce573d6000803e3d6000fd5b50505050505050505050565b61016b54604051634274debf60e11b81523060048201526000916001600160a01b0316906384e9bd7e90602401600060405180830381600087803b15801561202157600080fd5b505af1158015612035573d6000803e3d6000fd5b5050610162546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b15801561208257600080fd5b505afa158015612096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ba91906131dc565b905080156120fc576101625461015f54610167546000926120ec926001600160a01b0391821692911690308087612918565b90506120f881846135f5565b9250505b610163546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561214157600080fd5b505afa158015612155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217991906131dc565b905080156121bb576101635461015f54610168546000926121ab926001600160a01b0391821692911690308087612918565b90506121b781856135f5565b9350505b610164546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561220057600080fd5b505afa158015612214573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223891906131dc565b9050801561227a576101645461015f546101695460009261226a926001600160a01b0391821692911690308087612918565b905061227681866135f5565b9450505b61015f546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90889083906370a082319060240160206040518083038186803b1580156122c857600080fd5b505afa1580156122dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230091906131dc565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561234657600080fd5b505af115801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237e91906131a6565b509295945050505050565b61015f546000906001600160a01b038481169116146123ba5760405162461bcd60e51b8152600401610783906134e5565b610161546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156123ff57600080fd5b505afa158015612413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243791906131dc565b61016b54604051631c683a1b60e11b8152600481018390526000602482015291925030916001600160a01b03909116906338d0743690604401600060405180830381600087803b15801561248a57600080fd5b505af115801561249e573d6000803e3d6000fd5b5050505060006124ac612adc565b9695505050505050565b61015f546000906001600160a01b038581169116146124e75760405162461bcd60e51b8152600401610783906134e5565b60003090506000610166546101655461016a60009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561254557600080fd5b505afa158015612559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257d91906131dc565b612587919061371d565b612591919061360d565b9050600060646125a287606561371d565b6125ac919061360d565b905060008282610166546125c0919061371d565b6125ca919061360d565b61016b54604051631c683a1b60e11b815260048101839052600060248201529192506001600160a01b0316906338d0743690604401600060405180830381600087803b15801561261957600080fd5b505af115801561262d573d6000803e3d6000fd5b50505050600061263b612adc565b9998505050505050505050565b6060600061265783600261371d565b6126629060026135f5565b67ffffffffffffffff81111561267a5761267a6137ab565b6040519080825280601f01601f1916602001820160405280156126a4576020820181803683370190505b509050600360fc1b816000815181106126bf576126bf613795565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126ee576126ee613795565b60200101906001600160f81b031916908160001a905350600061271284600261371d565b61271d9060016135f5565b90505b6001811115612795576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061275157612751613795565b1a60f81b82828151811061276757612767613795565b60200101906001600160f81b031916908160001a90535060049490941c9361278e81613768565b9050612720565b50831561089d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610783565b6001600160a01b0381163b6128515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610783565b60008051602061380583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61288983612d40565b6000825111806128965750805b156108ca576128a58383612d80565b50505050565b600054610100900460ff166129165760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610783565b565b61012d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905260009182919089169063095ea7b390604401602060405180830381600087803b15801561296c57600080fd5b505af1158015612980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a491906131a6565b5060408051600280825260608201835260009260208301908036833701905050905088816000815181106129da576129da613795565b60200260200101906001600160a01b031690816001600160a01b0316815250508781600181518110612a0e57612a0e613795565b6001600160a01b03928316602091820292909201015261012d54166338ed173985848489612a3e426102586135f5565b6040518663ffffffff1660e01b8152600401612a5e959493929190613553565b600060405180830381600087803b158015612a7857600080fd5b505af1158015612a8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ab491908101906130f9565b600181518110612ac657612ac6613795565b6020026020010151925050509695505050505050565b61015f5461016a54604051630b9947eb60e41b8152600160048201526000926001600160a01b0390811692169063b9947eb09060240160206040518083038186803b158015612b2a57600080fd5b505afa158015612b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b629190612ee8565b6001600160a01b031614612bc25760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420696e64657820666f7220756e7374616b696e6720637572766044820152606560f81b6064820152608401610783565b610160546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612c0757600080fd5b505afa158015612c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3f91906131dc565b6101605461016a5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015612c9357600080fd5b505af1158015612ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccb91906131a6565b5061016a5460405163517a55a360e01b8152600481018390526001602482018190526000604483018190526064830191909152916001600160a01b03169063517a55a390608401602060405180830381600087803b158015612d2c57600080fd5b505af1158015610879573d6000803e3d6000fd5b612d49816127e4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612de85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610783565b600080846001600160a01b031684604051612e039190613295565b600060405180830381855af49150503d8060008114612e3e576040519150601f19603f3d011682016040523d82523d6000602084013e612e43565b606091505b5091509150612e6b828260405180606001604052806027815260200161382560279139612e74565b95945050505050565b60608315612e8357508161089d565b825115612e935782518084602001fd5b8160405162461bcd60e51b81526004016107839190613367565b60405180606001604052806003906020820280368337509192915050565b600060208284031215612edd57600080fd5b813561089d816137c1565b600060208284031215612efa57600080fd5b815161089d816137c1565b600080600060608486031215612f1a57600080fd5b8335612f25816137c1565b92506020840135612f35816137c1565b91506040840135612f45816137c1565b809150509250925092565b60008060008060008060c08789031215612f6957600080fd5b8635612f74816137c1565b95506020870135612f84816137c1565b94506040870135612f94816137c1565b93506060870135612fa4816137c1565b92506080870135612fb4816137c1565b915060a0870135612fc4816137c1565b809150509295509295509295565b60008060408385031215612fe557600080fd5b8235612ff0816137c1565b915060208381013567ffffffffffffffff8082111561300e57600080fd5b818601915086601f83011261302257600080fd5b813581811115613034576130346137ab565b613046601f8201601f191685016135c4565b9150808252878482850101111561305c57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561308d57600080fd5b8235613098816137c1565b946020939093013593505050565b600080600080608085870312156130bc57600080fd5b84356130c7816137c1565b93506020850135925060408501356130de816137c1565b915060608501356130ee816137d6565b939692955090935050565b6000602080838503121561310c57600080fd5b825167ffffffffffffffff8082111561312457600080fd5b818501915085601f83011261313857600080fd5b81518181111561314a5761314a6137ab565b8060051b915061315b8483016135c4565b8181528481019084860184860187018a101561317657600080fd5b600095505b8386101561319957805183526001959095019491860191860161317b565b5098975050505050505050565b6000602082840312156131b857600080fd5b815161089d816137d6565b6000602082840312156131d557600080fd5b5035919050565b6000602082840312156131ee57600080fd5b5051919050565b6000806040838503121561320857600080fd5b82359150602083013561321a816137c1565b809150509250929050565b60006020828403121561323757600080fd5b81356001600160e01b03198116811461089d57600080fd5b60006020828403121561326157600080fd5b815160ff8116811461089d57600080fd5b8060005b60038110156128a5578151845260209384019390910190600101613276565b600082516132a781846020870161373c565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132e981601785016020880161373c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161331a81602884016020880161373c565b01602801949350505050565b608081016133348285613272565b82151560608301529392505050565b60a081016133518286613272565b8360608301528215156080830152949350505050565b602081526000825180602084015261338681604085016020870161373c565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156135a35784516001600160a01b03168352938301939183019160010161357e565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156135ed576135ed6137ab565b604052919050565b600082198211156136085761360861377f565b500190565b60008261362a57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561366a5781600019048211156136505761365061377f565b8085161561365d57918102915b93841c9390800290613634565b509250929050565b600061089d60ff84168360008261368b57506001610694565b8161369857506000610694565b81600181146136ae57600281146136b8576136d4565b6001915050610694565b60ff8411156136c9576136c961377f565b50506001821b610694565b5060208310610133831016604e8410600b84101617156136f7575081810a610694565b613701838361362f565b80600019048211156137155761371561377f565b029392505050565b60008160001904831182151516156137375761373761377f565b500290565b60005b8381101561375757818101518382015260200161373f565b838111156128a55750506000910152565b6000816137775761377761377f565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a2a57600080fd5b8015158114610a2a57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122056086eddcce563ce5fc94934c6adedb4e81f39f98a2db2927aeec2d5fec5b0fc64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c80637d5f580211610118578063adc9772e116100a0578063e0ef81a21161006f578063e0ef81a2146105b7578063ecc1a41a146105d8578063ef5cfb8c146105ef578063f6f6b8811461060f578063f72c0d8b1461062f57600080fd5b8063adc9772e1461053f578063b20fdc0d1461055f578063b744bd7014610580578063d547741f1461059757600080fd5b8063a217fddf116100e7578063a217fddf146104be578063a2894942146104d3578063a3673b38146104ea578063a440b21a146104ff578063a7ab2e4d1461051f57600080fd5b80637d5f5802146104475780638129fc1c1461046957806391d148541461047e578063a081df7f1461049e57600080fd5b806332d7d66d1161019b57806340a9f0741161016a57806340a9f074146103bd5780634f1ef286146103de57806352d1902d146103f1578063620b75df1461040657806367a16aa51461042657600080fd5b806332d7d66d1461033b57806334c0d4421461035c57806336568abe1461037d5780633659cfe61461039d57600080fd5b80632576e65a116101d75780632576e65a146102cc5780632c04664a146102e15780632f2ff15d146102f85780632f8043271461031a57600080fd5b806301ffc9a71461020957806306da3f2e1461023e57806311eac85514610263578063248a9ca31461029c575b600080fd5b34801561021557600080fd5b50610229610224366004613225565b610663565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b506102556101655481565b604051908152602001610235565b34801561026f57600080fd5b5061015f54610284906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b3480156102a857600080fd5b506102556102b73660046131c3565b60009081526065602052604090206001015490565b3480156102d857600080fd5b5061025561069a565b3480156102ed57600080fd5b506102556101685481565b34801561030457600080fd5b506103186103133660046131f5565b6108a4565b005b34801561032657600080fd5b5061016054610284906001600160a01b031681565b34801561034757600080fd5b5061016354610284906001600160a01b031681565b34801561036857600080fd5b5061016b54610284906001600160a01b031681565b34801561038957600080fd5b506103186103983660046131f5565b6108cf565b3480156103a957600080fd5b506103186103b8366004612ecb565b61094d565b3480156103c957600080fd5b5061016254610284906001600160a01b031681565b6103186103ec366004612fd2565b610a2d565b3480156103fd57600080fd5b50610255610afa565b34801561041257600080fd5b5060fb54610284906001600160a01b031681565b34801561043257600080fd5b5061016454610284906001600160a01b031681565b34801561045357600080fd5b506102556000805160206137e583398151915281565b34801561047557600080fd5b50610318610bad565b34801561048a57600080fd5b506102296104993660046131f5565b610c26565b3480156104aa57600080fd5b506103186104b9366004612f05565b610c51565b3480156104ca57600080fd5b50610255600081565b3480156104df57600080fd5b506102556101665481565b3480156104f657600080fd5b50610255610d70565b34801561050b57600080fd5b5061031861051a366004612ecb565b610ec7565b34801561052b57600080fd5b5061031861053a366004612f50565b610fa5565b34801561054b57600080fd5b5061031861055a36600461307a565b611446565b34801561056b57600080fd5b5061016a54610284906001600160a01b031681565b34801561058c57600080fd5b506102556101695481565b3480156105a357600080fd5b506103186105b23660046131f5565b61152f565b3480156105c357600080fd5b5061016154610284906001600160a01b031681565b3480156105e457600080fd5b506102556101675481565b3480156105fb57600080fd5b5061025561060a366004612ecb565b611555565b34801561061b57600080fd5b5061025561062a3660046130a6565b6115d7565b34801561063b57600080fd5b506102557f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60006001600160e01b03198216637965db0b60e01b148061069457506301ffc9a760e01b6001600160e01b03198316145b92915050565b61015f5461016a54604051630b9947eb60e41b8152600160048201526000926001600160a01b0390811692169063b9947eb09060240160206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190612ee8565b6001600160a01b03161461078c5760405162461bcd60e51b815260206004820152602860248201527f496e76616c696420696e64657820666f72206c69717569646174696f6e56616c604482015267756520637572766560c01b60648201526084015b60405180910390fd5b610161546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080991906131dc565b90508061081857600091505090565b61016a5460405163cc2b27d760e01b815260048101839052600160248201526000916001600160a01b03169063cc2b27d79060440160206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d91906131dc565b9392505050565b6000828152606560205260409020600101546108c081336117e8565b6108ca838361184c565b505050565b6001600160a01b038116331461093f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610783565b61094982826118d2565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109965760405162461bcd60e51b8152600401610783906133d1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109df600080516020613805833981519152546001600160a01b031690565b6001600160a01b031614610a055760405162461bcd60e51b81526004016107839061341d565b610a0e81611939565b60408051600080825260208201909252610a2a91839190611964565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a765760405162461bcd60e51b8152600401610783906133d1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610abf600080516020613805833981519152546001600160a01b031690565b6001600160a01b031614610ae55760405162461bcd60e51b81526004016107839061341d565b610aee82611939565b61094982826001611964565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b9a5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610783565b5060008051602061380583398151915290565b600054610100900460ff16610bc85760005460ff1615610bcc565b303b155b610be85760405162461bcd60e51b815260040161078390613469565b600054610100900460ff16158015610c0a576000805461ffff19166101011790555b610c12611ade565b8015610a2a576000805461ff001916905550565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610c5c600033610c26565b610c785760405162461bcd60e51b8152600401610783906134b7565b6001600160a01b038316610c9e5760405162461bcd60e51b81526004016107839061351c565b6001600160a01b038216610cc45760405162461bcd60e51b81526004016107839061351c565b6001600160a01b038116610cea5760405162461bcd60e51b81526004016107839061351c565b61016a80546001600160a01b038581166001600160a01b0319928316811790935561016b8054868316908416811790915561012d805492861692909316821790925560408051938452602084019290925282820152517f19d400abe010a4acdeb90b45592c375a7942de25cb548eacbbdf8c4ec9899cf8916060908290030190a1505050565b610161546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610db957600080fd5b505afa158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df191906131dc565b905080610e0057600091505090565b6000610166546101655461016a60009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9191906131dc565b610e9b919061371d565b610ea5919061360d565b61016654909150610eb6828461371d565b610ec0919061360d565b9250505090565b610ed2600033610c26565b610eee5760405162461bcd60e51b8152600401610783906134b7565b6001600160a01b038116610f145760405162461bcd60e51b81526004016107839061351c565b60fb54610f39906000805160206137e5833981519152906001600160a01b031661152f565b610f516000805160206137e5833981519152826108a4565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb79060200160405180910390a150565b610fb0600033610c26565b610fcc5760405162461bcd60e51b8152600401610783906134b7565b6001600160a01b038616610ff25760405162461bcd60e51b81526004016107839061351c565b6001600160a01b0385166110185760405162461bcd60e51b81526004016107839061351c565b6001600160a01b03841661103e5760405162461bcd60e51b81526004016107839061351c565b6001600160a01b0383166110645760405162461bcd60e51b81526004016107839061351c565b6001600160a01b03821661108a5760405162461bcd60e51b81526004016107839061351c565b6001600160a01b0381166110b05760405162461bcd60e51b81526004016107839061351c565b61015f80546001600160a01b03199081166001600160a01b038981169182179093556101608054831689851617905561016180548316888516179055610162805483168785161790556101638054831686851617905561016480549092169284169290921790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561114d57600080fd5b505afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611185919061324f565b61119090600a613672565b61016581905550846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d057600080fd5b505afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611208919061324f565b61121390600a613672565b61016681905550826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561125357600080fd5b505afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b919061324f565b61129690600a613672565b61016781905550816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d657600080fd5b505afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e919061324f565b61131990600a613672565b61016881905550806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611391919061324f565b61139c90600a613672565b61016981905561016554610166546101675461016854604080516001600160a01b038d811682528c811660208301528b8116828401528a811660608301528981166080830152881660a082015260c081019590955260e085019390935261010084019190915261012083015261014082019290925290517fdfcacee58efdb407103c7f270f63daaa870b1b32b9a0109315320c1d52d7e7f8918190036101600190a1505050505050565b61145e6000805160206137e583398151915233610c26565b61147a5760405162461bcd60e51b81526004016107839061339a565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a16040516370a0823160e01b81523060048201526109499083906001600160a01b038216906370a082319060240160206040518083038186803b1580156114f257600080fd5b505afa158015611506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152a91906131dc565b611b80565b60008281526065602052604090206001015461154b81336117e8565b6108ca83836118d2565b600061156f6000805160206137e583398151915233610c26565b61158b5760405162461bcd60e51b81526004016107839061339a565b600061159683611fda565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea134816040516115c991815260200190565b60405180910390a192915050565b60006115f16000805160206137e583398151915233610c26565b61160d5760405162461bcd60e51b81526004016107839061339a565b600082156116265761161f8685612389565b9050611695565b6116318686866124b6565b9050848110156116955760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610783565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b1580156116d757600080fd5b505afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f91906131dc565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018390529192509088169063a9059cbb90604401602060405180830381600087803b15801561175d57600080fd5b505af1158015611771573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179591906131a6565b5060408051878152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19695505050505050565b6001600160a01b03163b151590565b6117f28282610c26565b6109495761180a816001600160a01b03166014612648565b611815836020612648565b6040516020016118269291906132b1565b60408051601f198184030181529082905262461bcd60e51b825261078391600401613367565b6118568282610c26565b6109495760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561188e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118dc8282610c26565b156109495760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361094981336117e8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611997576108ca836127e4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d057600080fd5b505afa925050508015611a00575060408051601f3d908101601f191682019092526119fd918101906131dc565b60015b611a635760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610783565b6000805160206138058339815191528114611ad25760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610783565b506108ca838383612880565b600054610100900460ff16611af95760005460ff1615611afd565b303b155b611b195760405162461bcd60e51b815260040161078390613469565b600054610100900460ff16158015611b3b576000805461ffff19166101011790555b611b436128ab565b611b4b6128ab565b611b5660003361184c565b610c127f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361184c565b61015f546001600160a01b03838116911614611bae5760405162461bcd60e51b8152600401610783906134e5565b61015f5461016a54604051630b9947eb60e41b8152600160048201526001600160a01b03928316929091169063b9947eb09060240160206040518083038186803b158015611bfb57600080fd5b505afa158015611c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c339190612ee8565b6001600160a01b031614611c895760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420696e64657820666f72207374616b696e67206375727665006044820152606401610783565b611c91612ead565b60008082526020820183905260408083019190915261015f5461016a54915163095ea7b360e01b81526001600160a01b0392831660048201526024810185905291169063095ea7b390604401602060405180830381600087803b158015611cf757600080fd5b505af1158015611d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2f91906131a6565b5061016a54604051633883e11960e01b81526000916001600160a01b031690633883e11990611d65908590600190600401613326565b60206040518083038186803b158015611d7d57600080fd5b505afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db591906131dc565b61016a549091506000906001600160a01b0316632b6e993a846064611ddb86606361371d565b611de5919061360d565b60016040518463ffffffff1660e01b8152600401611e0593929190613343565b602060405180830381600087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5791906131dc565b610160546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611ea157600080fd5b505afa158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed991906131dc565b6101605461016b5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015611f2d57600080fd5b505af1158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6591906131a6565b5061016b546040516383df674760e01b815260048101839052306024820152600060448201526001600160a01b03909116906383df674790606401600060405180830381600087803b158015611fba57600080fd5b505af1158015611fce573d6000803e3d6000fd5b50505050505050505050565b61016b54604051634274debf60e11b81523060048201526000916001600160a01b0316906384e9bd7e90602401600060405180830381600087803b15801561202157600080fd5b505af1158015612035573d6000803e3d6000fd5b5050610162546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b15801561208257600080fd5b505afa158015612096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ba91906131dc565b905080156120fc576101625461015f54610167546000926120ec926001600160a01b0391821692911690308087612918565b90506120f881846135f5565b9250505b610163546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561214157600080fd5b505afa158015612155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217991906131dc565b905080156121bb576101635461015f54610168546000926121ab926001600160a01b0391821692911690308087612918565b90506121b781856135f5565b9350505b610164546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561220057600080fd5b505afa158015612214573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223891906131dc565b9050801561227a576101645461015f546101695460009261226a926001600160a01b0391821692911690308087612918565b905061227681866135f5565b9450505b61015f546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90889083906370a082319060240160206040518083038186803b1580156122c857600080fd5b505afa1580156122dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230091906131dc565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561234657600080fd5b505af115801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237e91906131a6565b509295945050505050565b61015f546000906001600160a01b038481169116146123ba5760405162461bcd60e51b8152600401610783906134e5565b610161546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156123ff57600080fd5b505afa158015612413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243791906131dc565b61016b54604051631c683a1b60e11b8152600481018390526000602482015291925030916001600160a01b03909116906338d0743690604401600060405180830381600087803b15801561248a57600080fd5b505af115801561249e573d6000803e3d6000fd5b5050505060006124ac612adc565b9695505050505050565b61015f546000906001600160a01b038581169116146124e75760405162461bcd60e51b8152600401610783906134e5565b60003090506000610166546101655461016a60009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561254557600080fd5b505afa158015612559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257d91906131dc565b612587919061371d565b612591919061360d565b9050600060646125a287606561371d565b6125ac919061360d565b905060008282610166546125c0919061371d565b6125ca919061360d565b61016b54604051631c683a1b60e11b815260048101839052600060248201529192506001600160a01b0316906338d0743690604401600060405180830381600087803b15801561261957600080fd5b505af115801561262d573d6000803e3d6000fd5b50505050600061263b612adc565b9998505050505050505050565b6060600061265783600261371d565b6126629060026135f5565b67ffffffffffffffff81111561267a5761267a6137ab565b6040519080825280601f01601f1916602001820160405280156126a4576020820181803683370190505b509050600360fc1b816000815181106126bf576126bf613795565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126ee576126ee613795565b60200101906001600160f81b031916908160001a905350600061271284600261371d565b61271d9060016135f5565b90505b6001811115612795576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061275157612751613795565b1a60f81b82828151811061276757612767613795565b60200101906001600160f81b031916908160001a90535060049490941c9361278e81613768565b9050612720565b50831561089d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610783565b6001600160a01b0381163b6128515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610783565b60008051602061380583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61288983612d40565b6000825111806128965750805b156108ca576128a58383612d80565b50505050565b600054610100900460ff166129165760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610783565b565b61012d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905260009182919089169063095ea7b390604401602060405180830381600087803b15801561296c57600080fd5b505af1158015612980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a491906131a6565b5060408051600280825260608201835260009260208301908036833701905050905088816000815181106129da576129da613795565b60200260200101906001600160a01b031690816001600160a01b0316815250508781600181518110612a0e57612a0e613795565b6001600160a01b03928316602091820292909201015261012d54166338ed173985848489612a3e426102586135f5565b6040518663ffffffff1660e01b8152600401612a5e959493929190613553565b600060405180830381600087803b158015612a7857600080fd5b505af1158015612a8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ab491908101906130f9565b600181518110612ac657612ac6613795565b6020026020010151925050509695505050505050565b61015f5461016a54604051630b9947eb60e41b8152600160048201526000926001600160a01b0390811692169063b9947eb09060240160206040518083038186803b158015612b2a57600080fd5b505afa158015612b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b629190612ee8565b6001600160a01b031614612bc25760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420696e64657820666f7220756e7374616b696e6720637572766044820152606560f81b6064820152608401610783565b610160546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612c0757600080fd5b505afa158015612c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3f91906131dc565b6101605461016a5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015612c9357600080fd5b505af1158015612ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccb91906131a6565b5061016a5460405163517a55a360e01b8152600481018390526001602482018190526000604483018190526064830191909152916001600160a01b03169063517a55a390608401602060405180830381600087803b158015612d2c57600080fd5b505af1158015610879573d6000803e3d6000fd5b612d49816127e4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612de85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610783565b600080846001600160a01b031684604051612e039190613295565b600060405180830381855af49150503d8060008114612e3e576040519150601f19603f3d011682016040523d82523d6000602084013e612e43565b606091505b5091509150612e6b828260405180606001604052806027815260200161382560279139612e74565b95945050505050565b60608315612e8357508161089d565b825115612e935782518084602001fd5b8160405162461bcd60e51b81526004016107839190613367565b60405180606001604052806003906020820280368337509192915050565b600060208284031215612edd57600080fd5b813561089d816137c1565b600060208284031215612efa57600080fd5b815161089d816137c1565b600080600060608486031215612f1a57600080fd5b8335612f25816137c1565b92506020840135612f35816137c1565b91506040840135612f45816137c1565b809150509250925092565b60008060008060008060c08789031215612f6957600080fd5b8635612f74816137c1565b95506020870135612f84816137c1565b94506040870135612f94816137c1565b93506060870135612fa4816137c1565b92506080870135612fb4816137c1565b915060a0870135612fc4816137c1565b809150509295509295509295565b60008060408385031215612fe557600080fd5b8235612ff0816137c1565b915060208381013567ffffffffffffffff8082111561300e57600080fd5b818601915086601f83011261302257600080fd5b813581811115613034576130346137ab565b613046601f8201601f191685016135c4565b9150808252878482850101111561305c57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561308d57600080fd5b8235613098816137c1565b946020939093013593505050565b600080600080608085870312156130bc57600080fd5b84356130c7816137c1565b93506020850135925060408501356130de816137c1565b915060608501356130ee816137d6565b939692955090935050565b6000602080838503121561310c57600080fd5b825167ffffffffffffffff8082111561312457600080fd5b818501915085601f83011261313857600080fd5b81518181111561314a5761314a6137ab565b8060051b915061315b8483016135c4565b8181528481019084860184860187018a101561317657600080fd5b600095505b8386101561319957805183526001959095019491860191860161317b565b5098975050505050505050565b6000602082840312156131b857600080fd5b815161089d816137d6565b6000602082840312156131d557600080fd5b5035919050565b6000602082840312156131ee57600080fd5b5051919050565b6000806040838503121561320857600080fd5b82359150602083013561321a816137c1565b809150509250929050565b60006020828403121561323757600080fd5b81356001600160e01b03198116811461089d57600080fd5b60006020828403121561326157600080fd5b815160ff8116811461089d57600080fd5b8060005b60038110156128a5578151845260209384019390910190600101613276565b600082516132a781846020870161373c565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132e981601785016020880161373c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161331a81602884016020880161373c565b01602801949350505050565b608081016133348285613272565b82151560608301529392505050565b60a081016133518286613272565b8360608301528215156080830152949350505050565b602081526000825180602084015261338681604085016020870161373c565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156135a35784516001600160a01b03168352938301939183019160010161357e565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156135ed576135ed6137ab565b604052919050565b600082198211156136085761360861377f565b500190565b60008261362a57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561366a5781600019048211156136505761365061377f565b8085161561365d57918102915b93841c9390800290613634565b509250929050565b600061089d60ff84168360008261368b57506001610694565b8161369857506000610694565b81600181146136ae57600281146136b8576136d4565b6001915050610694565b60ff8411156136c9576136c961377f565b50506001821b610694565b5060208310610133831016604e8410600b84101617156136f7575081810a610694565b613701838361362f565b80600019048211156137155761371561377f565b029392505050565b60008160001904831182151516156137375761373761377f565b500290565b60005b8381101561375757818101518382015260200161373f565b838111156128a55750506000910152565b6000816137775761377761377f565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a2a57600080fd5b8015158114610a2a57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122056086eddcce563ce5fc94934c6adedb4e81f39f98a2db2927aeec2d5fec5b0fc64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 797,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 800,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1284,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1591,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 779,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 999,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13449,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 13727,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14406,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IUniswapV2Router02)13363"
      },
      {
        "astId": 14542,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6599,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "usdcToken",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(IERC20)2415"
      },
      {
        "astId": 6602,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "crvPoolToken",
        "offset": 0,
        "slot": "352",
        "type": "t_contract(IERC20)2415"
      },
      {
        "astId": 6605,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "crvGaugeToken",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(IERC20)2415"
      },
      {
        "astId": 6608,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "geistToken",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(IERC20)2415"
      },
      {
        "astId": 6611,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "crvToken",
        "offset": 0,
        "slot": "355",
        "type": "t_contract(IERC20)2415"
      },
      {
        "astId": 6614,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "wFtmToken",
        "offset": 0,
        "slot": "356",
        "type": "t_contract(IERC20)2415"
      },
      {
        "astId": 6616,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "usdcTokenDenominator",
        "offset": 0,
        "slot": "357",
        "type": "t_uint256"
      },
      {
        "astId": 6618,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "crvPoolTokenDenominator",
        "offset": 0,
        "slot": "358",
        "type": "t_uint256"
      },
      {
        "astId": 6620,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "geistTokenDenominator",
        "offset": 0,
        "slot": "359",
        "type": "t_uint256"
      },
      {
        "astId": 6622,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "crvTokenDenominator",
        "offset": 0,
        "slot": "360",
        "type": "t_uint256"
      },
      {
        "astId": 6624,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "wFtmTokenDenominator",
        "offset": 0,
        "slot": "361",
        "type": "t_uint256"
      },
      {
        "astId": 6627,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "crvPool",
        "offset": 0,
        "slot": "362",
        "type": "t_contract(IStableSwapPool)11719"
      },
      {
        "astId": 6630,
        "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
        "label": "rewardGauge",
        "offset": 0,
        "slot": "363",
        "type": "t_contract(IRewardsOnlyGauge)11537"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2415": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsOnlyGauge)11537": {
        "encoding": "inplace",
        "label": "contract IRewardsOnlyGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwapPool)11719": {
        "encoding": "inplace",
        "label": "contract IStableSwapPool",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)13363": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategyCurveGeist.sol:StrategyCurveGeist",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
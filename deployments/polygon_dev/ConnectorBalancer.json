{
  "address": "0x6d27C7E1091cfE78b7b80C3AE52b7A4ee6051613",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balancerPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId",
          "type": "bytes32"
        }
      ],
      "name": "setBalancerPoolId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        }
      ],
      "name": "setBalancerVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiar",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiar",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x167932a1d1f84f2f0d70e90757f99d980c6c2d24e126b121a8c3a2cbe788dd7d",
  "receipt": {
    "to": null,
    "from": "0x5CB01385d3097b6a189d1ac8BA3364D900666445",
    "contractAddress": "0x6d27C7E1091cfE78b7b80C3AE52b7A4ee6051613",
    "transactionIndex": 43,
    "gasUsed": "1029593",
    "logsBloom": "0x
    "blockHash": "0xb3395eb1c13456577d519736cc9aaa68f64c8b3cff3c9ab9c7415f34df500300",
    "transactionHash": "0x167932a1d1f84f2f0d70e90757f99d980c6c2d24e126b121a8c3a2cbe788dd7d",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 24466626,
        "transactionHash": "0x167932a1d1f84f2f0d70e90757f99d980c6c2d24e126b121a8c3a2cbe788dd7d",
        "address": "0x6d27C7E1091cfE78b7b80C3AE52b7A4ee6051613",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445"
        ],
        "data": "0x",
        "logIndex": 247,
        "blockHash": "0xb3395eb1c13456577d519736cc9aaa68f64c8b3cff3c9ab9c7415f34df500300"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 24466626,
        "transactionHash": "0x167932a1d1f84f2f0d70e90757f99d980c6c2d24e126b121a8c3a2cbe788dd7d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005cb01385d3097b6a189d1ac8ba3364d900666445",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000781bccd3fdd7820000000000000000000000000000000000000000000000040d451204367c181e00000000000000000000000000000000000000000000046498bbe3ecb6334bb90000000000000000000000000000000000000000000000040cccf637627e409c0000000000000000000000000000000000000000000004649933ffb98a31233b",
        "logIndex": 248,
        "blockHash": "0xb3395eb1c13456577d519736cc9aaa68f64c8b3cff3c9ab9c7415f34df500300"
      }
    ],
    "blockNumber": 24466626,
    "cumulativeGasUsed": "10626404",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c4418c192717ba67eec35b7d747371f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balancerPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId\",\"type\":\"bytes32\"}],\"name\":\"setBalancerPoolId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"}],\"name\":\"setBalancerVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiar\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiar\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/ConnectorBalancer.sol\":\"ConnectorBalancer\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/connectors/ConnectorBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IConnector.sol\\\";\\nimport \\\"./balancer/interfaces/IVault.sol\\\";\\nimport \\\"./balancer/interfaces/IAsset.sol\\\";\\n\\ncontract ConnectorBalancer is IConnector, Ownable {\\n\\n    IVault public balancerVault;\\n    bytes32 public balancerPoolId;\\n\\n    function setBalancerVault(address _balancerVault) public onlyOwner {\\n        require(_balancerVault != address(0), \\\"Zero address not allowed\\\");\\n        balancerVault = IVault(_balancerVault);\\n    }\\n\\n    function setBalancerPoolId(bytes32 _balancerPoolId) public onlyOwner {\\n        require(_balancerPoolId != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n        balancerPoolId = _balancerPoolId;\\n    }\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) public override {\\n        IERC20(_asset).approve(address(balancerVault), _amount);\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(balancerPoolId);\\n\\n        IAsset[] memory assets = new IAsset[](4);\\n        uint256[] memory maxAmountsIn = new uint256[](4);\\n        uint256[] memory amountsIn = new uint256[](4);\\n        for (uint256 i; i < tokens.length; i++) {\\n            assets[i] = IAsset(address(tokens[i]));\\n            if (address(tokens[i]) == _asset) {\\n                maxAmountsIn[i] = _amount;\\n                amountsIn[i] = _amount;\\n            } else {\\n                maxAmountsIn[i] = 0;\\n                amountsIn[i] = 0;\\n            }\\n        }\\n\\n        uint256 joinKind = 1;\\n        uint256 minimumBPT = 0;\\n        bytes memory userData = abi.encode(joinKind, amountsIn, minimumBPT);\\n\\n        IVault.JoinPoolRequest memory request = IVault.JoinPoolRequest(assets, maxAmountsIn, userData, false);\\n\\n        balancerVault.joinPool(balancerPoolId, address(this), _beneficiar, request);\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) public override returns (uint256) {\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(balancerPoolId);\\n\\n        IAsset[] memory assets = new IAsset[](4);\\n        uint256[] memory minAmountsOut = new uint256[](4);\\n        for (uint256 i; i < tokens.length; i++) {\\n            assets[i] = IAsset(address(tokens[i]));\\n            if (address(tokens[i]) == _asset) {\\n                //TODO: Balancer. FIX if big slippage\\n                uint256 denominator = 10 ** (18 - IERC20Metadata(address(_asset)).decimals());\\n                minAmountsOut[i] = _amount / denominator * 9 / 10;\\n            } else {\\n                minAmountsOut[i] = 0;\\n            }\\n        }\\n\\n        uint256 exitKind = 0;\\n        uint256 exitTokenIndex = 0;\\n        bytes memory userData = abi.encode(exitKind, _amount, exitTokenIndex);\\n\\n        IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest(assets, minAmountsOut, userData, false);\\n\\n        balancerVault.exitPool(balancerPoolId, address(this), payable(_beneficiar), request);\\n        return IERC20(_asset).balanceOf(_beneficiar);\\n    }\\n}\\n\",\"keccak256\":\"0x04a0686668295a6ffca94be9143269ff821b51275aeeb9ffa4c78892f937ec98\",\"license\":\"MIT\"},\"contracts/connectors/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5ea8a858a99674f94a7ee4a75ede7a29074228f754ec15043e8e9389c192d8b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        IERC20[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8d7bc2ab21e1e18fcc06b057eb3f463d641c5cdd8d55dd77c5cd144bf16f33c1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Common inrterface to DeFi protocol connectors\\n/// @author @Stanta\\n/// @notice Every connector have to implement this function\\n/// @dev Choosing of connector releasing by changing address of connector's contract\\ninterface IConnector {\\n    function stake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiar\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf418605c420c689e5cdd7cf9a49d8906f8c5631a629a5d6eea6d9f2eba79fdb8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6111378061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063926e31d611610066578063926e31d6146100f6578063c83e413514610117578063dbbb64b91461012a578063f2fde38b14610133578063f8c464521461014657600080fd5b8063158274a514610098578063294091cd146100c8578063715018a6146100dd5780638da5cb5b146100e5575b600080fd5b6001546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6100d6366004610b9f565b610159565b005b6100db6104e0565b6000546001600160a01b03166100ab565b610109610104366004610b9f565b61051f565b6040519081526020016100bf565b6100db610125366004610cd8565b610900565b61010960025481565b6100db610141366004610b7b565b61097c565b6100db610154366004610b7b565b610a17565b60015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529084169063095ea7b390604401602060405180830381600087803b1580156101a757600080fd5b505af11580156101bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101df9190610cb6565b50600154600254604051631f29a8cd60e31b81526004810191909152600091829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561022d57600080fd5b505afa158015610241573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102699190810190610be1565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a08201909252929350600092915060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b86518110156103fe578681815181106102fb576102fb6110c0565b6020026020010151848281518110610315576103156110c0565b60200260200101906001600160a01b031690816001600160a01b031681525050896001600160a01b0316878281518110610351576103516110c0565b60200260200101516001600160a01b031614156103ab578883828151811061037b5761037b6110c0565b6020026020010181815250508882828151811061039a5761039a6110c0565b6020026020010181815250506103ec565b60008382815181106103bf576103bf6110c0565b60200260200101818152505060008282815181106103df576103df6110c0565b6020026020010181815250505b806103f68161108f565b9150506102e0565b5060006001905060008082848360405160200161041d93929190610ebd565b604051602081830303815290604052905060006040518060800160405280888152602001878152602001838152602001600015158152509050600160009054906101000a90046001600160a01b03166001600160a01b031663b95cac28600254308e856040518563ffffffff1660e01b815260040161049f9493929190610e4c565b600060405180830381600087803b1580156104b957600080fd5b505af11580156104cd573d6000803e3d6000fd5b5050505050505050505050505050505050565b6000546001600160a01b031633146105135760405162461bcd60e51b815260040161050a90610e88565b60405180910390fd5b61051d6000610ab9565b565b600154600254604051631f29a8cd60e31b81526000928392839283926001600160a01b03169163f94d46689161055c919060040190815260200190565b60006040518083038186803b15801561057457600080fd5b505afa158015610588573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b09190810190610be1565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b855181101561078e5785818151811061061e5761061e6110c0565b6020026020010151838281518110610638576106386110c0565b60200260200101906001600160a01b031690816001600160a01b031681525050896001600160a01b0316868281518110610674576106746110c0565b60200260200101516001600160a01b0316141561075b5760008a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190610d0a565b61070990601261106c565b61071490600a610fa0565b9050600a610722828c610f3b565b61072d90600961104d565b6107379190610f3b565b838381518110610749576107496110c0565b6020026020010181815250505061077c565b600082828151811061076f5761076f6110c0565b6020026020010181815250505b806107868161108f565b915050610603565b50604080516000602082018190529181018a90526060810182905281908190608001604051602081830303815290604052905060006040518060800160405280878152602001868152602001838152602001600015158152509050600160009054906101000a90046001600160a01b03166001600160a01b0316638bdb3913600254308e856040518563ffffffff1660e01b81526004016108329493929190610e4c565b600060405180830381600087803b15801561084c57600080fd5b505af1158015610860573d6000803e3d6000fd5b505050508c6001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040161089f91906001600160a01b0391909116815260200190565b60206040518083038186803b1580156108b757600080fd5b505afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef9190610cf1565b9d9c50505050505050505050505050565b6000546001600160a01b0316331461092a5760405162461bcd60e51b815260040161050a90610e88565b806109775760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f77656400000000000000604482015260640161050a565b600255565b6000546001600160a01b031633146109a65760405162461bcd60e51b815260040161050a90610e88565b6001600160a01b038116610a0b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050a565b610a1481610ab9565b50565b6000546001600160a01b03163314610a415760405162461bcd60e51b815260040161050a90610e88565b6001600160a01b038116610a975760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161050a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082601f830112610b1a57600080fd5b81516020610b2f610b2a83610f17565b610ee6565b80838252828201915082860187848660051b8901011115610b4f57600080fd5b60005b85811015610b6e57815184529284019290840190600101610b52565b5090979650505050505050565b600060208284031215610b8d57600080fd5b8135610b98816110ec565b9392505050565b600080600060608486031215610bb457600080fd5b8335610bbf816110ec565b9250602084013591506040840135610bd6816110ec565b809150509250925092565b600080600060608486031215610bf657600080fd5b835167ffffffffffffffff80821115610c0e57600080fd5b818601915086601f830112610c2257600080fd5b81516020610c32610b2a83610f17565b8083825282820191508286018b848660051b8901011115610c5257600080fd5b600096505b84871015610c7e578051610c6a816110ec565b835260019690960195918301918301610c57565b5091890151919750909350505080821115610c9857600080fd5b50610ca586828701610b09565b925050604084015190509250925092565b600060208284031215610cc857600080fd5b81518015158114610b9857600080fd5b600060208284031215610cea57600080fd5b5035919050565b600060208284031215610d0357600080fd5b5051919050565b600060208284031215610d1c57600080fd5b815160ff81168114610b9857600080fd5b600081518084526020808501945080840160005b83811015610d5d57815187529582019590820190600101610d41565b509495945050505050565b6000815180845260005b81811015610d8e57602081850181015186830182015201610d72565b81811115610da0576000602083870101525b50601f01601f19169290920160200192915050565b8051608080845281519084018190526000916020919082019060a0860190845b81811015610dfa5783516001600160a01b031683529284019291840191600101610dd5565b505082850151915085810383870152610e138183610d2d565b9250505060408301518482036040860152610e2e8282610d68565b9150506060830151610e44606086018215159052565b509392505050565b8481526001600160a01b03848116602083015283166040820152608060608201819052600090610e7e90830184610db5565b9695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b838152606060208201526000610ed66060830185610d2d565b9050826040830152949350505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f0f57610f0f6110d6565b604052919050565b600067ffffffffffffffff821115610f3157610f316110d6565b5060051b60200190565b600082610f5857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115610f98578160001904821115610f7e57610f7e6110aa565b80851615610f8b57918102915b93841c9390800290610f62565b509250929050565b6000610b9860ff841683600082610fb957506001611047565b81610fc657506000611047565b8160018114610fdc5760028114610fe657611002565b6001915050611047565b60ff841115610ff757610ff76110aa565b50506001821b611047565b5060208310610133831016604e8410600b8410161715611025575081810a611047565b61102f8383610f5d565b8060001904821115611043576110436110aa565b0290505b92915050565b6000816000190483118215151615611067576110676110aa565b500290565b600060ff821660ff841680821015611086576110866110aa565b90039392505050565b60006000198214156110a3576110a36110aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a1457600080fdfea26469706673582212206ce897b86e6c4a832f0edb10af4f0e039f19b507c61899e038f2f42a3146c34164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063926e31d611610066578063926e31d6146100f6578063c83e413514610117578063dbbb64b91461012a578063f2fde38b14610133578063f8c464521461014657600080fd5b8063158274a514610098578063294091cd146100c8578063715018a6146100dd5780638da5cb5b146100e5575b600080fd5b6001546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6100d6366004610b9f565b610159565b005b6100db6104e0565b6000546001600160a01b03166100ab565b610109610104366004610b9f565b61051f565b6040519081526020016100bf565b6100db610125366004610cd8565b610900565b61010960025481565b6100db610141366004610b7b565b61097c565b6100db610154366004610b7b565b610a17565b60015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529084169063095ea7b390604401602060405180830381600087803b1580156101a757600080fd5b505af11580156101bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101df9190610cb6565b50600154600254604051631f29a8cd60e31b81526004810191909152600091829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561022d57600080fd5b505afa158015610241573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102699190810190610be1565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a08201909252929350600092915060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b86518110156103fe578681815181106102fb576102fb6110c0565b6020026020010151848281518110610315576103156110c0565b60200260200101906001600160a01b031690816001600160a01b031681525050896001600160a01b0316878281518110610351576103516110c0565b60200260200101516001600160a01b031614156103ab578883828151811061037b5761037b6110c0565b6020026020010181815250508882828151811061039a5761039a6110c0565b6020026020010181815250506103ec565b60008382815181106103bf576103bf6110c0565b60200260200101818152505060008282815181106103df576103df6110c0565b6020026020010181815250505b806103f68161108f565b9150506102e0565b5060006001905060008082848360405160200161041d93929190610ebd565b604051602081830303815290604052905060006040518060800160405280888152602001878152602001838152602001600015158152509050600160009054906101000a90046001600160a01b03166001600160a01b031663b95cac28600254308e856040518563ffffffff1660e01b815260040161049f9493929190610e4c565b600060405180830381600087803b1580156104b957600080fd5b505af11580156104cd573d6000803e3d6000fd5b5050505050505050505050505050505050565b6000546001600160a01b031633146105135760405162461bcd60e51b815260040161050a90610e88565b60405180910390fd5b61051d6000610ab9565b565b600154600254604051631f29a8cd60e31b81526000928392839283926001600160a01b03169163f94d46689161055c919060040190815260200190565b60006040518083038186803b15801561057457600080fd5b505afa158015610588573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b09190810190610be1565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b855181101561078e5785818151811061061e5761061e6110c0565b6020026020010151838281518110610638576106386110c0565b60200260200101906001600160a01b031690816001600160a01b031681525050896001600160a01b0316868281518110610674576106746110c0565b60200260200101516001600160a01b0316141561075b5760008a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190610d0a565b61070990601261106c565b61071490600a610fa0565b9050600a610722828c610f3b565b61072d90600961104d565b6107379190610f3b565b838381518110610749576107496110c0565b6020026020010181815250505061077c565b600082828151811061076f5761076f6110c0565b6020026020010181815250505b806107868161108f565b915050610603565b50604080516000602082018190529181018a90526060810182905281908190608001604051602081830303815290604052905060006040518060800160405280878152602001868152602001838152602001600015158152509050600160009054906101000a90046001600160a01b03166001600160a01b0316638bdb3913600254308e856040518563ffffffff1660e01b81526004016108329493929190610e4c565b600060405180830381600087803b15801561084c57600080fd5b505af1158015610860573d6000803e3d6000fd5b505050508c6001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040161089f91906001600160a01b0391909116815260200190565b60206040518083038186803b1580156108b757600080fd5b505afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef9190610cf1565b9d9c50505050505050505050505050565b6000546001600160a01b0316331461092a5760405162461bcd60e51b815260040161050a90610e88565b806109775760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f77656400000000000000604482015260640161050a565b600255565b6000546001600160a01b031633146109a65760405162461bcd60e51b815260040161050a90610e88565b6001600160a01b038116610a0b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050a565b610a1481610ab9565b50565b6000546001600160a01b03163314610a415760405162461bcd60e51b815260040161050a90610e88565b6001600160a01b038116610a975760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161050a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082601f830112610b1a57600080fd5b81516020610b2f610b2a83610f17565b610ee6565b80838252828201915082860187848660051b8901011115610b4f57600080fd5b60005b85811015610b6e57815184529284019290840190600101610b52565b5090979650505050505050565b600060208284031215610b8d57600080fd5b8135610b98816110ec565b9392505050565b600080600060608486031215610bb457600080fd5b8335610bbf816110ec565b9250602084013591506040840135610bd6816110ec565b809150509250925092565b600080600060608486031215610bf657600080fd5b835167ffffffffffffffff80821115610c0e57600080fd5b818601915086601f830112610c2257600080fd5b81516020610c32610b2a83610f17565b8083825282820191508286018b848660051b8901011115610c5257600080fd5b600096505b84871015610c7e578051610c6a816110ec565b835260019690960195918301918301610c57565b5091890151919750909350505080821115610c9857600080fd5b50610ca586828701610b09565b925050604084015190509250925092565b600060208284031215610cc857600080fd5b81518015158114610b9857600080fd5b600060208284031215610cea57600080fd5b5035919050565b600060208284031215610d0357600080fd5b5051919050565b600060208284031215610d1c57600080fd5b815160ff81168114610b9857600080fd5b600081518084526020808501945080840160005b83811015610d5d57815187529582019590820190600101610d41565b509495945050505050565b6000815180845260005b81811015610d8e57602081850181015186830182015201610d72565b81811115610da0576000602083870101525b50601f01601f19169290920160200192915050565b8051608080845281519084018190526000916020919082019060a0860190845b81811015610dfa5783516001600160a01b031683529284019291840191600101610dd5565b505082850151915085810383870152610e138183610d2d565b9250505060408301518482036040860152610e2e8282610d68565b9150506060830151610e44606086018215159052565b509392505050565b8481526001600160a01b03848116602083015283166040820152608060608201819052600090610e7e90830184610db5565b9695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b838152606060208201526000610ed66060830185610d2d565b9050826040830152949350505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f0f57610f0f6110d6565b604052919050565b600067ffffffffffffffff821115610f3157610f316110d6565b5060051b60200190565b600082610f5857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115610f98578160001904821115610f7e57610f7e6110aa565b80851615610f8b57918102915b93841c9390800290610f62565b509250929050565b6000610b9860ff841683600082610fb957506001611047565b81610fc657506000611047565b8160018114610fdc5760028114610fe657611002565b6001915050611047565b60ff841115610ff757610ff76110aa565b50506001821b611047565b5060208310610133831016604e8410600b8410161715611025575081810a611047565b61102f8383610f5d565b8060001904821115611043576110436110aa565b0290505b92915050565b6000816000190483118215151615611067576110676110aa565b500290565b600060ff821660ff841680821015611086576110866110aa565b90039392505050565b60006000198214156110a3576110a36110aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a1457600080fdfea26469706673582212206ce897b86e6c4a832f0edb10af4f0e039f19b507c61899e038f2f42a3146c34164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4749,
        "contract": "contracts/connectors/ConnectorBalancer.sol:ConnectorBalancer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21205,
        "contract": "contracts/connectors/ConnectorBalancer.sol:ConnectorBalancer",
        "label": "balancerVault",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVault)24509"
      },
      {
        "astId": 21207,
        "contract": "contracts/connectors/ConnectorBalancer.sol:ConnectorBalancer",
        "label": "balancerPoolId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVault)24509": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      }
    }
  }
}
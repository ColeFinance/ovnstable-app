{
  "address": "0xfA8Bb3CED390eDB598000A118491d990304df550",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "PortfolioManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "balancerVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "uniswapRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "balancerPoolId1",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "balancerPoolId2",
          "type": "bytes32"
        }
      ],
      "name": "StrategyBalancerUpdatedParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bpspTUsdToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "balToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wmaticToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tusdToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bpspTUsdTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wmaticTokenDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tusdTokenDenominator",
          "type": "uint256"
        }
      ],
      "name": "StrategyBalancerUpdatedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALUE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolId1",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolId2",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bpspTUsdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bpspTUsdTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolioManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId2",
          "type": "bytes32"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setPortfolioManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bpspTUsdToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wmaticToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tusdToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tusdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tusdTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_targetIsZero",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticTokenDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "solcInputHash": "a27cd7b5673f19cd14cb47bda955a19c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"PortfolioManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"balancerVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"balancerPoolId1\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"balancerPoolId2\",\"type\":\"bytes32\"}],\"name\":\"StrategyBalancerUpdatedParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bpspTUsdToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"balToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wmaticToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tusdToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bpspTUsdTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wmaticTokenDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tusdTokenDenominator\",\"type\":\"uint256\"}],\"name\":\"StrategyBalancerUpdatedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALUE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId1\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpspTUsdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpspTUsdTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolioManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId2\",\"type\":\"bytes32\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPortfolioManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bpspTUsdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmaticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tusdToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tusdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tusdTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_targetIsZero\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticTokenDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/StrategyBalancer.sol\":\"StrategyBalancer\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfe5444167c3b8cb94bb80044f56148151466d62a86b950c4b57c1ab8bdced7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb1503d6ad7d4251970bfc4fa2d7e6fa2c7716010a0b3d642bdc078cdbef5ecc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb0fba7a209e01ef5a75bd082cd31b46b417f8572ca87a08475aa60afa01b4801\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc28ec209735cd77cebec87be0ec4586d4cba9002011adf4346e374e60c367756\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x611d1f2720036646366a613a7b6bb85d1527ed3b4fb5ba2db8cfc34f80a37be6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd74cdb9a9b704bfd99b4c677f49a170f1b16235f59b4ede98db93ff92f702a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"contracts/connectors/BalancerExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IAsset.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IGeneralPool.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\n\\nabstract contract BalancerExchange {\\n\\n    int256 public constant MAX_VALUE = 10 ** 27;\\n\\n    IVault private balancerVault;\\n\\n    function setBalancerVault(address _balancerVault) internal {\\n        balancerVault = IVault(_balancerVault);\\n    }\\n\\n    function swap(\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenOut,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\n\\n        IVault.SingleSwap memory singleSwap;\\n        singleSwap.poolId = poolId;\\n        singleSwap.kind = kind;\\n        singleSwap.assetIn = tokenIn;\\n        singleSwap.assetOut = tokenOut;\\n        singleSwap.amount = amount;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = payable(recipient);\\n        fundManagement.toInternalBalance = false;\\n\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\n    }\\n\\n    function batchSwap(\\n        bytes32 poolId1,\\n        bytes32 poolId2,\\n        IVault.SwapKind kind,\\n        IAsset tokenIn,\\n        IAsset tokenMid,\\n        IAsset tokenOut,\\n        address sender,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\n\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\n\\n        IVault.BatchSwapStep memory batchSwap1;\\n        batchSwap1.poolId = poolId1;\\n        batchSwap1.assetInIndex = 0;\\n        batchSwap1.assetOutIndex = 1;\\n        batchSwap1.amount = amount;\\n        swaps[0] = batchSwap1;\\n\\n        IVault.BatchSwapStep memory batchSwap2;\\n        batchSwap2.poolId = poolId2;\\n        batchSwap2.assetInIndex = 1;\\n        batchSwap2.assetOutIndex = 2;\\n        batchSwap2.amount = 0;\\n        swaps[1] = batchSwap2;\\n\\n        IAsset[] memory assets = new IAsset[](3);\\n        assets[0] = tokenIn;\\n        assets[1] = tokenMid;\\n        assets[2] = tokenOut;\\n\\n        IVault.FundManagement memory fundManagement;\\n        fundManagement.sender = sender;\\n        fundManagement.fromInternalBalance = false;\\n        fundManagement.recipient = recipient;\\n        fundManagement.toInternalBalance = false;\\n\\n        int256[] memory limits = new int256[](3);\\n        limits[0] = MAX_VALUE;\\n        limits[1] = MAX_VALUE;\\n        limits[2] = MAX_VALUE;\\n\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\n    }\\n\\n    function onSwap(\\n        bytes32 poolId,\\n        IVault.SwapKind kind,\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        uint256 balance\\n    ) internal view returns (uint256) {\\n\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\n        swapRequest.kind = kind;\\n        swapRequest.tokenIn = tokenIn;\\n        swapRequest.tokenOut = tokenOut;\\n        swapRequest.amount = balance;\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(poolId);\\n\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\n\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\n\\n            uint256 indexIn;\\n            uint256 indexOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    indexIn = i;\\n                } else if (tokens[i] == tokenOut) {\\n                    indexOut = i;\\n                }\\n            }\\n\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\n\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\n\\n            uint256 balanceIn;\\n            uint256 balanceOut;\\n            for (uint8 i = 0; i < tokens.length; i++) {\\n                if (tokens[i] == tokenIn) {\\n                    balanceIn = balances[i];\\n                } else if (tokens[i] == tokenOut) {\\n                    balanceOut = balances[i];\\n                }\\n            }\\n\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\n\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7b7b4f0625c9c6e44fbf7552946d1cbace8c75f70dab53cab386dcfa058c48a\",\"license\":\"MIT\"},\"contracts/connectors/QuickswapExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../connectors/uniswap/interfaces/IUniswapV2Router02.sol\\\";\\n\\nabstract contract QuickswapExchange {\\n\\n    IUniswapV2Router02 private uniswapRouter;\\n\\n    function setUniswapRouter(address _uniswapRouter) internal {\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n    }\\n\\n    function swapTokenToUsdc(\\n        address swapToken,\\n        address usdcToken,\\n        uint256 swapTokenDenominator,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n\\n        uint256 estimateUsdcOut = getUsdcSellPrice(swapToken, usdcToken, swapTokenDenominator, amount);\\n\\n        // skip exchange if estimate USDC less than 3 shares to prevent INSUFFICIENT_OUTPUT_AMOUNT error\\n        // TODO: may be enough 2 or insert check ratio IN/OUT to make decision\\n        if (estimateUsdcOut < 3) {\\n            IERC20(swapToken).transfer(sender, IERC20(swapToken).balanceOf(recipient));\\n            return 0;\\n        }\\n\\n        uint256 amountOutMin = 0;\\n        IERC20(swapToken).approve(address(uniswapRouter), amount);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = swapToken;\\n        path[1] = usdcToken;\\n\\n        return uniswapRouter.swapExactTokensForTokens(amount, amountOutMin, path, recipient, block.timestamp + 600)[1];\\n    }\\n\\n    function getUsdcBuyPrice(\\n        address swapToken,\\n        address usdcToken,\\n        uint256 swapTokenDenominator,\\n        uint256 usdcAmount\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = usdcToken;\\n        path[1] = swapToken;\\n\\n        uint[] memory amountsOut = uniswapRouter.getAmountsOut(usdcAmount, path);\\n\\n        // x + 6 - x = 6\\n        return swapTokenDenominator * amountsOut[0] / amountsOut[1];\\n    }\\n\\n    function getUsdcSellPrice(\\n        address swapToken,\\n        address usdcToken,\\n        uint256 swapTokenDenominator,\\n        uint256 tokenAmount\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = swapToken;\\n        path[1] = usdcToken;\\n\\n        uint[] memory amountsOut = uniswapRouter.getAmountsOut(tokenAmount, path);\\n\\n        // x + 6 - x = 6\\n        return swapTokenDenominator * amountsOut[1] / amountsOut[0];\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb469d1ef47519cfe474fcb6176faabb491e196a41b104885e1f287e82d9ca248\",\"license\":\"MIT\"},\"contracts/connectors/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5ea8a858a99674f94a7ee4a75ede7a29074228f754ec15043e8e9389c192d8b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4b2d22bff80c423dcd8b10442e1ee1782100321f6bd3c00649e38d8b1f40c91b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev IPools with the General specialization setting should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\n * grant to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IGeneralPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5a4963a182807f12235071151cb535109a8f3066ba1af6fef80c0c829ddd7722\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x0614fa16712fbf61015568ad06ede003075147da1dd773d78bbf52e1925b7b59\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xe1424191e0efbf544f52f2510ec3b1ae451f4af9345dae9b25a370a7c496c219\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        IERC20[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x00522f13583cc1876568fd1c57c8afbce4baf1fe89dcea4a9b60a8a988f4df25\",\"license\":\"GPL-3.0-or-later\"},\"contracts/connectors/uniswap/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\n/**\\n * IUniswapV2Router01.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\n */\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n\\n}\\n\",\"keccak256\":\"0x8635dc634259e971de8edde1ac635dd2338e5223370c9a6e22ed58527cdbab07\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\n/**\\n * IUniswapV2Router02.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\n */\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address factoryC, address tokenA, address tokenB) external view returns (address pair) ;\\n\\n}\\n\",\"keccak256\":\"0x5ca1e640d0522c5fdcb8814e1c7972435a71e589703741f7ffdaf2116fcb6cb3\",\"license\":\"GNU-3\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external;\\n\\n    function unstake(\\n        address _asset, // USDC\\n        uint256 _amount, // minimum expected value for unstaking in USDC\\n        address _beneficiary, // PortfolioManager\\n        bool targetIsZero // allow unstake full value\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function liquidationValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x5ab9e7a2e8db364aa1fea32b7c006210be000109947cdfa05439c1c3118a344f\",\"license\":\"GPL-3.0\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\n\\nabstract contract Strategy is IStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n\\n    address public portfolioManager;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Restricted to PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setPortfolioManager(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(PORTFOLIO_MANAGER, portfolioManager);\\n        grantRole(PORTFOLIO_MANAGER, _value);\\n\\n        portfolioManager = _value;\\n        emit PortfolioManagerUpdated(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n\\n    function stake(\\n        address _asset, // USDC\\n        uint256 _amount // value for staking in USDC\\n    ) external override onlyPortfolioManager {\\n        _stake(_asset, _amount);\\n    }\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool _targetIsZero\\n    ) external override onlyPortfolioManager returns (uint256) {\\n        uint256 withdrawAmount;\\n        if (_targetIsZero) {\\n            withdrawAmount = _unstakeFull(_asset, _beneficiary);\\n        } else {\\n            withdrawAmount = _unstake(_asset, _amount, _beneficiary);\\n            require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n        }\\n\\n        IERC20(_asset).transfer(_beneficiary, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyPortfolioManager returns (uint256) {\\n        uint256 totalUsdc = _claimRewards(_to);\\n        emit Reward(totalUsdc);\\n        return totalUsdc;\\n    }\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x229ca75b084ab3dee8b6284110dbca278a98596f539c5ccf2ecc2efba35e11fb\",\"license\":\"MIT\"},\"contracts/strategies/StrategyBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Strategy.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IVault.sol\\\";\\nimport \\\"../connectors/balancer/interfaces/IAsset.sol\\\";\\nimport \\\"../connectors/BalancerExchange.sol\\\";\\nimport \\\"../connectors/QuickswapExchange.sol\\\";\\n\\ncontract StrategyBalancer is Strategy, BalancerExchange, QuickswapExchange {\\n\\n    IERC20 public usdcToken;\\n    IERC20 public bpspTUsdToken;\\n    IERC20 public balToken;\\n    IERC20 public wmaticToken;\\n    IERC20 public tusdToken;\\n\\n    uint256 public usdcTokenDenominator;\\n    uint256 public bpspTUsdTokenDenominator;\\n    uint256 public balTokenDenominator;\\n    uint256 public wmaticTokenDenominator;\\n    uint256 public tusdTokenDenominator;\\n\\n    IVault public balancerVault;\\n\\n    bytes32 public balancerPoolId1;\\n    bytes32 public balancerPoolId2;\\n\\n\\n    // --- events\\n\\n    event StrategyBalancerUpdatedTokens(address usdcToken, address bpspTUsdToken, address balToken, address wmaticToken,\\n        address tusdToken, uint256 usdcTokenDenominator, uint256 bpspTUsdTokenDenominator,uint256 balTokenDenominator,\\n        uint256 wmaticTokenDenominator, uint256 tusdTokenDenominator);\\n\\n    event StrategyBalancerUpdatedParams(address balancerVault, address uniswapRouter, bytes32 balancerPoolId1, bytes32 balancerPoolId2);\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n\\n    // --- Setters\\n\\n    function setTokens(\\n        address _usdcToken,\\n        address _bpspTUsdToken,\\n        address _balToken,\\n        address _wmaticToken,\\n        address _tusdToken\\n    ) external onlyAdmin {\\n\\n        require(_usdcToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_bpspTUsdToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_balToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_wmaticToken != address(0), \\\"Zero address not allowed\\\");\\n        require(_tusdToken != address(0), \\\"Zero address not allowed\\\");\\n\\n        usdcToken = IERC20(_usdcToken);\\n        bpspTUsdToken = IERC20(_bpspTUsdToken);\\n        balToken = IERC20(_balToken);\\n        wmaticToken = IERC20(_wmaticToken);\\n        tusdToken = IERC20(_tusdToken);\\n\\n        usdcTokenDenominator = 10 ** IERC20Metadata(_usdcToken).decimals();\\n        bpspTUsdTokenDenominator = 10 ** IERC20Metadata(_bpspTUsdToken).decimals();\\n        balTokenDenominator = 10 ** IERC20Metadata(_balToken).decimals();\\n        wmaticTokenDenominator = 10 ** IERC20Metadata(_wmaticToken).decimals();\\n        tusdTokenDenominator = 10 ** IERC20Metadata(_tusdToken).decimals();\\n\\n        emit StrategyBalancerUpdatedTokens(_usdcToken, _bpspTUsdToken, _balToken, _wmaticToken, _tusdToken,\\n            usdcTokenDenominator, bpspTUsdTokenDenominator, balTokenDenominator, wmaticTokenDenominator, tusdTokenDenominator);\\n    }\\n\\n    function setParams(\\n        address _balancerVault,\\n        address _uniswapRouter,\\n        bytes32 _balancerPoolId1,\\n        bytes32 _balancerPoolId2\\n    ) external onlyAdmin {\\n\\n        require(_balancerVault != address(0), \\\"Zero address not allowed\\\");\\n        require(_uniswapRouter != address(0), \\\"Zero address not allowed\\\");\\n\\n        require(_balancerPoolId1 != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n        require(_balancerPoolId2 != \\\"\\\", \\\"Empty pool id not allowed\\\");\\n\\n        balancerVault = IVault(_balancerVault);\\n        setBalancerVault(_balancerVault);\\n        setUniswapRouter(_uniswapRouter);\\n\\n        balancerPoolId1 = _balancerPoolId1;\\n        balancerPoolId2 = _balancerPoolId2;\\n\\n        emit StrategyBalancerUpdatedParams(_balancerVault, _uniswapRouter, _balancerPoolId1, _balancerPoolId2);\\n    }\\n\\n\\n    // --- logic\\n\\n    function _stake(\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        usdcToken.approve(address(balancerVault), _amount);\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(balancerPoolId1);\\n\\n        IAsset[] memory assets = new IAsset[](4);\\n        uint256[] memory maxAmountsIn = new uint256[](4);\\n        uint256[] memory amountsIn = new uint256[](4);\\n        for (uint256 i; i < tokens.length; i++) {\\n            assets[i] = IAsset(address(tokens[i]));\\n            if (tokens[i] == usdcToken) {\\n                maxAmountsIn[i] = _amount;\\n                amountsIn[i] = _amount;\\n            } else {\\n                maxAmountsIn[i] = 0;\\n                amountsIn[i] = 0;\\n            }\\n        }\\n\\n        uint256 joinKind = 1;\\n        uint256 minimumBPT = 0;\\n        bytes memory userData = abi.encode(joinKind, amountsIn, minimumBPT);\\n\\n        IVault.JoinPoolRequest memory request = IVault.JoinPoolRequest(assets, maxAmountsIn, userData, false);\\n\\n        balancerVault.joinPool(balancerPoolId1, address(this), address(this), request);\\n    }\\n\\n    function _unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(balancerPoolId1);\\n\\n        IAsset[] memory assets = new IAsset[](4);\\n        uint256[] memory minAmountsOut = new uint256[](4);\\n        for (uint256 i; i < tokens.length; i++) {\\n            assets[i] = IAsset(address(tokens[i]));\\n            if (tokens[i] == usdcToken) {\\n                //TODO: Balancer. FIX if big slippage\\n                minAmountsOut[i] = _amount * 99 / 100;\\n            } else {\\n                minAmountsOut[i] = 0;\\n            }\\n        }\\n\\n        uint256 exitKind = 0;\\n        uint256 exitTokenIndex = 0;\\n        // 18 = 18 + 6 - 6\\n        uint256 amountBpspTUsd = bpspTUsdTokenDenominator * _amount / _getBpspTUsdSellPrice(bpspTUsdTokenDenominator);\\n        bytes memory userData = abi.encode(exitKind, amountBpspTUsd, exitTokenIndex);\\n\\n        IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest(assets, minAmountsOut, userData, false);\\n\\n        balancerVault.exitPool(balancerPoolId1, address(this), payable(address(this)), request);\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function _unstakeFull(\\n        address _asset,\\n        address _beneficiary\\n    ) internal override returns (uint256) {\\n\\n        require(_asset == address(usdcToken), \\\"Some token not compatible\\\");\\n\\n        uint256 _amount = bpspTUsdToken.balanceOf(address(this));\\n        // 18 = 18\\n        uint256 amountBpspTUsd = _getBpspTUsdSellPrice(_amount);\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(balancerPoolId1);\\n\\n        IAsset[] memory assets = new IAsset[](4);\\n        uint256[] memory minAmountsOut = new uint256[](4);\\n        for (uint256 i; i < tokens.length; i++) {\\n            assets[i] = IAsset(address(tokens[i]));\\n            if (tokens[i] == usdcToken) {\\n                //TODO: Balancer. FIX if big slippage\\n                minAmountsOut[i] = amountBpspTUsd * 99 / 100;\\n            } else {\\n                minAmountsOut[i] = 0;\\n            }\\n        }\\n\\n        uint256 exitKind = 0;\\n        uint256 exitTokenIndex = 0;\\n        bytes memory userData = abi.encode(exitKind, _amount, exitTokenIndex);\\n\\n        IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest(assets, minAmountsOut, userData, false);\\n\\n        balancerVault.exitPool(balancerPoolId1, address(this), payable(address(this)), request);\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    function netAssetValue() external override view returns (uint256) {\\n        uint256 balance = bpspTUsdToken.balanceOf(address(this));\\n        if (balance == 0) {\\n            return 0;\\n        }\\n        return _getBpspTUsdBuyPrice(balance);\\n    }\\n\\n    function liquidationValue() external override view returns (uint256) {\\n        uint256 balance = bpspTUsdToken.balanceOf(address(this));\\n        if (balance == 0) {\\n            return 0;\\n        }\\n        return _getBpspTUsdSellPrice(balance);\\n    }\\n\\n    function _getBpspTUsdBuyPrice(uint256 balanceBpspTUsd) internal view returns (uint256) {\\n        uint256 totalSupply = bpspTUsdToken.totalSupply();\\n\\n        uint256 totalBalanceUsdc;\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(balancerPoolId1);\\n        for (uint256 i; i < tokens.length; i++) {\\n            uint256 tokenBalance = balances[i] * balanceBpspTUsd / totalSupply;\\n            if (tokens[i] != usdcToken) {\\n                totalBalanceUsdc += onSwap(balancerPoolId1, IVault.SwapKind.GIVEN_OUT, usdcToken, tokens[i], tokenBalance);\\n            } else {\\n                totalBalanceUsdc += tokenBalance;\\n            }\\n        }\\n\\n        return totalBalanceUsdc;\\n    }\\n\\n    function _getBpspTUsdSellPrice(uint256 balanceBpspTUsd) internal view returns (uint256) {\\n        uint256 totalSupply = bpspTUsdToken.totalSupply();\\n\\n        uint256 totalBalanceUsdc;\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(balancerPoolId1);\\n        for (uint256 i; i < tokens.length; i++) {\\n            uint256 tokenBalance = balances[i] * balanceBpspTUsd / totalSupply;\\n            if (tokens[i] != usdcToken) {\\n                totalBalanceUsdc += onSwap(balancerPoolId1, IVault.SwapKind.GIVEN_IN, tokens[i], usdcToken, tokenBalance);\\n            } else {\\n                totalBalanceUsdc += tokenBalance;\\n            }\\n        }\\n\\n        return totalBalanceUsdc;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256) {\\n        //TODO: Balancer. Claiming\\n//        claimRewards();\\n\\n        uint256 totalUsdc;\\n\\n        uint256 balBalance = balToken.balanceOf(address(this));\\n        if (balBalance != 0) {\\n            uint256 balUsdc = swap(balancerPoolId2, IVault.SwapKind.GIVEN_IN, IAsset(address(balToken)),\\n                IAsset(address(usdcToken)), address(this), address(_to), balBalance);\\n            totalUsdc += balUsdc;\\n        }\\n\\n        uint256 wmaticBalance = wmaticToken.balanceOf(address(this));\\n        if (wmaticBalance != 0) {\\n            uint256 wmaticUsdc = swapTokenToUsdc(address(wmaticToken), address(usdcToken), wmaticTokenDenominator,\\n                address(this), address(_to), wmaticBalance);\\n            totalUsdc += wmaticUsdc;\\n        }\\n\\n        uint256 tusdBalance = tusdToken.balanceOf(address(this));\\n        if (tusdBalance != 0) {\\n            uint256 tusdUsdc = swap(balancerPoolId1, IVault.SwapKind.GIVEN_IN, IAsset(address(tusdToken)),\\n                IAsset(address(usdcToken)), address(this), address(_to), tusdBalance);\\n            totalUsdc += tusdUsdc;\\n        }\\n\\n        return totalUsdc;\\n    }\\n}\\n\",\"keccak256\":\"0x680a6b055f0da10715c6a507fa077dba2092c0f2f5ad94cfc779e0ed96815756\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff168062000033575060005460ff16155b6200009b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000be576000805461ffff19166101011790555b8015620000d1576000805461ff00191690555b5060805160601c6145726200010660003960008181610e0301528181610e4301528181610ecc0152610f0c01526145726000f3fe6080604052600436106102045760003560e01c806362b6765211610118578063a69dc7f8116100a0578063d547741f1161006f578063d547741f146105af578063ef5cfb8c146105cf578063f6f6b881146105ef578063f72c0d8b1461060f578063fddf5af81461064357600080fd5b8063a69dc7f814610536578063abf4be0114610557578063adc9772e14610578578063b7c2c1771461059857600080fd5b806391d14854116100e757806391d14854146104ab578063a217fddf146104cb578063a3673b38146104e0578063a440b21a146104f5578063a56b74891461051557600080fd5b806362b67652146104465780637d5f58021461045d5780638129fc1c1461047f5780638a5693cd1461049457600080fd5b80632576e65a1161019b5780633659cfe61161016a5780633659cfe6146103bb57806338d54645146103db5780634f1ef286146103fc5780635f7793441461040f578063620b75df1461042657600080fd5b80632576e65a1461034f5780632bb20a35146103645780632f2ff15d1461037b57806336568abe1461039b57600080fd5b806311eac855116101d757806311eac855146102a5578063158274a5146102de57806320ee1d40146102ff578063248a9ca31461031f57600080fd5b806301ffc9a714610209578063063bde241461023e57806306da3f2e1461026c5780630fc55bfd14610283575b600080fd5b34801561021557600080fd5b50610229610224366004613bcc565b61065a565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b5061025e6b033b2e3c9fd0803ce800000081565b604051908152602001610235565b34801561027857600080fd5b5061025e6101965481565b34801561028f57600080fd5b506102a361029e366004613843565b610691565b005b3480156102b157600080fd5b50610191546102c6906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b3480156102ea57600080fd5b5061019b546102c6906001600160a01b031681565b34801561030b57600080fd5b506102a361031a3660046138b4565b610afe565b34801561032b57600080fd5b5061025e61033a366004613b8e565b60009081526065602052604090206001015490565b34801561035b57600080fd5b5061025e610cb0565b34801561037057600080fd5b5061025e61019d5481565b34801561038757600080fd5b506102a3610396366004613ba7565b610d4f565b3480156103a757600080fd5b506102a36103b6366004613ba7565b610d7a565b3480156103c757600080fd5b506102a36103d6366004613826565b610df8565b3480156103e757600080fd5b50610193546102c6906001600160a01b031681565b6102a361040a3660046138fa565b610ec1565b34801561041b57600080fd5b5061025e6101985481565b34801561043257600080fd5b5060fb546102c6906001600160a01b031681565b34801561045257600080fd5b5061025e6101995481565b34801561046957600080fd5b5061025e6000805160206144f683398151915281565b34801561048b57600080fd5b506102a3610f77565b3480156104a057600080fd5b5061025e61019a5481565b3480156104b757600080fd5b506102296104c6366004613ba7565b610fea565b3480156104d757600080fd5b5061025e600081565b3480156104ec57600080fd5b5061025e611015565b34801561050157600080fd5b506102a3610510366004613826565b6110ae565b34801561052157600080fd5b50610192546102c6906001600160a01b031681565b34801561054257600080fd5b50610195546102c6906001600160a01b031681565b34801561056357600080fd5b50610194546102c6906001600160a01b031681565b34801561058457600080fd5b506102a36105933660046139e0565b61118c565b3480156105a457600080fd5b5061025e6101975481565b3480156105bb57600080fd5b506102a36105ca366004613ba7565b6111ca565b3480156105db57600080fd5b5061025e6105ea366004613826565b6111f0565b3480156105fb57600080fd5b5061025e61060a366004613a0c565b611272565b34801561061b57600080fd5b5061025e7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561064f57600080fd5b5061025e61019c5481565b60006001600160e01b03198216637965db0b60e01b148061068b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61069c600033610fea565b6106c15760405162461bcd60e51b81526004016106b890614029565b60405180910390fd5b6001600160a01b0385166106e75760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b03841661070d5760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b0383166107335760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b0382166107595760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b03811661077f5760405162461bcd60e51b81526004016106b89061408e565b61019180546001600160a01b038088166001600160a01b031992831681179093556101928054888316908416179055610193805487831690841617905561019480548683169084161790556101958054918516919092161790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561080f57600080fd5b505afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190613c0f565b61085290600a61432e565b61019681905550836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190613c0f565b6108d590600a61432e565b61019781905550826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561091557600080fd5b505afa158015610929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094d9190613c0f565b61095890600a61432e565b61019881905550816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561099857600080fd5b505afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190613c0f565b6109db90600a61432e565b61019981905550806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1b57600080fd5b505afa158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a539190613c0f565b610a5e90600a61432e565b61019a81905561019654610197546101985461019954604080516001600160a01b038c811682528b811660208301528a81168284015289811660608301528816608082015260a081019590955260c085019390935260e084019190915261010083015261012082019290925290517fc6bd2e093caafbb58566a0f8883461883dde4ef7923eff7d1e3793910ab22dda918190036101400190a15050505050565b610b09600033610fea565b610b255760405162461bcd60e51b81526004016106b890614029565b6001600160a01b038416610b4b5760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b038316610b715760405162461bcd60e51b81526004016106b89061408e565b81610bba5760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b60448201526064016106b8565b80610c035760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b60448201526064016106b8565b61019b80546001600160a01b0386166001600160a01b0319918216811790925561012d8054909116909117905561015f80546001600160a01b0319166001600160a01b03851617905561019c82905561019d819055604080516001600160a01b03808716825285166020820152908101839052606081018290527ff5f639b4e2a027f403b6a061091e5ed2fc94c48a708df1878cc8e38636c2bf3d9060800160405180910390a150505050565b610192546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190613bf6565b905080610d4057600091505090565b610d49816113bc565b91505090565b600082815260656020526040902060010154610d6b81336115cb565b610d75838361162f565b505050565b6001600160a01b0381163314610dea5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106b8565b610df482826116b5565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e415760405162461bcd60e51b81526004016106b890613f43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e7361171c565b6001600160a01b031614610e995760405162461bcd60e51b81526004016106b890613f8f565b610ea28161174a565b60408051600080825260208201909252610ebe91839190611775565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610f0a5760405162461bcd60e51b81526004016106b890613f43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f3c61171c565b6001600160a01b031614610f625760405162461bcd60e51b81526004016106b890613f8f565b610f6b8261174a565b610df482826001611775565b600054610100900460ff1680610f90575060005460ff16155b610fac5760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff16158015610fce576000805461ffff19166101011790555b610fd66118c0565b8015610ebe576000805461ff001916905550565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610192546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561105e57600080fd5b505afa158015611072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110969190613bf6565b9050806110a557600091505090565b610d498161195c565b6110b9600033610fea565b6110d55760405162461bcd60e51b81526004016106b890614029565b6001600160a01b0381166110fb5760405162461bcd60e51b81526004016106b89061408e565b60fb54611120906000805160206144f6833981519152906001600160a01b03166111ca565b6111386000805160206144f683398151915282610d4f565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb79060200160405180910390a150565b6111a46000805160206144f683398151915233610fea565b6111c05760405162461bcd60e51b81526004016106b890613f0c565b610df48282611b66565b6000828152606560205260409020600101546111e681336115cb565b610d7583836116b5565b600061120a6000805160206144f683398151915233610fea565b6112265760405162461bcd60e51b81526004016106b890613f0c565b600061123183611ef7565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161126491815260200190565b60405180910390a192915050565b600061128c6000805160206144f683398151915233610fea565b6112a85760405162461bcd60e51b81526004016106b890613f0c565b600082156112c1576112ba8685612146565b9050611330565b6112cc868686612519565b9050848110156113305760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016106b8565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905287169063a9059cbb90604401602060405180830381600087803b15801561137a57600080fd5b505af115801561138e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b29190613b71565b5095945050505050565b60008061019260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140e57600080fd5b505afa158015611422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114469190613bf6565b61019b5461019c54604051631f29a8cd60e31b815260048101919091529192506000918291829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561149a57600080fd5b505afa1580156114ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114d69190810190613a5f565b92509250925060005b83518110156115bf57600086898584815181106114fe576114fe6144a6565b602002602001015161151091906143d9565b61151a91906142c9565b6101915486519192506001600160a01b03169086908490811061153f5761153f6144a6565b60200260200101516001600160a01b03161461159f5761158e61019c546000878581518110611570576115706144a6565b6020908102919091010151610191546001600160a01b031685612884565b61159890876142b1565b95506115ac565b6115a981876142b1565b95505b50806115b78161443f565b9150506114df565b50929695505050505050565b6115d58282610fea565b610df4576115ed816001600160a01b03166014612ca1565b6115f8836020612ca1565b604051602001611609929190613e52565b60408051601f198184030181529082905262461bcd60e51b82526106b891600401613ef9565b6116398282610fea565b610df45760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116713390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116bf8282610fea565b15610df45760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610df481336115cb565b600061177f61171c565b905061178a84612e3d565b6000835111806117975750815b156117a8576117a68484612ee2565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166118b957805460ff191660011781556040516001600160a01b038316602482015261182790869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612ee2565b50805460ff1916815561183861171c565b6001600160a01b0316826001600160a01b0316146118b05760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016106b8565b6118b985612fc4565b5050505050565b600054610100900460ff16806118d9575060005460ff16155b6118f55760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff16158015611917576000805461ffff19166101011790555b61191f613004565b611927613073565b61193260003361162f565b610fd67f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361162f565b60008061019260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ae57600080fd5b505afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190613bf6565b61019b5461019c54604051631f29a8cd60e31b815260048101919091529192506000918291829182916001600160a01b03169063f94d46689060240160006040518083038186803b158015611a3a57600080fd5b505afa158015611a4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a769190810190613a5f565b92509250925060005b83518110156115bf5760008689858481518110611a9e57611a9e6144a6565b6020026020010151611ab091906143d9565b611aba91906142c9565b6101915486519192506001600160a01b031690869084908110611adf57611adf6144a6565b60200260200101516001600160a01b031614611b4657611b3561019c54600161019160009054906101000a90046001600160a01b0316888681518110611b2757611b276144a6565b602002602001015185612884565b611b3f90876142b1565b9550611b53565b611b5081876142b1565b95505b5080611b5e8161443f565b915050611a7f565b610191546001600160a01b03838116911614611b945760405162461bcd60e51b81526004016106b890614057565b6101915461019b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015611be657600080fd5b505af1158015611bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1e9190613b71565b5061019b5461019c54604051631f29a8cd60e31b81526004810191909152600091829182916001600160a01b03169063f94d46689060240160006040518083038186803b158015611c6e57600080fd5b505afa158015611c82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611caa9190810190613a5f565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a08201909252929350600092915060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b8651811015611e3457868181518110611d3c57611d3c6144a6565b6020026020010151848281518110611d5657611d566144a6565b6001600160a01b039283166020918202929092010152610191548851911690889083908110611d8757611d876144a6565b60200260200101516001600160a01b03161415611de15787838281518110611db157611db16144a6565b60200260200101818152505087828281518110611dd057611dd06144a6565b602002602001018181525050611e22565b6000838281518110611df557611df56144a6565b6020026020010181815250506000828281518110611e1557611e156144a6565b6020026020010181815250505b80611e2c8161443f565b915050611d21565b50600060019050600080828483604051602001611e53939291906141f7565b60408051601f19818403018152608083018252888352602083018890528282018190526000606084015261019b5461019c54925163172b958560e31b81529194506001600160a01b03169163b95cac2891611eb79190309081908790600401613ec7565b600060405180830381600087803b158015611ed157600080fd5b505af1158015611ee5573d6000803e3d6000fd5b50505050505050505050505050505050565b610193546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b158015611f4057600080fd5b505afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190613bf6565b90508015611fbc5761019d546101935461019154600092611fac92909184916001600160a01b039081169116308a886130d1565b9050611fb881846142b1565b9250505b610194546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561200157600080fd5b505afa158015612015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120399190613bf6565b9050801561207b5761019454610191546101995460009261206b926001600160a01b0391821692911690308a876132ca565b905061207781856142b1565b9350505b610195546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156120c057600080fd5b505afa1580156120d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f89190613bf6565b9050801561213c5761019c54610195546101915460009261212c92909184916001600160a01b039081169116308c886130d1565b905061213881866142b1565b9450505b5091949350505050565b610191546000906001600160a01b038481169116146121775760405162461bcd60e51b81526004016106b890614057565b610192546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156121bc57600080fd5b505afa1580156121d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f49190613bf6565b90506000612201826113bc565b61019b5461019c54604051631f29a8cd60e31b8152929350600092839283926001600160a01b039091169163f94d4668916122429160040190815260200190565b60006040518083038186803b15801561225a57600080fd5b505afa15801561226e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122969190810190613a5f565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b85518110156123d357858181518110612304576123046144a6565b602002602001015183828151811061231e5761231e6144a6565b6001600160a01b03928316602091820292909201015261019154875191169087908390811061234f5761234f6144a6565b60200260200101516001600160a01b031614156123a05760646123738860636143d9565b61237d91906142c9565b82828151811061238f5761238f6144a6565b6020026020010181815250506123c1565b60008282815181106123b4576123b46144a6565b6020026020010181815250505b806123cb8161443f565b9150506122e9565b5060408051600060208201819052918101899052606081018290528190819060800160408051601f19818403018152608083018252878352602083018790528282018190526000606084015261019b5461019c549251638bdb391360e01b81529194506001600160a01b031691638bdb3913916124599190309081908790600401613ec7565b600060405180830381600087803b15801561247357600080fd5b505af1158015612487573d6000803e3d6000fd5b5050610191546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b1580156124cf57600080fd5b505afa1580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125079190613bf6565b9e9d5050505050505050505050505050565b610191546000906001600160a01b0385811691161461254a5760405162461bcd60e51b81526004016106b890614057565b61019b5461019c54604051631f29a8cd60e31b81526004810191909152600091829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561259957600080fd5b505afa1580156125ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125d59190810190613a5f565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b855181101561271257858181518110612643576126436144a6565b602002602001015183828151811061265d5761265d6144a6565b6001600160a01b03928316602091820292909201015261019154875191169087908390811061268e5761268e6144a6565b60200260200101516001600160a01b031614156126df5760646126b28a60636143d9565b6126bc91906142c9565b8282815181106126ce576126ce6144a6565b602002602001018181525050612700565b60008282815181106126f3576126f36144a6565b6020026020010181815250505b8061270a8161443f565b915050612628565b506000806000612724610197546113bc565b8b6101975461273391906143d9565b61273d91906142c9565b60408051602081018690529081018290526060810184905290915060009060800160408051601f19818403018152608083018252888352602083018890528282018190526000606084015261019b5461019c549251638bdb391360e01b81529194506001600160a01b031691638bdb3913916127c29190309081908790600401613ec7565b600060405180830381600087803b1580156127dc57600080fd5b505af11580156127f0573d6000803e3d6000fd5b5050610191546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b15801561283857600080fd5b505afa15801561284c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128709190613bf6565b9a50505050505050505050505b9392505050565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820152808660018111156128de576128de614490565b908160018111156128f1576128f1614490565b9052506001600160a01b0385811660208301528481166040808401919091526060830185905261012d549051631f29a8cd60e31b8152600481018a90526000928392839291169063f94d46689060240160006040518083038186803b15801561295957600080fd5b505afa15801561296d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129959190810190613a5f565b61012d5460405163f6c0092760e01b8152600481018f9052939650919450925060009182916001600160a01b03169063f6c0092790602401604080518083038186803b1580156129e457600080fd5b505afa1580156129f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1c91906139a2565b90925090506000816002811115612a3557612a35614490565b1415612b6e5760008060005b87518160ff161015612add578c6001600160a01b0316888260ff1681518110612a6c57612a6c6144a6565b60200260200101516001600160a01b03161415612a8e578060ff169250612acb565b8b6001600160a01b0316888260ff1681518110612aad57612aad6144a6565b60200260200101516001600160a01b03161415612acb578060ff1691505b80612ad58161445a565b915050612a41565b5060405162f64aa560e11b81526001600160a01b038516906301ec954a90612b0f908b908a9087908790600401614180565b60206040518083038186803b158015612b2757600080fd5b505afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f9190613bf6565b98505050505050505050612c98565b6001816002811115612b8257612b82614490565b1415612c8d5760008060005b87518160ff161015612c5c578c6001600160a01b0316888260ff1681518110612bb957612bb96144a6565b60200260200101516001600160a01b03161415612bf457868160ff1681518110612be557612be56144a6565b60200260200101519250612c4a565b8b6001600160a01b0316888260ff1681518110612c1357612c136144a6565b60200260200101516001600160a01b03161415612c4a57868160ff1681518110612c3f57612c3f6144a6565b602002602001015191505b80612c548161445a565b915050612b8e565b5060405163274b044360e21b81526001600160a01b03851690639d2c110c90612b0f908b90869086906004016141b9565b600096505050505050505b95945050505050565b60606000612cb08360026143d9565b612cbb9060026142b1565b67ffffffffffffffff811115612cd357612cd36144bc565b6040519080825280601f01601f191660200182016040528015612cfd576020820181803683370190505b509050600360fc1b81600081518110612d1857612d186144a6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d4757612d476144a6565b60200101906001600160f81b031916908160001a9053506000612d6b8460026143d9565b612d769060016142b1565b90505b6001811115612dee576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612daa57612daa6144a6565b1a60f81b828281518110612dc057612dc06144a6565b60200101906001600160f81b031916908160001a90535060049490941c93612de781614428565b9050612d79565b50831561287d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b8565b803b612ea15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106b8565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b612f415760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106b8565b600080846001600160a01b031684604051612f5c9190613e36565b600060405180830381855af49150503d8060008114612f97576040519150601f19603f3d011682016040523d82523d6000602084013e612f9c565b606091505b5091509150612c988282604051806060016040528060278152602001614516602791396135b3565b612fcd81612e3d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff168061301d575060005460ff16155b6130395760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff1615801561305b576000805461ffff19166101011790555b6130636135ec565b61306b6135ec565b610fd66135ec565b600054610100900460ff168061308c575060005460ff16155b6130a85760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff16158015613063576000805461ffff191661010117905561306b6135ec565b61012d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905260009187169063095ea7b390604401602060405180830381600087803b15801561312257600080fd5b505af1158015613136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315a9190613b71565b506131a76040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b888152602081018860018111156131c0576131c0614490565b908160018111156131d3576131d3614490565b9052506001600160a01b038781166040838101919091528782166060808501919091526080808501879052825190810183526000602082018190529181019190915287831681528683169181019190915261012d549091166352bbbe2983836b033b2e3c9fd0803ce800000061324b426102586142b1565b6040518563ffffffff1660e01b815260040161326a94939291906140c5565b602060405180830381600087803b15801561328457600080fd5b505af1158015613298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132bc9190613bf6565b9a9950505050505050505050565b6000806132d988888886613656565b905060038110156133f0576040516370a0823160e01b81526001600160a01b03858116600483015289169063a9059cbb90879083906370a082319060240160206040518083038186803b15801561332f57600080fd5b505afa158015613343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133679190613bf6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156133ad57600080fd5b505af11580156133c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e59190613b71565b5060009150506135a9565b61015f5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590526000918a169063095ea7b390604401602060405180830381600087803b15801561344157600080fd5b505af1158015613455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134799190613b71565b5060408051600280825260608201835260009260208301908036833701905050905089816000815181106134af576134af6144a6565b60200260200101906001600160a01b031690816001600160a01b03168152505088816001815181106134e3576134e36144a6565b6001600160a01b03928316602091820292909201015261015f54166338ed17398684848a613513426102586142b1565b6040518663ffffffff1660e01b8152600401613533959493929190614220565b600060405180830381600087803b15801561354d57600080fd5b505af1158015613561573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135899190810190613b34565b60018151811061359b5761359b6144a6565b602002602001015193505050505b9695505050505050565b606083156135c257508161287d565b8251156135d25782518084602001fd5b8160405162461bcd60e51b81526004016106b89190613ef9565b600054610100900460ff1680613605575060005460ff16155b6136215760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff16158015610fd6576000805461ffff19166101011790558015610ebe576000805461ff001916905550565b60408051600280825260608201835260009283929190602083019080368337019050509050858160008151811061368f5761368f6144a6565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106136c3576136c36144a6565b6001600160a01b03928316602091820292909201015261015f5460405163d06ca61f60e01b8152600092919091169063d06ca61f9061370890879086906004016141de565b60006040518083038186803b15801561372057600080fd5b505afa158015613734573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261375c9190810190613b34565b905080600081518110613771576137716144a6565b60200260200101518160018151811061378c5761378c6144a6565b60200260200101518661379f91906143d9565b6137a991906142c9565b979650505050505050565b600082601f8301126137c557600080fd5b815160206137da6137d58361428d565b61425c565b80838252828201915082860187848660051b89010111156137fa57600080fd5b60005b85811015613819578151845292840192908401906001016137fd565b5090979650505050505050565b60006020828403121561383857600080fd5b813561287d816144d2565b600080600080600060a0868803121561385b57600080fd5b8535613866816144d2565b94506020860135613876816144d2565b93506040860135613886816144d2565b92506060860135613896816144d2565b915060808601356138a6816144d2565b809150509295509295909350565b600080600080608085870312156138ca57600080fd5b84356138d5816144d2565b935060208501356138e5816144d2565b93969395505050506040820135916060013590565b6000806040838503121561390d57600080fd5b8235613918816144d2565b915060208381013567ffffffffffffffff8082111561393657600080fd5b818601915086601f83011261394a57600080fd5b81358181111561395c5761395c6144bc565b61396e601f8201601f1916850161425c565b9150808252878482850101111561398457600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156139b557600080fd5b82516139c0816144d2565b6020840151909250600381106139d557600080fd5b809150509250929050565b600080604083850312156139f357600080fd5b82356139fe816144d2565b946020939093013593505050565b60008060008060808587031215613a2257600080fd5b8435613a2d816144d2565b9350602085013592506040850135613a44816144d2565b91506060850135613a54816144e7565b939692955090935050565b600080600060608486031215613a7457600080fd5b835167ffffffffffffffff80821115613a8c57600080fd5b818601915086601f830112613aa057600080fd5b81516020613ab06137d58361428d565b8083825282820191508286018b848660051b8901011115613ad057600080fd5b600096505b84871015613afc578051613ae8816144d2565b835260019690960195918301918301613ad5565b5091890151919750909350505080821115613b1657600080fd5b50613b23868287016137b4565b925050604084015190509250925092565b600060208284031215613b4657600080fd5b815167ffffffffffffffff811115613b5d57600080fd5b613b69848285016137b4565b949350505050565b600060208284031215613b8357600080fd5b815161287d816144e7565b600060208284031215613ba057600080fd5b5035919050565b60008060408385031215613bba57600080fd5b8235915060208301356139d5816144d2565b600060208284031215613bde57600080fd5b81356001600160e01b03198116811461287d57600080fd5b600060208284031215613c0857600080fd5b5051919050565b600060208284031215613c2157600080fd5b815160ff8116811461287d57600080fd5b600081518084526020808501945080840160005b83811015613c6b5781516001600160a01b031687529582019590820190600101613c46565b509495945050505050565b600081518084526020808501945080840160005b83811015613c6b57815187529582019590820190600101613c8a565b60008151808452613cbe8160208601602086016143f8565b601f01601f19169290920160200192915050565b60028110613cf057634e487b7160e01b600052602160045260246000fd5b9052565b8051608080845281519084018190526000916020919082019060a0860190845b81811015613d395783516001600160a01b031683529284019291840191600101613d14565b505082850151915085810383870152613d528183613c76565b9250505060408301518482036040860152613d6d8282613ca6565b9150506060830151613d83606086018215159052565b509392505050565b6000610120613d9b848451613cd2565b6020838101516001600160a01b03169085015260408084015190613dc9908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151613e0260c08601826001600160a01b03169052565b5060e0830151613e1d60e08601826001600160a01b03169052565b506101008084015182828701526135a983870182613ca6565b60008251613e488184602087016143f8565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e8a8160178501602088016143f8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613ebb8160288401602088016143f8565b01602801949350505050565b8481526001600160a01b038481166020830152831660408201526080606082018190526000906135a990830184613cf4565b60208152600061287d6020830184613ca6565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60e08152845160e0820152600060208601516140e5610100840182613cd2565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c061018084015261412e6101a0840182613ca6565b91505061416e602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b6080815260006141936080830187613d8b565b82810360208401526141a58187613c76565b604084019590955250506060015292915050565b6060815260006141cc6060830186613d8b565b60208301949094525060400152919050565b828152604060208201526000613b696040830184613c32565b8381526060602082015260006142106060830185613c76565b9050826040830152949350505050565b85815284602082015260a06040820152600061423f60a0830186613c32565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614285576142856144bc565b604052919050565b600067ffffffffffffffff8211156142a7576142a76144bc565b5060051b60200190565b600082198211156142c4576142c461447a565b500190565b6000826142e657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561432657816000190482111561430c5761430c61447a565b8085161561431957918102915b93841c93908002906142f0565b509250929050565b600061287d60ff8416836000826143475750600161068b565b816143545750600061068b565b816001811461436a576002811461437457614390565b600191505061068b565b60ff8411156143855761438561447a565b50506001821b61068b565b5060208310610133831016604e8410600b84101617156143b3575081810a61068b565b6143bd83836142eb565b80600019048211156143d1576143d161447a565b029392505050565b60008160001904831182151516156143f3576143f361447a565b500290565b60005b838110156144135781810151838201526020016143fb565b83811115614422576000848401525b50505050565b6000816144375761443761447a565b506000190190565b60006000198214156144535761445361447a565b5060010190565b600060ff821660ff8114156144715761447161447a565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ebe57600080fd5b8015158114610ebe57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207500d3ed72fb08e4fb2915061e34d18aae4d0a5f66af961925a1cfa0c570787664736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c806362b6765211610118578063a69dc7f8116100a0578063d547741f1161006f578063d547741f146105af578063ef5cfb8c146105cf578063f6f6b881146105ef578063f72c0d8b1461060f578063fddf5af81461064357600080fd5b8063a69dc7f814610536578063abf4be0114610557578063adc9772e14610578578063b7c2c1771461059857600080fd5b806391d14854116100e757806391d14854146104ab578063a217fddf146104cb578063a3673b38146104e0578063a440b21a146104f5578063a56b74891461051557600080fd5b806362b67652146104465780637d5f58021461045d5780638129fc1c1461047f5780638a5693cd1461049457600080fd5b80632576e65a1161019b5780633659cfe61161016a5780633659cfe6146103bb57806338d54645146103db5780634f1ef286146103fc5780635f7793441461040f578063620b75df1461042657600080fd5b80632576e65a1461034f5780632bb20a35146103645780632f2ff15d1461037b57806336568abe1461039b57600080fd5b806311eac855116101d757806311eac855146102a5578063158274a5146102de57806320ee1d40146102ff578063248a9ca31461031f57600080fd5b806301ffc9a714610209578063063bde241461023e57806306da3f2e1461026c5780630fc55bfd14610283575b600080fd5b34801561021557600080fd5b50610229610224366004613bcc565b61065a565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b5061025e6b033b2e3c9fd0803ce800000081565b604051908152602001610235565b34801561027857600080fd5b5061025e6101965481565b34801561028f57600080fd5b506102a361029e366004613843565b610691565b005b3480156102b157600080fd5b50610191546102c6906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b3480156102ea57600080fd5b5061019b546102c6906001600160a01b031681565b34801561030b57600080fd5b506102a361031a3660046138b4565b610afe565b34801561032b57600080fd5b5061025e61033a366004613b8e565b60009081526065602052604090206001015490565b34801561035b57600080fd5b5061025e610cb0565b34801561037057600080fd5b5061025e61019d5481565b34801561038757600080fd5b506102a3610396366004613ba7565b610d4f565b3480156103a757600080fd5b506102a36103b6366004613ba7565b610d7a565b3480156103c757600080fd5b506102a36103d6366004613826565b610df8565b3480156103e757600080fd5b50610193546102c6906001600160a01b031681565b6102a361040a3660046138fa565b610ec1565b34801561041b57600080fd5b5061025e6101985481565b34801561043257600080fd5b5060fb546102c6906001600160a01b031681565b34801561045257600080fd5b5061025e6101995481565b34801561046957600080fd5b5061025e6000805160206144f683398151915281565b34801561048b57600080fd5b506102a3610f77565b3480156104a057600080fd5b5061025e61019a5481565b3480156104b757600080fd5b506102296104c6366004613ba7565b610fea565b3480156104d757600080fd5b5061025e600081565b3480156104ec57600080fd5b5061025e611015565b34801561050157600080fd5b506102a3610510366004613826565b6110ae565b34801561052157600080fd5b50610192546102c6906001600160a01b031681565b34801561054257600080fd5b50610195546102c6906001600160a01b031681565b34801561056357600080fd5b50610194546102c6906001600160a01b031681565b34801561058457600080fd5b506102a36105933660046139e0565b61118c565b3480156105a457600080fd5b5061025e6101975481565b3480156105bb57600080fd5b506102a36105ca366004613ba7565b6111ca565b3480156105db57600080fd5b5061025e6105ea366004613826565b6111f0565b3480156105fb57600080fd5b5061025e61060a366004613a0c565b611272565b34801561061b57600080fd5b5061025e7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561064f57600080fd5b5061025e61019c5481565b60006001600160e01b03198216637965db0b60e01b148061068b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61069c600033610fea565b6106c15760405162461bcd60e51b81526004016106b890614029565b60405180910390fd5b6001600160a01b0385166106e75760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b03841661070d5760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b0383166107335760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b0382166107595760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b03811661077f5760405162461bcd60e51b81526004016106b89061408e565b61019180546001600160a01b038088166001600160a01b031992831681179093556101928054888316908416179055610193805487831690841617905561019480548683169084161790556101958054918516919092161790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561080f57600080fd5b505afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190613c0f565b61085290600a61432e565b61019681905550836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190613c0f565b6108d590600a61432e565b61019781905550826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561091557600080fd5b505afa158015610929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094d9190613c0f565b61095890600a61432e565b61019881905550816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561099857600080fd5b505afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190613c0f565b6109db90600a61432e565b61019981905550806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1b57600080fd5b505afa158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a539190613c0f565b610a5e90600a61432e565b61019a81905561019654610197546101985461019954604080516001600160a01b038c811682528b811660208301528a81168284015289811660608301528816608082015260a081019590955260c085019390935260e084019190915261010083015261012082019290925290517fc6bd2e093caafbb58566a0f8883461883dde4ef7923eff7d1e3793910ab22dda918190036101400190a15050505050565b610b09600033610fea565b610b255760405162461bcd60e51b81526004016106b890614029565b6001600160a01b038416610b4b5760405162461bcd60e51b81526004016106b89061408e565b6001600160a01b038316610b715760405162461bcd60e51b81526004016106b89061408e565b81610bba5760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b60448201526064016106b8565b80610c035760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b60448201526064016106b8565b61019b80546001600160a01b0386166001600160a01b0319918216811790925561012d8054909116909117905561015f80546001600160a01b0319166001600160a01b03851617905561019c82905561019d819055604080516001600160a01b03808716825285166020820152908101839052606081018290527ff5f639b4e2a027f403b6a061091e5ed2fc94c48a708df1878cc8e38636c2bf3d9060800160405180910390a150505050565b610192546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190613bf6565b905080610d4057600091505090565b610d49816113bc565b91505090565b600082815260656020526040902060010154610d6b81336115cb565b610d75838361162f565b505050565b6001600160a01b0381163314610dea5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106b8565b610df482826116b5565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e415760405162461bcd60e51b81526004016106b890613f43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e7361171c565b6001600160a01b031614610e995760405162461bcd60e51b81526004016106b890613f8f565b610ea28161174a565b60408051600080825260208201909252610ebe91839190611775565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610f0a5760405162461bcd60e51b81526004016106b890613f43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f3c61171c565b6001600160a01b031614610f625760405162461bcd60e51b81526004016106b890613f8f565b610f6b8261174a565b610df482826001611775565b600054610100900460ff1680610f90575060005460ff16155b610fac5760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff16158015610fce576000805461ffff19166101011790555b610fd66118c0565b8015610ebe576000805461ff001916905550565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610192546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561105e57600080fd5b505afa158015611072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110969190613bf6565b9050806110a557600091505090565b610d498161195c565b6110b9600033610fea565b6110d55760405162461bcd60e51b81526004016106b890614029565b6001600160a01b0381166110fb5760405162461bcd60e51b81526004016106b89061408e565b60fb54611120906000805160206144f6833981519152906001600160a01b03166111ca565b6111386000805160206144f683398151915282610d4f565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb79060200160405180910390a150565b6111a46000805160206144f683398151915233610fea565b6111c05760405162461bcd60e51b81526004016106b890613f0c565b610df48282611b66565b6000828152606560205260409020600101546111e681336115cb565b610d7583836116b5565b600061120a6000805160206144f683398151915233610fea565b6112265760405162461bcd60e51b81526004016106b890613f0c565b600061123183611ef7565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161126491815260200190565b60405180910390a192915050565b600061128c6000805160206144f683398151915233610fea565b6112a85760405162461bcd60e51b81526004016106b890613f0c565b600082156112c1576112ba8685612146565b9050611330565b6112cc868686612519565b9050848110156113305760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b60648201526084016106b8565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905287169063a9059cbb90604401602060405180830381600087803b15801561137a57600080fd5b505af115801561138e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b29190613b71565b5095945050505050565b60008061019260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140e57600080fd5b505afa158015611422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114469190613bf6565b61019b5461019c54604051631f29a8cd60e31b815260048101919091529192506000918291829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561149a57600080fd5b505afa1580156114ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114d69190810190613a5f565b92509250925060005b83518110156115bf57600086898584815181106114fe576114fe6144a6565b602002602001015161151091906143d9565b61151a91906142c9565b6101915486519192506001600160a01b03169086908490811061153f5761153f6144a6565b60200260200101516001600160a01b03161461159f5761158e61019c546000878581518110611570576115706144a6565b6020908102919091010151610191546001600160a01b031685612884565b61159890876142b1565b95506115ac565b6115a981876142b1565b95505b50806115b78161443f565b9150506114df565b50929695505050505050565b6115d58282610fea565b610df4576115ed816001600160a01b03166014612ca1565b6115f8836020612ca1565b604051602001611609929190613e52565b60408051601f198184030181529082905262461bcd60e51b82526106b891600401613ef9565b6116398282610fea565b610df45760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116713390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116bf8282610fea565b15610df45760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610df481336115cb565b600061177f61171c565b905061178a84612e3d565b6000835111806117975750815b156117a8576117a68484612ee2565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166118b957805460ff191660011781556040516001600160a01b038316602482015261182790869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612ee2565b50805460ff1916815561183861171c565b6001600160a01b0316826001600160a01b0316146118b05760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016106b8565b6118b985612fc4565b5050505050565b600054610100900460ff16806118d9575060005460ff16155b6118f55760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff16158015611917576000805461ffff19166101011790555b61191f613004565b611927613073565b61193260003361162f565b610fd67f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361162f565b60008061019260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ae57600080fd5b505afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190613bf6565b61019b5461019c54604051631f29a8cd60e31b815260048101919091529192506000918291829182916001600160a01b03169063f94d46689060240160006040518083038186803b158015611a3a57600080fd5b505afa158015611a4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a769190810190613a5f565b92509250925060005b83518110156115bf5760008689858481518110611a9e57611a9e6144a6565b6020026020010151611ab091906143d9565b611aba91906142c9565b6101915486519192506001600160a01b031690869084908110611adf57611adf6144a6565b60200260200101516001600160a01b031614611b4657611b3561019c54600161019160009054906101000a90046001600160a01b0316888681518110611b2757611b276144a6565b602002602001015185612884565b611b3f90876142b1565b9550611b53565b611b5081876142b1565b95505b5080611b5e8161443f565b915050611a7f565b610191546001600160a01b03838116911614611b945760405162461bcd60e51b81526004016106b890614057565b6101915461019b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015611be657600080fd5b505af1158015611bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1e9190613b71565b5061019b5461019c54604051631f29a8cd60e31b81526004810191909152600091829182916001600160a01b03169063f94d46689060240160006040518083038186803b158015611c6e57600080fd5b505afa158015611c82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611caa9190810190613a5f565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a08201909252929350600092915060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b8651811015611e3457868181518110611d3c57611d3c6144a6565b6020026020010151848281518110611d5657611d566144a6565b6001600160a01b039283166020918202929092010152610191548851911690889083908110611d8757611d876144a6565b60200260200101516001600160a01b03161415611de15787838281518110611db157611db16144a6565b60200260200101818152505087828281518110611dd057611dd06144a6565b602002602001018181525050611e22565b6000838281518110611df557611df56144a6565b6020026020010181815250506000828281518110611e1557611e156144a6565b6020026020010181815250505b80611e2c8161443f565b915050611d21565b50600060019050600080828483604051602001611e53939291906141f7565b60408051601f19818403018152608083018252888352602083018890528282018190526000606084015261019b5461019c54925163172b958560e31b81529194506001600160a01b03169163b95cac2891611eb79190309081908790600401613ec7565b600060405180830381600087803b158015611ed157600080fd5b505af1158015611ee5573d6000803e3d6000fd5b50505050505050505050505050505050565b610193546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b158015611f4057600080fd5b505afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190613bf6565b90508015611fbc5761019d546101935461019154600092611fac92909184916001600160a01b039081169116308a886130d1565b9050611fb881846142b1565b9250505b610194546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561200157600080fd5b505afa158015612015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120399190613bf6565b9050801561207b5761019454610191546101995460009261206b926001600160a01b0391821692911690308a876132ca565b905061207781856142b1565b9350505b610195546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156120c057600080fd5b505afa1580156120d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f89190613bf6565b9050801561213c5761019c54610195546101915460009261212c92909184916001600160a01b039081169116308c886130d1565b905061213881866142b1565b9450505b5091949350505050565b610191546000906001600160a01b038481169116146121775760405162461bcd60e51b81526004016106b890614057565b610192546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156121bc57600080fd5b505afa1580156121d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f49190613bf6565b90506000612201826113bc565b61019b5461019c54604051631f29a8cd60e31b8152929350600092839283926001600160a01b039091169163f94d4668916122429160040190815260200190565b60006040518083038186803b15801561225a57600080fd5b505afa15801561226e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122969190810190613a5f565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b85518110156123d357858181518110612304576123046144a6565b602002602001015183828151811061231e5761231e6144a6565b6001600160a01b03928316602091820292909201015261019154875191169087908390811061234f5761234f6144a6565b60200260200101516001600160a01b031614156123a05760646123738860636143d9565b61237d91906142c9565b82828151811061238f5761238f6144a6565b6020026020010181815250506123c1565b60008282815181106123b4576123b46144a6565b6020026020010181815250505b806123cb8161443f565b9150506122e9565b5060408051600060208201819052918101899052606081018290528190819060800160408051601f19818403018152608083018252878352602083018790528282018190526000606084015261019b5461019c549251638bdb391360e01b81529194506001600160a01b031691638bdb3913916124599190309081908790600401613ec7565b600060405180830381600087803b15801561247357600080fd5b505af1158015612487573d6000803e3d6000fd5b5050610191546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b1580156124cf57600080fd5b505afa1580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125079190613bf6565b9e9d5050505050505050505050505050565b610191546000906001600160a01b0385811691161461254a5760405162461bcd60e51b81526004016106b890614057565b61019b5461019c54604051631f29a8cd60e31b81526004810191909152600091829182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561259957600080fd5b505afa1580156125ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125d59190810190613a5f565b60408051600480825260a0820190925293965091945092506000919060208201608080368337505060408051600480825260a0820190925292935060009291506020820160808036833701905050905060005b855181101561271257858181518110612643576126436144a6565b602002602001015183828151811061265d5761265d6144a6565b6001600160a01b03928316602091820292909201015261019154875191169087908390811061268e5761268e6144a6565b60200260200101516001600160a01b031614156126df5760646126b28a60636143d9565b6126bc91906142c9565b8282815181106126ce576126ce6144a6565b602002602001018181525050612700565b60008282815181106126f3576126f36144a6565b6020026020010181815250505b8061270a8161443f565b915050612628565b506000806000612724610197546113bc565b8b6101975461273391906143d9565b61273d91906142c9565b60408051602081018690529081018290526060810184905290915060009060800160408051601f19818403018152608083018252888352602083018890528282018190526000606084015261019b5461019c549251638bdb391360e01b81529194506001600160a01b031691638bdb3913916127c29190309081908790600401613ec7565b600060405180830381600087803b1580156127dc57600080fd5b505af11580156127f0573d6000803e3d6000fd5b5050610191546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b15801561283857600080fd5b505afa15801561284c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128709190613bf6565b9a50505050505050505050505b9392505050565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820152808660018111156128de576128de614490565b908160018111156128f1576128f1614490565b9052506001600160a01b0385811660208301528481166040808401919091526060830185905261012d549051631f29a8cd60e31b8152600481018a90526000928392839291169063f94d46689060240160006040518083038186803b15801561295957600080fd5b505afa15801561296d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129959190810190613a5f565b61012d5460405163f6c0092760e01b8152600481018f9052939650919450925060009182916001600160a01b03169063f6c0092790602401604080518083038186803b1580156129e457600080fd5b505afa1580156129f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1c91906139a2565b90925090506000816002811115612a3557612a35614490565b1415612b6e5760008060005b87518160ff161015612add578c6001600160a01b0316888260ff1681518110612a6c57612a6c6144a6565b60200260200101516001600160a01b03161415612a8e578060ff169250612acb565b8b6001600160a01b0316888260ff1681518110612aad57612aad6144a6565b60200260200101516001600160a01b03161415612acb578060ff1691505b80612ad58161445a565b915050612a41565b5060405162f64aa560e11b81526001600160a01b038516906301ec954a90612b0f908b908a9087908790600401614180565b60206040518083038186803b158015612b2757600080fd5b505afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f9190613bf6565b98505050505050505050612c98565b6001816002811115612b8257612b82614490565b1415612c8d5760008060005b87518160ff161015612c5c578c6001600160a01b0316888260ff1681518110612bb957612bb96144a6565b60200260200101516001600160a01b03161415612bf457868160ff1681518110612be557612be56144a6565b60200260200101519250612c4a565b8b6001600160a01b0316888260ff1681518110612c1357612c136144a6565b60200260200101516001600160a01b03161415612c4a57868160ff1681518110612c3f57612c3f6144a6565b602002602001015191505b80612c548161445a565b915050612b8e565b5060405163274b044360e21b81526001600160a01b03851690639d2c110c90612b0f908b90869086906004016141b9565b600096505050505050505b95945050505050565b60606000612cb08360026143d9565b612cbb9060026142b1565b67ffffffffffffffff811115612cd357612cd36144bc565b6040519080825280601f01601f191660200182016040528015612cfd576020820181803683370190505b509050600360fc1b81600081518110612d1857612d186144a6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d4757612d476144a6565b60200101906001600160f81b031916908160001a9053506000612d6b8460026143d9565b612d769060016142b1565b90505b6001811115612dee576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612daa57612daa6144a6565b1a60f81b828281518110612dc057612dc06144a6565b60200101906001600160f81b031916908160001a90535060049490941c93612de781614428565b9050612d79565b50831561287d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b8565b803b612ea15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106b8565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b612f415760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106b8565b600080846001600160a01b031684604051612f5c9190613e36565b600060405180830381855af49150503d8060008114612f97576040519150601f19603f3d011682016040523d82523d6000602084013e612f9c565b606091505b5091509150612c988282604051806060016040528060278152602001614516602791396135b3565b612fcd81612e3d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff168061301d575060005460ff16155b6130395760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff1615801561305b576000805461ffff19166101011790555b6130636135ec565b61306b6135ec565b610fd66135ec565b600054610100900460ff168061308c575060005460ff16155b6130a85760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff16158015613063576000805461ffff191661010117905561306b6135ec565b61012d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905260009187169063095ea7b390604401602060405180830381600087803b15801561312257600080fd5b505af1158015613136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315a9190613b71565b506131a76040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b888152602081018860018111156131c0576131c0614490565b908160018111156131d3576131d3614490565b9052506001600160a01b038781166040838101919091528782166060808501919091526080808501879052825190810183526000602082018190529181019190915287831681528683169181019190915261012d549091166352bbbe2983836b033b2e3c9fd0803ce800000061324b426102586142b1565b6040518563ffffffff1660e01b815260040161326a94939291906140c5565b602060405180830381600087803b15801561328457600080fd5b505af1158015613298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132bc9190613bf6565b9a9950505050505050505050565b6000806132d988888886613656565b905060038110156133f0576040516370a0823160e01b81526001600160a01b03858116600483015289169063a9059cbb90879083906370a082319060240160206040518083038186803b15801561332f57600080fd5b505afa158015613343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133679190613bf6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156133ad57600080fd5b505af11580156133c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e59190613b71565b5060009150506135a9565b61015f5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590526000918a169063095ea7b390604401602060405180830381600087803b15801561344157600080fd5b505af1158015613455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134799190613b71565b5060408051600280825260608201835260009260208301908036833701905050905089816000815181106134af576134af6144a6565b60200260200101906001600160a01b031690816001600160a01b03168152505088816001815181106134e3576134e36144a6565b6001600160a01b03928316602091820292909201015261015f54166338ed17398684848a613513426102586142b1565b6040518663ffffffff1660e01b8152600401613533959493929190614220565b600060405180830381600087803b15801561354d57600080fd5b505af1158015613561573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135899190810190613b34565b60018151811061359b5761359b6144a6565b602002602001015193505050505b9695505050505050565b606083156135c257508161287d565b8251156135d25782518084602001fd5b8160405162461bcd60e51b81526004016106b89190613ef9565b600054610100900460ff1680613605575060005460ff16155b6136215760405162461bcd60e51b81526004016106b890613fdb565b600054610100900460ff16158015610fd6576000805461ffff19166101011790558015610ebe576000805461ff001916905550565b60408051600280825260608201835260009283929190602083019080368337019050509050858160008151811061368f5761368f6144a6565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106136c3576136c36144a6565b6001600160a01b03928316602091820292909201015261015f5460405163d06ca61f60e01b8152600092919091169063d06ca61f9061370890879086906004016141de565b60006040518083038186803b15801561372057600080fd5b505afa158015613734573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261375c9190810190613b34565b905080600081518110613771576137716144a6565b60200260200101518160018151811061378c5761378c6144a6565b60200260200101518661379f91906143d9565b6137a991906142c9565b979650505050505050565b600082601f8301126137c557600080fd5b815160206137da6137d58361428d565b61425c565b80838252828201915082860187848660051b89010111156137fa57600080fd5b60005b85811015613819578151845292840192908401906001016137fd565b5090979650505050505050565b60006020828403121561383857600080fd5b813561287d816144d2565b600080600080600060a0868803121561385b57600080fd5b8535613866816144d2565b94506020860135613876816144d2565b93506040860135613886816144d2565b92506060860135613896816144d2565b915060808601356138a6816144d2565b809150509295509295909350565b600080600080608085870312156138ca57600080fd5b84356138d5816144d2565b935060208501356138e5816144d2565b93969395505050506040820135916060013590565b6000806040838503121561390d57600080fd5b8235613918816144d2565b915060208381013567ffffffffffffffff8082111561393657600080fd5b818601915086601f83011261394a57600080fd5b81358181111561395c5761395c6144bc565b61396e601f8201601f1916850161425c565b9150808252878482850101111561398457600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156139b557600080fd5b82516139c0816144d2565b6020840151909250600381106139d557600080fd5b809150509250929050565b600080604083850312156139f357600080fd5b82356139fe816144d2565b946020939093013593505050565b60008060008060808587031215613a2257600080fd5b8435613a2d816144d2565b9350602085013592506040850135613a44816144d2565b91506060850135613a54816144e7565b939692955090935050565b600080600060608486031215613a7457600080fd5b835167ffffffffffffffff80821115613a8c57600080fd5b818601915086601f830112613aa057600080fd5b81516020613ab06137d58361428d565b8083825282820191508286018b848660051b8901011115613ad057600080fd5b600096505b84871015613afc578051613ae8816144d2565b835260019690960195918301918301613ad5565b5091890151919750909350505080821115613b1657600080fd5b50613b23868287016137b4565b925050604084015190509250925092565b600060208284031215613b4657600080fd5b815167ffffffffffffffff811115613b5d57600080fd5b613b69848285016137b4565b949350505050565b600060208284031215613b8357600080fd5b815161287d816144e7565b600060208284031215613ba057600080fd5b5035919050565b60008060408385031215613bba57600080fd5b8235915060208301356139d5816144d2565b600060208284031215613bde57600080fd5b81356001600160e01b03198116811461287d57600080fd5b600060208284031215613c0857600080fd5b5051919050565b600060208284031215613c2157600080fd5b815160ff8116811461287d57600080fd5b600081518084526020808501945080840160005b83811015613c6b5781516001600160a01b031687529582019590820190600101613c46565b509495945050505050565b600081518084526020808501945080840160005b83811015613c6b57815187529582019590820190600101613c8a565b60008151808452613cbe8160208601602086016143f8565b601f01601f19169290920160200192915050565b60028110613cf057634e487b7160e01b600052602160045260246000fd5b9052565b8051608080845281519084018190526000916020919082019060a0860190845b81811015613d395783516001600160a01b031683529284019291840191600101613d14565b505082850151915085810383870152613d528183613c76565b9250505060408301518482036040860152613d6d8282613ca6565b9150506060830151613d83606086018215159052565b509392505050565b6000610120613d9b848451613cd2565b6020838101516001600160a01b03169085015260408084015190613dc9908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151613e0260c08601826001600160a01b03169052565b5060e0830151613e1d60e08601826001600160a01b03169052565b506101008084015182828701526135a983870182613ca6565b60008251613e488184602087016143f8565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e8a8160178501602088016143f8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613ebb8160288401602088016143f8565b01602801949350505050565b8481526001600160a01b038481166020830152831660408201526080606082018190526000906135a990830184613cf4565b60208152600061287d6020830184613ca6565b6020808252601f908201527f5265737472696374656420746f20504f5254464f4c494f5f4d414e4147455200604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526019908201527f536f6d6520746f6b656e206e6f7420636f6d70617469626c6500000000000000604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60e08152845160e0820152600060208601516140e5610100840182613cd2565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c061018084015261412e6101a0840182613ca6565b91505061416e602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b6080815260006141936080830187613d8b565b82810360208401526141a58187613c76565b604084019590955250506060015292915050565b6060815260006141cc6060830186613d8b565b60208301949094525060400152919050565b828152604060208201526000613b696040830184613c32565b8381526060602082015260006142106060830185613c76565b9050826040830152949350505050565b85815284602082015260a06040820152600061423f60a0830186613c32565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614285576142856144bc565b604052919050565b600067ffffffffffffffff8211156142a7576142a76144bc565b5060051b60200190565b600082198211156142c4576142c461447a565b500190565b6000826142e657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561432657816000190482111561430c5761430c61447a565b8085161561431957918102915b93841c93908002906142f0565b509250929050565b600061287d60ff8416836000826143475750600161068b565b816143545750600061068b565b816001811461436a576002811461437457614390565b600191505061068b565b60ff8411156143855761438561447a565b50506001821b61068b565b5060208310610133831016604e8410600b84101617156143b3575081810a61068b565b6143bd83836142eb565b80600019048211156143d1576143d161447a565b029392505050565b60008160001904831182151516156143f3576143f361447a565b500290565b60005b838110156144135781810151838201526020016143fb565b83811115614422576000848401525b50505050565b6000816144375761443761447a565b506000190190565b60006000198214156144535761445361447a565b5060010190565b600060ff821660ff8114156144715761447161447a565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ebe57600080fd5b8015158114610ebe57600080fdfe90c2aa7471c04182221f68e80c07ab1e5946e4c63f8693e14ca40385d529f051416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207500d3ed72fb08e4fb2915061e34d18aae4d0a5f66af961925a1cfa0c570787664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 823,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 826,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2943,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3865,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 806,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 973,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 21050,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "portfolioManager",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 21299,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15483,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "balancerVault",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IVault)18236"
      },
      {
        "astId": 16050,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16058,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(IUniswapV2Router02)19846"
      },
      {
        "astId": 16289,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21648,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "usdcToken",
        "offset": 0,
        "slot": "401",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 21651,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "bpspTUsdToken",
        "offset": 0,
        "slot": "402",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 21654,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "balToken",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 21657,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "wmaticToken",
        "offset": 0,
        "slot": "404",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 21660,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "tusdToken",
        "offset": 0,
        "slot": "405",
        "type": "t_contract(IERC20)8922"
      },
      {
        "astId": 21662,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "usdcTokenDenominator",
        "offset": 0,
        "slot": "406",
        "type": "t_uint256"
      },
      {
        "astId": 21664,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "bpspTUsdTokenDenominator",
        "offset": 0,
        "slot": "407",
        "type": "t_uint256"
      },
      {
        "astId": 21666,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "balTokenDenominator",
        "offset": 0,
        "slot": "408",
        "type": "t_uint256"
      },
      {
        "astId": 21668,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "wmaticTokenDenominator",
        "offset": 0,
        "slot": "409",
        "type": "t_uint256"
      },
      {
        "astId": 21670,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "tusdTokenDenominator",
        "offset": 0,
        "slot": "410",
        "type": "t_uint256"
      },
      {
        "astId": 21673,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "balancerVault",
        "offset": 0,
        "slot": "411",
        "type": "t_contract(IVault)18236"
      },
      {
        "astId": 21675,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "balancerPoolId1",
        "offset": 0,
        "slot": "412",
        "type": "t_bytes32"
      },
      {
        "astId": 21677,
        "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
        "label": "balancerPoolId2",
        "offset": 0,
        "slot": "413",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)8922": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)19846": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)18236": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/strategies/StrategyBalancer.sol:StrategyBalancer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
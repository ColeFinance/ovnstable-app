{
  "language": "Solidity",
  "sources": {
    "contracts/action_builders/A3Crv2A3CrvGaugeActionBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../interfaces/IActionBuilder.sol\";\nimport \"../interfaces/IMark2Market.sol\";\n\ncontract A3Crv2A3CrvGaugeActionBuilder is IActionBuilder {\n    bytes32 constant ACTION_CODE = keccak256(\"A3Crv2A3CrvGauge\");\n\n    ITokenExchange public tokenExchange;\n    IERC20 public a3CrvToken;\n    IERC20 public a3CrvGaugeToken;\n\n    constructor(\n        address _tokenExchange,\n        address _a3CrvToken,\n        address _a3CrvGaugeToken\n    ) {\n        require(_tokenExchange != address(0), \"Zero address not allowed\");\n        require(_a3CrvToken != address(0), \"Zero address not allowed\");\n        require(_a3CrvGaugeToken != address(0), \"Zero address not allowed\");\n\n        tokenExchange = ITokenExchange(_tokenExchange);\n        a3CrvToken = IERC20(_a3CrvToken);\n        a3CrvGaugeToken = IERC20(_a3CrvGaugeToken);\n    }\n\n    function getActionCode() external pure override returns (bytes32) {\n        return ACTION_CODE;\n    }\n\n    function buildAction(\n        IMark2Market.TotalAssetPrices memory totalAssetPrices,\n        ExchangeAction[] memory actions\n    ) external view override returns (ExchangeAction memory) {\n        IMark2Market.AssetPrices[] memory assetPrices = totalAssetPrices.assetPrices;\n\n        // get diff from iteration over prices because can't use mapping in memory params to external functions\n        IMark2Market.AssetPrices memory a3CrvPrices;\n        IMark2Market.AssetPrices memory a3CrvGaugePrices;\n        for (uint8 i = 0; i < assetPrices.length; i++) {\n            if (assetPrices[i].asset == address(a3CrvGaugeToken)) {\n                a3CrvGaugePrices = assetPrices[i];\n                continue;\n            }\n            if (assetPrices[i].asset == address(a3CrvToken)) {\n                a3CrvPrices = assetPrices[i];\n                continue;\n            }\n        }\n\n        // because we know that a3Crv-gauge is leaf in tree and we can use this value\n        uint256 diff = a3CrvGaugePrices.diffToTarget;\n\n        IERC20 from;\n        IERC20 to;\n        bool targetIsZero;\n        if (a3CrvGaugePrices.targetIsZero || a3CrvGaugePrices.diffToTargetSign < 0) {\n            from = a3CrvGaugeToken;\n            to = a3CrvToken;\n            targetIsZero = a3CrvGaugePrices.targetIsZero;\n        } else {\n            from = a3CrvToken;\n            to = a3CrvGaugeToken;\n            targetIsZero = a3CrvPrices.targetIsZero;\n        }\n\n        ExchangeAction memory action = ExchangeAction(\n            tokenExchange,\n            ACTION_CODE,\n            from,\n            to,\n            diff,\n            targetIsZero,\n            false\n        );\n\n        return action;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/ITokenExchange.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ITokenExchange {\n\n    function exchange(\n        address spender,\n        IERC20 from,\n        address receiver,\n        IERC20 to,\n        uint256 amount\n    ) external;\n\n}\n"
    },
    "contracts/interfaces/IActionBuilder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IMark2Market.sol\";\nimport \"./ITokenExchange.sol\";\n\ninterface IActionBuilder {\n    struct ExchangeAction {\n        ITokenExchange tokenExchange;\n        bytes32 code;\n        IERC20 from;\n        IERC20 to;\n        uint256 amount; // amount at usdc with 6 digit fractions\n        bool exchangeAll; // mean that we should trade all tokens to zero ownership\n        bool executed;\n    }\n\n    function getActionCode() external pure returns (bytes32);\n\n    function buildAction(\n        IMark2Market.TotalAssetPrices memory assetPrices,\n        ExchangeAction[] memory actions\n    ) external view returns (ExchangeAction memory);\n}\n"
    },
    "contracts/interfaces/IMark2Market.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IMark2Market {\n    struct AssetPrices {\n        address asset;\n        uint256 amountInVault; // balance on Vault\n        uint256 usdcPriceInVault; // current total price of balance at USDC\n        uint256 diffToTarget; // diff usdcPriceInVault to target in portfolio\n        int8 diffToTargetSign; // diff sign usdcPriceInVault to target in portfolio\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\n        //\n        uint256 usdcPriceDenominator;\n        uint256 usdcSellPrice;\n        uint256 usdcBuyPrice;\n        //\n        uint256 decimals;\n        string name;\n        string symbol;\n    }\n\n    struct TotalAssetPrices {\n        AssetPrices[] assetPrices;\n        uint256 totalUsdcPrice;\n    }\n\n    function assetPrices() external view returns (TotalAssetPrices memory);\n\n    function assetPricesForBalance() external returns (TotalAssetPrices memory);\n\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\n        external\n        returns (TotalAssetPrices memory);\n}\n"
    },
    "contracts/Mark2Market.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0 <0.9.0;\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./interfaces/IMark2Market.sol\";\nimport \"./interfaces/IPriceGetter.sol\";\nimport \"./OwnableExt.sol\";\nimport \"./registries/InvestmentPortfolio.sol\";\nimport \"./Vault.sol\";\n\n//TODO: use AccessControl or Ownable from zeppelin\ncontract Mark2Market is IMark2Market, OwnableExt {\n    Vault public vault;\n    InvestmentPortfolio public investmentPortfolio;\n\n    //TODO: remove\n    event ConsoleLog(string str);\n\n    function init(address _vault, address _investmentPortfolio) public onlyOwner {\n        require(_vault != address(0), \"Zero address not allowed\");\n        require(_investmentPortfolio != address(0), \"Zero address not allowed\");\n        vault = Vault(_vault);\n        investmentPortfolio = InvestmentPortfolio(_investmentPortfolio);\n    }\n\n    function assetPrices() public view override returns (TotalAssetPrices memory) {\n        InvestmentPortfolio.AssetInfo[] memory assetInfos = investmentPortfolio.getAllAssetInfos();\n\n        uint256 totalUsdcPrice = 0;\n        uint256 count = assetInfos.length;\n        AssetPrices[] memory assetPrices = new AssetPrices[](count);\n        for (uint8 i = 0; i < count; i++) {\n            InvestmentPortfolio.AssetInfo memory assetInfo = assetInfos[i];\n            uint256 amountInVault = IERC20(assetInfo.asset).balanceOf(address(vault));\n            // normilize amountInVault to 18 decimals\n            //TODO: denominator usage\n            uint256 amountDenominator = 10**(18 - IERC20Metadata(assetInfo.asset).decimals());\n            amountInVault = amountInVault * amountDenominator;\n\n            IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\n\n            uint256 usdcPriceDenominator = priceGetter.denominator();\n            uint256 usdcSellPrice = priceGetter.getUsdcSellPrice();\n            uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\n\n            // in decimals: 18 + 18 - 18 => 18\n            uint256 usdcPriceInVault = (amountInVault * usdcSellPrice) / usdcPriceDenominator;\n\n            totalUsdcPrice += usdcPriceInVault;\n\n            assetPrices[i] = AssetPrices(\n                assetInfo.asset,\n                amountInVault,\n                usdcPriceInVault,\n                0,\n                int8(0),\n                false,\n                usdcPriceDenominator,\n                usdcSellPrice,\n                usdcBuyPrice,\n                IERC20Metadata(assetInfo.asset).decimals(),\n                IERC20Metadata(assetInfo.asset).name(),\n                IERC20Metadata(assetInfo.asset).symbol()\n            );\n        }\n\n        TotalAssetPrices memory totalPrices = TotalAssetPrices(assetPrices, totalUsdcPrice);\n\n        return totalPrices;\n    }\n\n    function assetPricesForBalance() external override returns (TotalAssetPrices memory) {\n        return assetPricesForBalance(address(0), 0);\n    }\n\n    /**\n     * @param withdrawToken Token to withdraw\n     * @param withdrawAmount Not normilized amount to withdraw\n     */\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\n        public\n        override\n        returns (TotalAssetPrices memory)\n    {\n        if (withdrawToken != address(0)) {\n            // normilize withdrawAmount to 18 decimals\n            //TODO: denominator usage\n            uint256 withdrawAmountDenominator = 10**(18 - IERC20Metadata(withdrawToken).decimals());\n            withdrawAmount = withdrawAmount * withdrawAmountDenominator;\n        }\n        // //TODO: remove\n        // log(\"withdrawAmount: \", withdrawAmount);\n\n        InvestmentPortfolio.AssetWeight[] memory assetWeights = investmentPortfolio\n            .getAllAssetWeights();\n\n        // //TODO: remove\n        // log(\"assetWeights.length: \", assetWeights.length);\n\n        uint256 totalUsdcPrice = 0;\n        uint256 count = assetWeights.length;\n        AssetPrices[] memory assetPrices = new AssetPrices[](count);\n        for (uint8 i = 0; i < count; i++) {\n            InvestmentPortfolio.AssetWeight memory assetWeight = assetWeights[i];\n\n            uint256 amountInVault = IERC20(assetWeight.asset).balanceOf(address(vault));\n            // normilize amountInVault to 18 decimals\n            //TODO: denominator usage\n            uint256 amountDenominator = 10**(18 - IERC20Metadata(assetWeight.asset).decimals());\n            amountInVault = amountInVault * amountDenominator;\n            // //TODO: remove\n            // log(\"amountInVault: \", amountInVault);\n\n            InvestmentPortfolio.AssetInfo memory assetInfo = investmentPortfolio.getAssetInfo(\n                assetWeight.asset\n            );\n            IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\n\n            uint256 usdcPriceDenominator = priceGetter.denominator();\n            uint256 usdcSellPrice = priceGetter.getUsdcSellPrice();\n            uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\n\n            // in decimals: 18 + 18 - 18 => 18\n            uint256 usdcPriceInVault = (amountInVault * usdcSellPrice) / usdcPriceDenominator;\n\n            totalUsdcPrice += usdcPriceInVault;\n\n            assetPrices[i] = AssetPrices(\n                assetWeight.asset,\n                amountInVault,\n                usdcPriceInVault,\n                0,\n                int8(0),\n                false,\n                usdcPriceDenominator,\n                usdcSellPrice,\n                usdcBuyPrice,\n                IERC20Metadata(assetWeight.asset).decimals(),\n                IERC20Metadata(assetWeight.asset).name(),\n                IERC20Metadata(assetWeight.asset).symbol()\n            );\n        }\n\n        // 3. validate withdrawAmount\n        require(\n            totalUsdcPrice >= withdrawAmount,\n            string(\n                abi.encodePacked(\n                    \"Withdraw more than total: \",\n                    uint2str(withdrawAmount),\n                    \" > \",\n                    uint2str(totalUsdcPrice)\n                )\n            )\n        );\n\n        // 4. correct total with withdrawAmount\n        // //TODO: remove\n        // log(\"totalUsdcPrice before correction: \", totalUsdcPrice);\n\n        totalUsdcPrice = totalUsdcPrice - withdrawAmount;\n        log(\"totalUsdcPrice after correction: \", totalUsdcPrice);\n\n        for (uint8 i = 0; i < count; i++) {\n            AssetPrices memory assetPrice = assetPrices[i];\n            (\n                assetPrice.diffToTarget,\n                assetPrice.diffToTargetSign,\n                assetPrice.targetIsZero\n            ) = diffToTarget(totalUsdcPrice, assetPrice.asset);\n\n            // emit ConsoleLog(\n            //     string(\n            //         abi.encodePacked(\n            //             uint2str(i),\n            //             \" | \",\n            //             IERC20Metadata(assetPrice.asset).symbol(),\n            //             \" | \",\n            //             uint2str(assetPrice.amountInVault),\n            //             \" | \",\n            //             uint2str(assetPrice.usdcPriceInVault),\n            //             \" | \",\n            //             uint2str(assetPrice.diffToTarget),\n            //             \" | \",\n            //             uint2str(assetPrice.usdcSellPrice),\n            //             \" | \",\n            //             uint2str(assetPrice.usdcBuyPrice)\n            //         )\n            //     )\n            // );\n\n            // update diff for withdrawn token\n            if (withdrawAmount > 0 && assetPrice.asset == withdrawToken) {\n                if (assetPrice.diffToTargetSign < 0) {\n                    if (assetPrice.diffToTarget > withdrawAmount) {\n                        assetPrice.diffToTarget = assetPrice.diffToTarget - withdrawAmount;\n                    } else {\n                        assetPrice.diffToTarget = withdrawAmount - assetPrice.diffToTarget;\n                        assetPrice.diffToTargetSign = int8(1);\n                    }\n                } else {\n                    assetPrice.diffToTarget = assetPrice.diffToTarget + withdrawAmount;\n                }\n            }\n\n            // emit ConsoleLog(\n            //     string(\n            //         abi.encodePacked(\n            //             // uint2str(i),\n            //             // \" | \",\n            //             IERC20Metadata(assetPrice.asset).symbol(),\n            //             \" | \",\n            //             uint2str(assetPrice.amountInVault),\n            //             // \" | \",\n            //             // uint2str(assetPrice.usdcPriceInVault),\n            //             \" | \",\n            //             uint2str(assetPrice.diffToTarget),\n            //             \" | \",\n            //             uint2str(assetPrice.usdcSellPrice),\n            //             \" | \",\n            //             uint2str(assetPrice.usdcBuyPrice)\n            //         )\n            //     )\n            // );\n        }\n\n        TotalAssetPrices memory totalPrices = TotalAssetPrices(assetPrices, totalUsdcPrice);\n\n        return totalPrices;\n    }\n\n    /**\n     * @param totalUsdcPrice - Total normilized to 10**18\n     * @param asset - Token address to calc\n     * @return normilized to 10**18 diff amount, sign and mark that mean that need sell all\n     */\n    function diffToTarget(uint256 totalUsdcPrice, address asset)\n        internal\n        view\n        returns (\n            uint256,\n            int8,\n            bool\n        )\n    {\n        InvestmentPortfolio.AssetWeight memory assetWeight = investmentPortfolio.getAssetWeight(\n            asset\n        );\n\n        uint256 targetUsdcAmount = (totalUsdcPrice * assetWeight.targetWeight) /\n            investmentPortfolio.TOTAL_WEIGHT();\n\n        InvestmentPortfolio.AssetInfo memory assetInfo = investmentPortfolio.getAssetInfo(asset);\n        IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\n\n        uint256 usdcPriceDenominator = priceGetter.denominator();\n        uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\n\n        // in decimals: 18 * 18 / 18 => 18\n        uint256 targetTokenAmount = (targetUsdcAmount * usdcPriceDenominator) / usdcBuyPrice;\n\n        // normilize currentAmount to 18 decimals\n        uint256 currentAmount = IERC20(asset).balanceOf(address(vault));\n        //TODO: denominator usage\n        uint256 denominator = 10**(18 - IERC20Metadata(asset).decimals());\n        currentAmount = currentAmount * denominator;\n\n        bool targetIsZero;\n        if (targetTokenAmount == 0) {\n            targetIsZero = true;\n        } else {\n            targetIsZero = false;\n        }\n\n        if (targetTokenAmount >= currentAmount) {\n            return (targetTokenAmount - currentAmount, int8(1), targetIsZero);\n        } else {\n            return (currentAmount - targetTokenAmount, int8(-1), targetIsZero);\n        }\n    }\n\n    //TODO: remove\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            k = k - 1;\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    //TODO: remove\n    function log(string memory message, uint value) internal {\n        emit ConsoleLog(string(abi.encodePacked(message, uint2str(value))));\n    }\n}\n\n/* // function m2m () {\n\n    // calculate proportions and changes value\n        for (uint8 a = 0; a<actives.length; a++) {\n                totalSum +=  (uint128 (actives[a].balance)) * priceAct;\n\n\n        }\n\n    }\n */\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IPriceGetter {\n    /**\n     * Token buy price at USDC. Amount of USDC we should spend to buy one token.\n     * Returned value is [USDC/token]\n     * Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice()\n     * Normilized to 10**18\n     */\n    function getUsdcBuyPrice() external view returns (uint256);\n\n    /**\n     * Token sell price at USDC. Amount of USDC we got if sell one token.\n     * Returned value is [USDC/token]\n     * Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator()\n     * Normilized to 10**18\n     */\n    function getUsdcSellPrice() external view returns (uint256);\n\n    /**\n     * Denominator for normalization. Default 10**18.\n     */\n    function denominator() external view returns (uint256);\n}\n"
    },
    "contracts/OwnableExt.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableExt is Context {\n    address private _owner;\n    mapping(bytes32 => address) public rolemap;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"OwnableExt: caller is not the owner\");\n        _;\n    }\n\n    function setRole(bytes32 _role, address _actor) external onlyOwner {\n        require(_actor != address(0), \"Zero address not allowed\");\n        rolemap[_role] = _actor;\n        //TODO: добавить событие\n    }\n\n    modifier onlyRole(bytes32 _role) {\n        require(rolemap[_role] == _msgSender(), \"OwnableExt: caller has not the role\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        require(newOwner != address(0), \"Zero address not allowed\");\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/registries/InvestmentPortfolio.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract InvestmentPortfolio is AccessControl {\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\n\n    mapping(address => uint256) public assetInfoPositions;\n    AssetInfo[] public assetInfos;\n    mapping(address => uint256) public assetWeightPositions;\n    AssetWeight[] public assetWeights;\n\n    event UpdatedAssetWeight(\n        uint256 index,\n        address asset,\n        uint256 minWeight,\n        uint256 targetWeight,\n        uint256 maxWeight\n    );\n    event UpdatedAssetInfo(uint256 index, address asset, address priceGetter);\n\n    struct AssetWeight {\n        address asset;\n        uint256 minWeight;\n        uint256 targetWeight;\n        uint256 maxWeight;\n    }\n\n    struct AssetInfo {\n        address asset;\n        address priceGetter;\n    }\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Restricted to admins\");\n        _;\n    }\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function setAssetInfos(AssetInfo[] calldata _assetInfos) external onlyAdmin {\n        for (uint8 i = 0; i < _assetInfos.length; i++) {\n            _addAssetInfoAt(_assetInfos[i], i);\n        }\n        // truncate array if needed\n        if (assetInfos.length > _assetInfos.length) {\n            uint256 removeCount = assetInfos.length - _assetInfos.length;\n            for (uint8 i = 0; i < removeCount; i++) {\n                //TODO: do we need remove from mapping?\n                assetInfos.pop();\n            }\n        }\n    }\n\n    function addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) external onlyAdmin {\n        _addAssetInfoAt(assetInfo, index);\n    }\n\n    function _addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) internal {\n        uint256 currentlength = assetInfos.length;\n        // expand array id needed\n        if (currentlength == 0 || currentlength - 1 < index) {\n            uint256 additionalCount = index - currentlength + 1;\n            for (uint8 i = 0; i < additionalCount; i++) {\n                assetInfos.push();\n            }\n        }\n        assetInfos[index] = assetInfo;\n        assetInfoPositions[assetInfo.asset] = index;\n        emit UpdatedAssetInfo(index, assetInfo.asset, assetInfo.priceGetter);\n    }\n\n    function setWeights(AssetWeight[] calldata _assetWeights) external onlyAdmin {\n        uint256 totalTarget = 0;\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\n            AssetWeight memory assetWeight = _assetWeights[i];\n            require(assetWeight.asset != address(0), \"weight without asset\");\n            require(\n                assetWeight.minWeight <= assetWeight.targetWeight,\n                \"minWeight shouldn't higher than targetWeight\"\n            );\n            require(\n                assetWeight.targetWeight <= assetWeight.maxWeight,\n                \"targetWeight shouldn't higher than maxWeight\"\n            );\n            totalTarget += assetWeight.targetWeight;\n        }\n        require(totalTarget == TOTAL_WEIGHT, \"Total target should equal to TOTAL_WEIGHT\");\n\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\n            _addWeightAt(_assetWeights[i], i);\n            assetWeightPositions[assetWeights[i].asset] = i;\n        }\n\n        // truncate if need\n        if (assetWeights.length > _assetWeights.length) {\n            uint256 removeCount = assetWeights.length - _assetWeights.length;\n            for (uint8 i = 0; i < removeCount; i++) {\n                assetWeights.pop();\n            }\n        }\n    }\n\n    function _addWeightAt(AssetWeight memory assetWeight, uint256 index) internal {\n        uint256 currentlength = assetWeights.length;\n        // expand if need\n        if (currentlength == 0 || currentlength - 1 < index) {\n            uint256 additionalCount = index - currentlength + 1;\n            for (uint8 i = 0; i < additionalCount; i++) {\n                assetWeights.push();\n            }\n        }\n        assetWeights[index] = assetWeight;\n        emit UpdatedAssetWeight(\n            index,\n            assetWeight.asset,\n            assetWeight.minWeight,\n            assetWeight.targetWeight,\n            assetWeight.maxWeight\n        );\n    }\n\n    function getAssetInfo(address asset) external view returns (AssetInfo memory) {\n        return assetInfos[assetInfoPositions[asset]];\n    }\n\n    function getAllAssetInfos() external view returns (AssetInfo[] memory) {\n        return assetInfos;\n    }\n\n    function getAssetWeight(address asset) external view returns (AssetWeight memory) {\n        return assetWeights[assetWeightPositions[asset]];\n    }\n\n    function getAllAssetWeights() external view returns (AssetWeight[] memory) {\n        return assetWeights;\n    }\n}\n"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./connectors/aave/interfaces/IAaveIncentivesController.sol\";\n\n/**\n * Vault address is used as owner for all tokens for Overnights.\n * So you able to use Vault address to check any tokens balances.\n * Vault doesn't know about what it has and how mauch.\n * Vault can contain any tokens but only IERC20 could be transfered\n * in real work.\n * NOTE: currently work with ETH/MATIC or other payments not realised.\n * NOTE: not used SafeERC20 and it may be changed in future\n */\ncontract Vault is AccessControl {\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\"PORTFOLIO_MANAGER\");\n    bytes32 public constant REWARD_MANAGER = keccak256(\"REWARD_MANAGER\");\n\n    // Only Vault can claiming aave rewards\n    IAaveIncentivesController public aaveReward;\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Restricted to admins\");\n        _;\n    }\n\n    modifier onlyPortfolioManager() {\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \"Caller is not the PORTFOLIO_MANAGER\");\n        _;\n    }\n\n    modifier onlyRewardManager() {\n        require(hasRole(REWARD_MANAGER, msg.sender), \"Caller is not the REWARD_MANAGER\");\n        _;\n    }\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function setPortfolioManager(address _portfolioManager) public onlyAdmin {\n        require(_portfolioManager != address(0), \"Zero address not allowed\");\n        grantRole(PORTFOLIO_MANAGER, _portfolioManager);\n    }\n\n    function setRewardManager(address _rewardManager) public onlyAdmin {\n        require(_rewardManager != address(0), \"Zero address not allowed\");\n        grantRole(REWARD_MANAGER, _rewardManager);\n    }\n\n\n    function setAaveReward(address _aaveReward) public onlyAdmin {\n        require(_aaveReward != address(0), \"Zero address not allowed\");\n        aaveReward = IAaveIncentivesController(_aaveReward);\n    }\n\n\n\n    //TODO: do we really need this feature?\n    function removePortfolioManager(address _portfolioManager) public onlyAdmin {\n        require(_portfolioManager != address(0), \"Zero address not allowed\");\n        revokeRole(PORTFOLIO_MANAGER, _portfolioManager);\n    }\n\n\n    function claimRewardAave(address[] calldata assets, uint256 amount) public onlyRewardManager {\n        aaveReward.claimRewards(assets, amount, address(this));\n    }\n\n\n    /**\n     * @dev proxy to IERC20().totalSupply();\n     */\n    function totalSupply(IERC20 token) external view returns (uint256) {\n        return token.totalSupply();\n    }\n\n    /**\n     * @dev proxy to IERC20().balanceOf();\n     */\n    function balanceOf(IERC20 token, address account) external view returns (uint256) {\n        return token.balanceOf(account);\n    }\n\n    /**\n     * @dev proxy to IERC20().allowance();\n     */\n    function allowance(\n        IERC20 token,\n        address owner,\n        address spender\n    ) external view returns (uint256) {\n        return token.allowance(owner, spender);\n    }\n\n    /**\n     * @dev proxy to IERC20().approve();\n     */\n    function approve(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) external onlyPortfolioManager returns (bool) {\n        return token.approve(spender, amount);\n    }\n\n    /**\n     * @dev proxy to IERC20().transfer();\n     */\n    function transfer(\n        IERC20 token,\n        address recipient,\n        uint256 amount\n    ) external onlyPortfolioManager returns (bool) {\n        return token.transfer(recipient, amount);\n    }\n\n    /**\n     * @dev proxy to IERC20().transferFrom();\n     */\n    function transferFrom(\n        IERC20 token,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external onlyPortfolioManager returns (bool) {\n        return token.transferFrom(sender, recipient, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function renounceRole(bytes32 role, address account) external;\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/connectors/aave/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.8.0;\npragma experimental ABIEncoderV2;\n\ninterface IAaveIncentivesController {\n\n    event RewardsAccrued(address indexed user, uint256 amount);\n\n    event RewardsClaimed(\n        address indexed user,\n        address indexed to,\n        uint256 amount\n    );\n\n    event RewardsClaimed(\n        address indexed user,\n        address indexed to,\n        address indexed claimer,\n        uint256 amount\n    );\n\n    event ClaimerSet(address indexed user, address indexed claimer);\n\n    /**\n     * @dev Whitelists an address to claim the rewards on behalf of another address\n   * @param user The address of the user\n   * @param claimer The address of the claimer\n   */\n    function setClaimer(address user, address claimer) external;\n\n    /**\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n   * @param user The address of the user\n   * @return The claimer address\n   */\n    function getClaimer(address user) external view returns (address);\n\n    /**\n     * @dev Configure assets for a certain rewards emission\n   * @param assets The assets to incentivize\n   * @param emissionsPerSecond The emission for each asset\n   */\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\n    external;\n\n\n    /**\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\n   * @param asset The address of the user\n   * @param userBalance The balance of the user of the asset in the lending pool\n   * @param totalSupply The total supply of the asset in the lending pool\n   **/\n    function handleAction(\n        address asset,\n        uint256 userBalance,\n        uint256 totalSupply\n    ) external;\n\n    /**\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n   * @param user The address of the user\n   * @return The rewards\n   **/\n    function getRewardsBalance(address[] calldata assets, address user)\n    external\n    view\n    returns (uint256);\n\n    /**\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n   * @param amount Amount of rewards to claim\n   * @param to Address that will be receiving the rewards\n   * @return Rewards claimed\n   **/\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\n   * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n   * @param amount Amount of rewards to claim\n   * @param user Address to check and claim rewards\n   * @param to Address that will be receiving the rewards\n   * @return Rewards claimed\n   **/\n    function claimRewardsOnBehalf(\n        address[] calldata assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev returns the unclaimed rewards of the user\n   * @param user the address of the user\n   * @return the unclaimed user rewards\n   */\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\n\n    /**\n    * @dev for backward compatibility with previous implementation of the Incentives controller\n  */\n    function REWARD_TOKEN() external view returns (address);\n}\n"
    },
    "contracts/RewardManager.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\n\nimport \"./connectors/curve/interfaces/IRewardOnlyGauge.sol\";\nimport \"./connectors/aave/interfaces/IAaveIncentivesController.sol\";\nimport \"./interfaces/IRewardManager.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./Vault.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract RewardManager is IRewardManager, AccessControl {\n\n\n    IRewardOnlyGauge public rewardGauge;\n    Vault public vault;\n    IERC20 public amUSDC;\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Restricted to admins\");\n        _;\n    }\n\n    function setRewardGauge(address _rewardGauge) external onlyAdmin {\n        require(_rewardGauge != address(0), \"Zero address not allowed\");\n        rewardGauge = IRewardOnlyGauge(_rewardGauge);\n    }\n\n    function setVault(address _vault) external onlyAdmin {\n        require(_vault != address(0), \"Zero address not allowed\");\n        vault = Vault(_vault);\n    }\n\n    function setTokens(address _amUsdc) external onlyAdmin {\n        require(_amUsdc != address(0), \"Zero address not allowed\");\n        amUSDC = IERC20(_amUsdc);\n    }\n\n    /**\n    * Claim rewards from Curve gauge, Aave where we have staked LP tokens\n    */\n\n    function claimRewards() external override {\n        //TODO: add event if gauge emit nothing\n        claimRewardCurve();\n        claimRewardAave();\n    }\n\n    function claimRewardCurve() public {\n        rewardGauge.claim_rewards(address(vault));\n    }\n\n    function claimRewardAave() public {\n\n        address[] memory assets = new address[](1);\n        assets[0] = address(amUSDC);\n        vault.claimRewardAave(assets, type(uint256).max);\n    }\n\n}\n"
    },
    "contracts/connectors/curve/interfaces/IRewardOnlyGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRewardOnlyGauge is IERC20 {\n    function deposit(\n        uint256 _value,\n        address _addr,\n        bool _claim_rewards\n    ) external;\n\n    function deposit(uint256 _value, address _addr) external;\n\n    function deposit(uint256 _value, bool _claim_rewards) external;\n\n    function deposit(uint256 _value) external;\n\n    function withdraw(uint256 _value, bool _claim_rewards) external;\n\n    function withdraw(uint256 _value) external;\n\n    function lp_token() external returns (address);\n\n    function claim_rewards(address _addr, address _receiver) external;\n\n    function claim_rewards(address _addr) external;\n\n    function claim_rewards() external;\n\n    function claimed_reward(address _addr, address _token) external returns (uint256);\n\n    function claimable_reward(address _addr, address _token) external returns (uint256);\n\n    function claimable_reward_write(address _addr, address _token) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRewardManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRewardManager {\n\n    function claimRewards() external;\n}\n"
    },
    "contracts/token_exchanges/WMatic2UsdcTokenExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../connectors/swaps/interfaces/IUniswapV2Router02.sol\";\n\ncontract WMatic2UsdcTokenExchange is ITokenExchange {\n    IUniswapV2Router02 public swapRouter;\n    IERC20 public usdcToken;\n    IERC20 public wMaticToken;\n\n    constructor(\n        address _swapRouter,\n        address _usdcToken,\n        address _wMaticToken\n    ) {\n        require(_swapRouter != address(0), \"Zero address not allowed\");\n        require(_usdcToken != address(0), \"Zero address not allowed\");\n        require(_wMaticToken != address(0), \"Zero address not allowed\");\n\n        swapRouter = IUniswapV2Router02(_swapRouter);\n        usdcToken = IERC20(_usdcToken);\n        wMaticToken = IERC20(_wMaticToken);\n    }\n\n    function exchange(\n        address spender,\n        IERC20 from,\n        address receiver,\n        IERC20 to,\n        uint256 amount\n    ) external override {\n        require(\n            (from == usdcToken && to == wMaticToken) || (from == wMaticToken && to == usdcToken),\n            \"WMatic2UsdcTokenExchange: Some token not compatible\"\n        );\n\n        if (amount == 0) {\n            from.transfer(spender, from.balanceOf(address(this)));\n            return;\n        }\n\n        if (from == usdcToken && to == wMaticToken) {\n            revert(\"WMatic2UsdcTokenExchange: Allowed only exchange wMatic to USDC\");\n        } else {\n            //TODO: denominator usage\n            uint256 denominator = 10**(18 - IERC20Metadata(address(wMaticToken)).decimals());\n            amount = amount / denominator;\n\n            require(\n                wMaticToken.balanceOf(address(this)) >= amount,\n                \"WMatic2UsdcTokenExchange: Not enough wMaticToken\"\n            );\n\n            // check after denormilization\n            if (amount == 0) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            address[] memory path = new address[](2);\n            path[0] = address(wMaticToken);\n            path[1] = address(usdcToken);\n\n            uint[] memory amountsOut = swapRouter.getAmountsOut(amount, path);\n            // 6 + 18 - 18 = 6 - not normilized USDC in native 6 decimals\n            uint256 estimateUsdcOut = (amountsOut[1] * (10**18)) / amountsOut[0];\n            // skip exchange if estimate USDC less than 3 shares to prevent INSUFFICIENT_OUTPUT_AMOUNT error\n            // TODO: may be enough 2 or insert check ratio IN/OUT to make decision\n            if (estimateUsdcOut < 3) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            wMaticToken.approve(address(swapRouter), amount);\n\n            // TODO: use some calculation or Oracle call instead of usage '0' as amountOutMin\n            swapRouter.swapExactTokensForTokens(\n                amount, //    uint amountIn,\n                0, //          uint amountOutMin,\n                path,\n                receiver,\n                block.timestamp + 600 // 10 mins\n            );\n        }\n    }\n}\n"
    },
    "contracts/connectors/swaps/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n    \n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function pairFor(address factoryC, address tokenA, address tokenB) external view returns (address pair) ;\n\n}\n"
    },
    "contracts/connectors/swaps/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    \n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n \n\n}\n"
    },
    "contracts/token_exchanges/Crv2UsdcTokenExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../connectors/swaps/interfaces/IUniswapV2Router02.sol\";\n\ncontract Crv2UsdcTokenExchange is ITokenExchange {\n    IUniswapV2Router02 public swapRouter;\n    IERC20 public usdcToken;\n    IERC20 public crvToken;\n\n    constructor(\n        address _swapRouter,\n        address _usdcToken,\n        address _crvToken\n    ) {\n        require(_swapRouter != address(0), \"Zero address not allowed\");\n        require(_usdcToken != address(0), \"Zero address not allowed\");\n        require(_crvToken != address(0), \"Zero address not allowed\");\n\n        swapRouter = IUniswapV2Router02(_swapRouter);\n        usdcToken = IERC20(_usdcToken);\n        crvToken = IERC20(_crvToken);\n    }\n\n    function exchange(\n        address spender,\n        IERC20 from,\n        address receiver,\n        IERC20 to,\n        uint256 amount\n    ) external override {\n        require(\n            (from == usdcToken && to == crvToken) || (from == crvToken && to == usdcToken),\n            \"Crv2UsdcTokenExchange: Some token not compatible\"\n        );\n\n        if (amount == 0) {\n            from.transfer(spender, from.balanceOf(address(this)));\n            return;\n        }\n\n        if (from == usdcToken && to == crvToken) {\n            revert(\"Crv2UsdcTokenExchange: Allowed only exchange CRV to USDC\");\n        } else {\n            //TODO: denominator usage\n            uint256 denominator = 10**(18 - IERC20Metadata(address(crvToken)).decimals());\n            amount = amount / denominator;\n\n            require(\n                crvToken.balanceOf(address(this)) >= amount,\n                \"Crv2UsdcTokenExchange: Not enough crvToken\"\n            );\n\n            // check after denormilization\n            if (amount == 0) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            address[] memory path = new address[](2);\n            path[0] = address(crvToken);\n            path[1] = address(usdcToken);\n\n            uint[] memory amountsOut = swapRouter.getAmountsOut(amount, path);\n            // 6 + 18 - 18 = 6 - not normilized USDC in native 6 decimals\n            uint256 estimateUsdcOut = (amountsOut[1] * (10**18)) / amountsOut[0];\n            // skip exchange if estimate USDC less than 3 shares to prevent INSUFFICIENT_OUTPUT_AMOUNT error\n            // TODO: may be enough 2 or insert check ratio IN/OUT to make decision\n            if (estimateUsdcOut < 3) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            crvToken.approve(address(swapRouter), amount);\n\n            // TODO: use some calculation or Oracle call instead of usage '0' as amountOutMin\n            swapRouter.swapExactTokensForTokens(\n                amount, //    uint amountIn,\n                0, //          uint amountOutMin,\n                path,\n                receiver,\n                block.timestamp + 600 // 10 mins\n            );\n        }\n    }\n}\n"
    },
    "contracts/token_exchanges/AUsdc2A3CrvTokenExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../interfaces/IConnector.sol\";\n\ncontract AUsdc2A3CrvTokenExchange is ITokenExchange {\n    IConnector public curveConnector;\n    IERC20 public aUsdcToken;\n    IERC20 public a3CrvToken;\n\n    constructor(\n        address _curveConnector,\n        address _aUsdcToken,\n        address _a3CrvToken\n    ) {\n        require(_curveConnector != address(0), \"Zero address not allowed\");\n        require(_aUsdcToken != address(0), \"Zero address not allowed\");\n        require(_a3CrvToken != address(0), \"Zero address not allowed\");\n\n        curveConnector = IConnector(_curveConnector);\n        aUsdcToken = IERC20(_aUsdcToken);\n        a3CrvToken = IERC20(_a3CrvToken);\n    }\n\n    function exchange(\n        address spender,\n        IERC20 from,\n        address receiver,\n        IERC20 to,\n        uint256 amount\n    ) external override {\n        require(\n            (from == aUsdcToken && to == a3CrvToken) || (from == a3CrvToken && to == aUsdcToken),\n            \"AUsdc2A3CrvTokenExchange: Some token not compatible\"\n        );\n\n        if (amount == 0) {\n            from.transfer(spender, from.balanceOf(address(this)));\n            return;\n        }\n\n        if (from == aUsdcToken && to == a3CrvToken) {\n            //TODO: denominator usage\n            uint256 denominator = 10**(18 - IERC20Metadata(address(aUsdcToken)).decimals());\n            amount = amount / denominator;\n\n            require(\n                aUsdcToken.balanceOf(address(this)) >= amount,\n                \"AUsdc2A3CrvTokenExchange: Not enough aUsdcToken tokens\"\n            );\n\n            // check after denormilization\n            if (amount == 0) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            aUsdcToken.transfer(address(curveConnector), amount);\n            curveConnector.stake(address(aUsdcToken), amount, receiver);\n        } else {\n            //TODO: denominator usage\n            uint256 denominator = 10**(18 - IERC20Metadata(address(aUsdcToken)).decimals());\n            uint256 aUsdcAmount = amount / denominator;\n\n            require(\n                a3CrvToken.balanceOf(address(this)) >= amount,\n                \"AUsdc2A3CrvTokenExchange: Not enough a3CrvToken\"\n            );\n\n            //TODO: add check that we can withdraw more than zero by call Curve pool and get estimate\n            //      aUsdc amount for our LP tokens\n            // check after denormilization\n            if (aUsdcAmount == 0) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            try a3CrvToken.transfer(address(curveConnector), amount) {\n                try curveConnector.unstake(address(aUsdcToken), aUsdcAmount, receiver) returns (\n                    uint256 withdrewAmount\n                ) {} catch Error(string memory reason) {\n                    revert(reason);\n                } catch {\n                    revert(string(abi.encodePacked(\"curveConnector.unstake\")));\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(string(abi.encodePacked(\"a3CrvToken.transfer\")));\n            }\n\n            // uint256 a3CrvAmount = amount;\n            // require(\n            //     a3CrvToken.balanceOf(address(this)) >= a3CrvAmount,\n            //     \"AUsdc2A3CrvTokenExchange: Not enough a3CrvToken\"\n            // );\n\n            // a3CrvToken.transfer(address(curveConnector), a3CrvAmount);\n            // uint256 withdrewAmount = curveConnector.unstake(address(aUsdcToken), amount, receiver);\n\n            //TODO: may be add some checks for withdrewAmount\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/// @title Common inrterface to DeFi protocol connectors\n/// @author @Stanta\n/// @notice Every connector have to implement this function\n/// @dev Choosing of connector releasing by changing address of connector's contract\ninterface IConnector {\n    function stake(\n        address _asset,\n        uint256 _amount,\n        address _beneficiar\n    ) external;\n\n    function unstake(\n        address _asset,\n        uint256 _amount,\n        address _to\n    ) external returns (uint256);\n}\n"
    },
    "contracts/price_getters/AUsdcPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../price_getters/AbstractPriceGetter.sol\";\nimport \"../interfaces/IConnector.sol\";\n\ncontract AUsdcPriceGetter is AbstractPriceGetter {\n    function getUsdcBuyPrice() external pure override returns (uint256) {\n        return DENOMINATOR;\n    }\n\n    function getUsdcSellPrice() external pure override returns (uint256) {\n        return DENOMINATOR;\n    }\n}\n\n"
    },
    "contracts/price_getters/AbstractPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../interfaces/IPriceGetter.sol\";\n\ncontract AbstractPriceGetter is IPriceGetter {\n    uint256 public constant DENOMINATOR = 10**18;\n\n    function getUsdcBuyPrice() external view virtual override returns (uint256) {\n        return DENOMINATOR;\n    }\n\n    function getUsdcSellPrice() external view virtual override returns (uint256) {\n        return DENOMINATOR;\n    }\n\n    function denominator() external view virtual override returns (uint256) {\n        return DENOMINATOR;\n    }\n}\n"
    },
    "contracts/price_getters/WMaticPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../price_getters/AbstractPriceGetter.sol\";\nimport \"../connectors/swaps/interfaces/IUniswapV2Router02.sol\";\n\ncontract WMaticPriceGetter is AbstractPriceGetter {\n    IUniswapV2Router02 public swapRouter;\n    IERC20 public usdcToken;\n    IERC20 public wMaticToken;\n\n    constructor(\n        address _swapRouter,\n        address _usdcToken,\n        address _wMaticToken\n    ) {\n        require(_swapRouter != address(0), \"Zero address not allowed\");\n        require(_usdcToken != address(0), \"Zero address not allowed\");\n        require(_wMaticToken != address(0), \"Zero address not allowed\");\n\n        swapRouter = IUniswapV2Router02(_swapRouter);\n        usdcToken = IERC20(_usdcToken);\n        wMaticToken = IERC20(_wMaticToken);\n    }\n\n    function getUsdcBuyPrice() external view override returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(usdcToken);\n        path[1] = address(wMaticToken);\n\n        uint[] memory amountsOut = swapRouter.getAmountsOut(10**6, path);\n        // 6 + 12 + 18 - 18 = 18\n        return (amountsOut[0] * (10**12) * DENOMINATOR) / amountsOut[1];\n    }\n\n    function getUsdcSellPrice() external view override returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(wMaticToken);\n        path[1] = address(usdcToken);\n\n        uint[] memory amountsOut = swapRouter.getAmountsOut(10**18, path);\n        // 6 + 12 + 18 - 18 = 18\n        return (amountsOut[1] * (10**12) * DENOMINATOR) / amountsOut[0];\n    }\n}\n"
    },
    "contracts/price_getters/UsdcPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../price_getters/AbstractPriceGetter.sol\";\n\ncontract UsdcPriceGetter is AbstractPriceGetter {\n    function getUsdcBuyPrice() external pure override returns (uint256) {\n        return DENOMINATOR;\n    }\n\n    function getUsdcSellPrice() external pure override returns (uint256) {\n        return DENOMINATOR;\n    }\n}\n"
    },
    "contracts/price_getters/CrvPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../price_getters/AbstractPriceGetter.sol\";\nimport \"../connectors/swaps/interfaces/IUniswapV2Router02.sol\";\n\ncontract CrvPriceGetter is AbstractPriceGetter {\n    IUniswapV2Router02 public swapRouter;\n    IERC20 public usdcToken;\n    IERC20 public crvToken;\n\n    constructor(\n        address _swapRouter,\n        address _usdcToken,\n        address _crvToken\n    ) {\n        require(_swapRouter != address(0), \"Zero address not allowed\");\n        require(_usdcToken != address(0), \"Zero address not allowed\");\n        require(_crvToken != address(0), \"Zero address not allowed\");\n\n        swapRouter = IUniswapV2Router02(_swapRouter);\n        usdcToken = IERC20(_usdcToken);\n        crvToken = IERC20(_crvToken);\n    }\n\n    function getUsdcBuyPrice() external view override returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(usdcToken);\n        path[1] = address(crvToken);\n\n        uint[] memory amountsOut = swapRouter.getAmountsOut(10**6, path);\n        // 6 + 12 + 18 - 18 = 18\n        return (amountsOut[0] * (10**12) * DENOMINATOR) / amountsOut[1];\n    }\n\n    function getUsdcSellPrice() external view override returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(crvToken);\n        path[1] = address(usdcToken);\n\n        uint[] memory amountsOut = swapRouter.getAmountsOut(10**18, path);\n        // 6 + 12 + 18 - 18 = 18\n        return (amountsOut[1] * (10**12) * DENOMINATOR) / amountsOut[0];\n    }\n}\n"
    },
    "contracts/price_getters/A3CrvPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../price_getters/AbstractPriceGetter.sol\";\nimport \"../connectors/curve/interfaces/iCurvePool.sol\";\nimport \"../OwnableExt.sol\";\n\ncontract A3CrvPriceGetter is AbstractPriceGetter, OwnableExt {\n    iCurvePool public pool;\n\n    event UpdatedPool(address pool);\n\n    function setPool(address _pool) public onlyOwner {\n        require(_pool != address(0), \"Zero address not allowed\");\n        pool = iCurvePool(_pool);\n        emit UpdatedPool(_pool);\n    }\n\n    function getUsdcBuyPrice() external view override returns (uint256) {\n        uint256 virtualPrice = pool.get_virtual_price();\n        return virtualPrice;\n    }\n\n    function getUsdcSellPrice() external view override returns (uint256) {\n        uint256 virtualPrice = pool.get_virtual_price();\n        return virtualPrice;\n    }\n}\n"
    },
    "contracts/connectors/curve/interfaces/iCurvePool.sol": {
      "content": "pragma solidity >=0.8.0;\n/// @title Connector to curve->aave \n/// @notice from https://github.com/curvefi/curve-contract-polygon/blob/master/contracts/pools/aave/StableSwapAave.vy\n/// @dev check number of coins in pool and add functions  with nesessary  uint256[N_COINS]\n\ninterface iCurvePool {\n\n// def add_liquidity(_amounts: uint256[N_COINS], _min_mint_amount: uint256, _use_underlying: bool = False) -> uint256:\nfunction add_liquidity (uint[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256); //check uint[3] memory or calldata\n\n /** def remove_liquidity(\n    _amount: uint256,\n    _min_amounts: uint256[N_COINS],\n    _use_underlying: bool = False,\n) -> uint256[N_COINS]:\n */\nfunction remove_liquidity (uint256 _amounts, uint[3] memory _min_amounts, bool _use_underlying) external returns (uint256[3] memory ); //check uint[3] memory or calldata\nfunction underlying_coins (uint i ) external view returns (address);\nfunction lp_token () external view returns (address);\nfunction calc_token_amount(uint[3] memory _amounts, bool _is_deposite) external view  returns (uint256);\nfunction coins(uint256 i) external view returns (address);\nfunction get_virtual_price() external view returns (uint256);\n// StableSwap.get_dy(i: int128, j: int128, _dx: uint256) → uint256: view\nfunction get_dy(int128 i, int128 j, uint256 _dx ) external view returns (uint256);\nfunction calc_withdraw_one_coin(uint256 _amount, int128 i) external view returns (uint256);\n//remove_liquidity_one_coin(_token_amount: uint256, i: int128, _min_amount: uint256) → uint256\nfunction remove_liquidity_one_coin(uint256 _token_amount , int128 i, uint256 _min_amount) external returns  (uint256);\n// StableSwap.remove_liquidity_imbalance(_amounts: uint256[N_COINS], _max_burn_amount: uint256) → uint256\nfunction remove_liquidity_imbalance(uint[3] memory _amounts, uint256 _maxAmount ) external returns (uint256);\n}"
    },
    "contracts/price_getters/A3CrvGaugePriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../price_getters/AbstractPriceGetter.sol\";\nimport \"../price_getters/A3CrvPriceGetter.sol\";\nimport \"../interfaces/IConnector.sol\";\nimport \"../connectors/curve/interfaces/iCurvePool.sol\";\nimport \"../OwnableExt.sol\";\n\ncontract A3CrvGaugePriceGetter is AbstractPriceGetter, OwnableExt {\n    A3CrvPriceGetter public a3CrvPriceGetter;\n\n    event UpdatedA3CrvPriceGetter(address a3CrvPriceGetter);\n\n    function setA3CrvPriceGetter(address _a3CrvPriceGetter) public onlyOwner {\n        require(_a3CrvPriceGetter != address(0), \"Zero address not allowed\");\n        a3CrvPriceGetter = A3CrvPriceGetter(_a3CrvPriceGetter);\n        emit UpdatedA3CrvPriceGetter(_a3CrvPriceGetter);\n    }\n\n    function getUsdcBuyPrice() external view override returns (uint256) {\n        // a3CrvGauge is 1:1 to a3Crv\n        return a3CrvPriceGetter.getUsdcBuyPrice();\n    }\n\n    function getUsdcSellPrice() external view override returns (uint256) {\n        // a3CrvGauge is 1:1 to a3Crv\n        return a3CrvPriceGetter.getUsdcSellPrice();\n    }\n}\n"
    },
    "contracts/connectors/ConnectorCurve.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\nimport \"../interfaces/IConnector.sol\";\n\nimport \"./curve/interfaces/iCurvePool.sol\";\nimport \"./curve/interfaces/iCurveToken.sol\";\nimport \"../OwnableExt.sol\";\n\ncontract ConnectorCurve is IConnector, OwnableExt {\n    iCurvePool public pool;\n\n    event UpdatedPool(address pool);\n\n    function setPool(address _pool) public onlyOwner {\n        require(_pool != address(0), \"Zero address not allowed\");\n        pool = iCurvePool(_pool);\n        emit UpdatedPool(_pool);\n    }\n\n    function stake(\n        address _asset,\n        uint256 _amount,\n        address _beneficiar\n    ) public override {\n        uint256[3] memory amounts;\n        for (uint256 i = 0; i < 3; i++) {\n            address coin = pool.coins(i);\n            if (coin == _asset) {\n                iCurveToken(_asset).approve(address(pool), _amount);\n                // номер позиции в массиве (amounts) определяет какой актив (_asset) и в каком количестве (_amount)\n                // на стороне керва будет застейкано\n                amounts[uint256(i)] = _amount;\n                uint256 lpTok = pool.calc_token_amount(amounts, true);\n                //TODO: процентажи кудато вынести, slipage\n                uint256 retAmount = pool.add_liquidity(amounts, (lpTok * 99) / 100, false);\n                iCurveToken(pool.lp_token()).transfer(_beneficiar, retAmount);\n                // actList.changeBal(_asset, -int128(uint128(_amount)));\n\n                // actList.changeBal(pool.lp_token(), int128(uint128(retAmount)));\n\n                return;\n            } else {\n                amounts[i] = 0;\n            }\n        }\n        revert(\"can't find active for staking in pool\");\n    }\n\n    function unstake(\n        address _asset,\n        uint256 _amount,\n        address _beneficiar\n    ) public override returns (uint256) {\n        uint256[3] memory amounts;\n        for (uint256 i = 0; i < 3; i++) {\n            address coin = pool.coins(i);\n\n            if (coin == _asset) {\n                amounts[i] = _amount;\n\n                uint256 onConnectorLpTokenAmount = iCurveToken(pool.lp_token()).balanceOf(\n                    address(this)\n                );\n\n                // try pool.calc_token_amount(amounts, false) returns (uint256 lpTok) {\n                //     // uint256 lpTok = pool.calc_token_amount(amounts, false);\n\n                //     try pool.calc_withdraw_one_coin(lpTok, int128(uint128(i))) returns (\n                //         uint256 withdrAmount\n                //     ) {\n                //         require(\n                //             withdrAmount <= onConnectorLpTokenAmount,\n                //             string(\n                //                 abi.encodePacked(\n                //                     \"Not enought lpToken own \",\n                //                     \" _amount \",\n                //                     uint2str(_amount),\n                //                     \" lpTok \",\n                //                     uint2str(lpTok),\n                //                     \" onConnectorLpTokenAmount \",\n                //                     uint2str(onConnectorLpTokenAmount),\n                //                     \" withdrAmount \",\n                //                     uint2str(withdrAmount),\n                //                     \" lpToken \",\n                //                     toAsciiString(pool.lp_token())\n                //                 )\n                //             )\n                //         );\n\n                //         try iCurveToken(pool.lp_token()).approve(address(pool), lpTok) {\n                //             try\n                //                 pool.remove_liquidity_one_coin(lpTok, int128(uint128(i)), 0)\n                //             returns (uint256 retAmount) {\n                //                 // IERC20(_asset).transfer(_beneficiar, retAmount);\n                //                 // iCurveToken(pool.lp_token()).transfer(\n                //                 //     _beneficiar,\n                //                 //     iCurveToken(pool.lp_token()).balanceOf(address(this))\n                //                 // );\n\n                //                 try IERC20(_asset).transfer(_beneficiar, retAmount) {\n                //                     try\n                //                         iCurveToken(pool.lp_token()).transfer(\n                //                             _beneficiar,\n                //                             iCurveToken(pool.lp_token()).balanceOf(address(this))\n                //                         )\n                //                     {\n                //                         return retAmount;\n                //                     } catch Error(string memory reason) {\n                //                         revert(reason);\n                //                     } catch {\n                //                         revert(\"iCurveToken(pool.lp_token()).transfer\");\n                //                     }\n                //                 } catch Error(string memory reason) {\n                //                     revert(reason);\n                //                 } catch {\n                //                     revert(\"IERC20(_asset).transfer\");\n                //                 }\n                //             } catch Error(string memory reason) {\n                //                 revert(reason);\n                //             } catch {\n                //                 revert(\n                //                     string(\n                //                         abi.encodePacked(\n                //                             \"pool.remove_liquidity_one_coin \",\n                //                             \" _amount \",\n                //                             uint2str(_amount),\n                //                             \" lpTok \",\n                //                             uint2str(lpTok),\n                //                             \" withdrAmount \",\n                //                             uint2str(withdrAmount),\n                //                             \" balanceLpTok \",\n                //                             uint2str(\n                //                                 iCurveToken(pool.lp_token()).balanceOf(\n                //                                     address(this)\n                //                                 )\n                //                             )\n                //                         )\n                //                     )\n                //                 );\n                //             }\n                //         } catch Error(string memory reason) {\n                //             revert(reason);\n                //         } catch {\n                //             // revert(\"iCurveToken(pool.lp_token()).approve\");\n                //             revert(\n                //                 string(\n                //                     abi.encodePacked(\n                //                         \"piCurveToken(pool.lp_token()).approve \",\n                //                         \" _amount \",\n                //                         uint2str(_amount)\n                //                     )\n                //                 )\n                //             );\n                //         }\n                //     } catch Error(string memory reason) {\n                //         revert(reason);\n                //     } catch {\n                //         // revert(\"pool.calc_withdraw_one_coin\");\n                //         revert(\n                //             string(\n                //                 abi.encodePacked(\n                //                     \"pool.calc_withdraw_one_coin \",\n                //                     \" _amount \",\n                //                     uint2str(_amount)\n                //                 )\n                //             )\n                //         );\n                //     }\n                // } catch Error(string memory reason) {\n                //     revert(reason);\n                // } catch {\n                //     // revert(\"pool.calc_token_amount\");\n                //     revert(\n                //         string(\n                //             abi.encodePacked(\n                //                 \"pool.calc_token_amount \",\n                //                 \" _amount \",\n                //                 uint2str(_amount)\n                //             )\n                //         )\n                //     );\n                // }\n\n                uint256 lpTok = pool.calc_token_amount(amounts, false);\n                // _one_coin для возврата конкретной монеты (_assest)\n                uint256 withdrAmount = pool.calc_withdraw_one_coin(lpTok, int128(uint128(i)));\n                require(\n                    withdrAmount <= onConnectorLpTokenAmount,\n                    string(\n                        abi.encodePacked(\n                            \"Not enought lpToken own \",\n                            \" _amount \",\n                            uint2str(_amount),\n                            \" lpTok \",\n                            uint2str(lpTok),\n                            \" onConnectorLpTokenAmount \",\n                            uint2str(onConnectorLpTokenAmount),\n                            \" withdrAmount \",\n                            uint2str(withdrAmount)\n                            // ,\n                            // \" lpToken \",\n                            // toAsciiString(pool.lp_token())\n                        )\n                    )\n                );\n\n                iCurveToken(pool.lp_token()).approve(address(pool), lpTok);\n\n                //TODO: use withdrAmount?\n                uint256 retAmount = pool.remove_liquidity_one_coin(lpTok, int128(uint128(i)), 0);\n\n                IERC20(_asset).transfer(_beneficiar, retAmount);\n                iCurveToken(pool.lp_token()).transfer(\n                    _beneficiar,\n                    iCurveToken(pool.lp_token()).balanceOf(address(this))\n                );\n                return retAmount; // amounts[i];\n            } else {\n                amounts[i] = 0;\n            }\n        }\n        revert(\"can't find active for withdraw from pool\");\n    }\n\n    //TODO: remove\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            k = k - 1;\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    // //TODO: remove\n    // function toAsciiString(address x) internal pure returns (string memory) {\n    //     bytes memory s = new bytes(40);\n    //     for (uint i = 0; i < 20; i++) {\n    //         bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8 * (19 - i)))));\n    //         bytes1 hi = bytes1(uint8(b) / 16);\n    //         bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n    //         s[2 * i] = char(hi);\n    //         s[2 * i + 1] = char(lo);\n    //     }\n    //     return string(s);\n    // }\n\n    // //TODO: remove\n    // function char(bytes1 b) internal pure returns (bytes1 c) {\n    //     if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n    //     else return bytes1(uint8(b) + 0x57);\n    // }\n}\n"
    },
    "contracts/connectors/curve/interfaces/iCurveToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface iCurveToken is IERC20 {\n    function mint(address _sender, uint256 amount) external;\n\n    function burnFrom(address _sender, uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/OvernightToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\nimport \"./interfaces/IERC20MintableBurnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract OvernightToken is IERC20MintableBurnable, ERC20, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 _totalMint;\n    uint256 _totalBurn;\n\n    bytes32 public constant EXCHANGER = keccak256(\"EXCHANGER\");\n\n    EnumerableSet.AddressSet _owners;\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Restricted to admins\");\n        _;\n    }\n\n    modifier onlyExchanger() {\n        require(hasRole(EXCHANGER, msg.sender), \"Caller is not the EXCHANGER\");\n        _;\n    }\n\n    constructor() ERC20(\"OvernightToken\", \"OVN\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function mint(address _sender, uint256 _amount) external override onlyExchanger {\n        _mint(_sender, _amount);\n        _totalMint += _amount;\n    }\n\n    //TODO: check `virtual` usage\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n\n    function burn(address _sender, uint256 _amount) external override onlyExchanger {\n        _burn(_sender, _amount);\n        _totalBurn += _amount;\n    }\n\n    function totalMint() external view returns (uint256) {\n        return _totalMint;\n    }\n\n    function totalBurn() external view returns (uint256) {\n        return _totalBurn;\n    }\n\n    function ownerLength() external view returns (uint256) {\n        return _owners.length();\n    }\n\n    function ownerAt(uint256 index) external view returns (address) {\n        return _owners.at(index);\n    }\n\n    function ownerBalanceAt(uint256 index) external view returns (uint256) {\n        return balanceOf(_owners.at(index));\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _owners.add(to);\n        } else if (to == address(0)) {\n            // burn\n            if (balanceOf(from) == 0) {\n                _owners.remove(from);\n            }\n        } else {\n            // transfer\n            if (balanceOf(from) == 0) {\n                _owners.remove(from);\n            }\n            _owners.add(to);\n        }\n    }\n\n    //TODO: check `virtual` usage\n    function setExchanger(address account) external virtual onlyAdmin {\n        grantRole(EXCHANGER, account);\n    }\n\n    //TODO: check `virtual` usage and do we really need remove*\n    function removeExchanger(address account) external virtual onlyAdmin {\n        revokeRole(EXCHANGER, account);\n    }\n}\n"
    },
    "contracts/interfaces/IERC20MintableBurnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20MintableBurnable is IERC20 {\n    function mint(address _sender, uint256 amount) external;\n\n    function burn(address _sender, uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/PortfolioManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./interfaces/IPortfolioManager.sol\";\nimport \"./interfaces/IConnector.sol\";\nimport \"./interfaces/IMark2Market.sol\";\nimport \"./interfaces/IActionBuilder.sol\";\nimport \"./connectors/curve/interfaces/IRewardOnlyGauge.sol\";\nimport \"./registries/InvestmentPortfolio.sol\";\n\nimport \"./Vault.sol\";\nimport \"./Balancer.sol\";\nimport \"./interfaces/IRewardManager.sol\";\n\ncontract PortfolioManager is IPortfolioManager, AccessControl {\n    bytes32 public constant EXCHANGER = keccak256(\"EXCHANGER\");\n\n    // ---  fields\n\n    Vault public vault;\n    Balancer public balancer;\n    address public exchanger;\n    IRewardManager rewardManager;\n\n    // ---  events\n\n    //TODO: remove\n    event ConsoleLog(string str);\n\n    // ---  modifiers\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Restricted to admins\");\n        _;\n    }\n\n    modifier onlyExchanger() {\n        require(hasRole(EXCHANGER, msg.sender), \"Caller is not the EXCHANGER\");\n        _;\n    }\n\n    // ---  constructor\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    // ---  setters\n\n    function setExchanger(address _exchanger) public onlyAdmin {\n        require(_exchanger != address(0), \"Zero address not allowed\");\n        exchanger = _exchanger;\n        grantRole(EXCHANGER, exchanger);\n    }\n\n    function setVault(address _vault) external onlyAdmin {\n        require(_vault != address(0), \"Zero address not allowed\");\n        vault = Vault(_vault);\n    }\n\n    function setBalancer(address _balancer) external onlyAdmin {\n        require(_balancer != address(0), \"Zero address not allowed\");\n        balancer = Balancer(_balancer);\n    }\n\n    function setRewardManager(address _rewardManager) external onlyAdmin {\n        require(_rewardManager != address(0), \"Zero address not allowed\");\n        rewardManager = IRewardManager(_rewardManager);\n    }\n\n\n    // ---  logic\n\n    //TODO: exchange only\n    function invest(IERC20 _token, uint256 _amount) external override onlyExchanger {\n        // 1. put tokens into Vault\n        _token.transfer(address(vault), _amount);\n\n        // 2. start balancing\n        balanceOnInvest();\n    }\n\n    function balanceOnInvest() internal {\n        try balancer.buildBalanceActions() returns (\n            IActionBuilder.ExchangeAction[] memory actionOrder\n        ) {\n            //TODO: remove\n            emit ConsoleLog(string(abi.encodePacked(uint2str(actionOrder.length), \" actions\")));\n\n            // 2. execute them\n            executeActions(actionOrder);\n        } catch Error(string memory reason) {\n            // This may occur if there is an overflow with the two numbers and the `AddNumbers` contract explicitly fails with a `revert()`\n            emit ConsoleLog(reason);\n            revert(reason);\n        } catch {\n            emit ConsoleLog(\"balanceOnInvest:buildBalanceActions: No reason\");\n            revert(\"balanceOnInvest:buildBalanceActions: No reason\");\n        }\n\n        // // 1. got action to balance\n        // IActionBuilder.ExchangeAction[] memory actionOrder = balancer.buildBalanceActions();\n        // //TODO: remove\n        // emit ConsoleLog(string(abi.encodePacked(uint2str(actionOrder.length), \" actions\")));\n\n        // // 2. execute them\n        // executeActions(actionOrder);\n    }\n\n    function withdraw(IERC20 _token, uint256 _amount)\n    external\n    override\n    onlyExchanger\n    returns (uint256)\n    {\n        // 0.1 TODO: check that _token is one off used\n        // 0.2 TODO: check total balance would be in balancer where wi will correct total price, is enough?\n\n        // 1. balance to needed amount\n        balanceOnWithdraw(_token, _amount);\n\n        // 2. transfer back tokens\n        // TODO: transfer amount should be reduced by fees\n\n        //TODO: crunch to get logs, remove\n        uint256 currentBalance = _token.balanceOf(address(vault));\n        if (_amount > currentBalance) {\n            _amount = currentBalance;\n        }\n\n        require(\n            _token.balanceOf(address(vault)) >= _amount,\n            string(\n                abi.encodePacked(\n                    \"In vault not enough for transfer _amount: \",\n                    uint2str(_token.balanceOf(address(vault))),\n                    \" < \",\n                    uint2str(_amount)\n                )\n            )\n        );\n        vault.transfer(_token, msg.sender, _amount);\n\n        return _amount;\n    }\n\n    function balanceOnReward() external override onlyExchanger {\n        balanceOnInvest();\n    }\n\n    function balanceOnWithdraw(IERC20 _token, uint256 _amount) internal {\n        // 1. got action to balance\n        // try balancer.buildBalanceActions(_token, _amount) returns (\n        //     IActionBuilder.ExchangeAction[] memory actionOrder\n        // ) {\n        //     //TODO: remove\n        //     emit ConsoleLog(string(abi.encodePacked(uint2str(actionOrder.length), \" actions\")));\n\n        //     // 2. execute them\n        //     executeActions(actionOrder);\n        // } catch Error(string memory reason) {\n        //     // This may occur if there is an overflow with the two numbers and the `AddNumbers` contract explicitly fails with a `revert()`\n        //     emit ConsoleLog(reason);\n        //     revert(reason);\n        // } catch {\n        //     emit ConsoleLog(\"buildBalanceActions: No reason\");\n        //     revert(\"buildBalanceActions: No reason\");\n        // }\n\n        IActionBuilder.ExchangeAction[] memory actionOrder = balancer.buildBalanceActions(\n            _token,\n            _amount\n        );\n        //TODO: remove\n        emit ConsoleLog(string(abi.encodePacked(uint2str(actionOrder.length), \" actions\")));\n\n        // 2. execute them\n        executeActions(actionOrder);\n    }\n\n    function executeActions(IActionBuilder.ExchangeAction[] memory actionOrder) internal {\n        //TODO: remove\n        emit ConsoleLog(\n            string(abi.encodePacked(uint2str(actionOrder.length), \" actions to execute\"))\n        );\n\n        bool someActionExecuted = true;\n        while (someActionExecuted) {\n            someActionExecuted = false;\n            for (uint8 i = 0; i < actionOrder.length; i++) {\n                IActionBuilder.ExchangeAction memory action = actionOrder[i];\n                if (action.executed) {\n                    // Skip executed\n                    //TODO: remove\n                    emit ConsoleLog(\n                        string(\n                            abi.encodePacked(\n                                uint2str(i),\n                                \" Skip executed: \",\n                                uint2str(action.amount),\n                                \" from \",\n                                IERC20Metadata(address(action.from)).symbol(),\n                                \" to \",\n                                IERC20Metadata(address(action.to)).symbol()\n                            )\n                        )\n                    );\n                    continue;\n                }\n                uint256 amount = action.amount;\n                uint256 denormalizedAmount;\n                //TODO: denominator usage\n                uint256 denominator = 10 ** (18 - IERC20Metadata(address(action.from)).decimals());\n                if (action.exchangeAll) {\n                    denormalizedAmount = action.from.balanceOf(address(vault));\n                    // normalize denormalizedAmount to 10**18\n                    amount = denormalizedAmount * denominator;\n                } else {\n                    // denormalize amount from 10**18 to token decimals\n                    denormalizedAmount = amount / denominator;\n                }\n                if (amount == 0) {\n                    // Skip zero amount action\n                    //TODO: remove\n                    emit ConsoleLog(\n                        string(\n                            abi.encodePacked(\n                                uint2str(i),\n                                \" Skip zero amount action: \",\n                                uint2str(amount),\n                                \" from \",\n                                IERC20Metadata(address(action.from)).symbol(),\n                                \" to \",\n                                IERC20Metadata(address(action.to)).symbol()\n                            )\n                        )\n                    );\n                    continue;\n                }\n\n                if (action.from.balanceOf(address(vault)) < denormalizedAmount) {\n                    // Skip not enough blance for execute know\n                    //TODO: remove\n                    emit ConsoleLog(\n                        string(\n                            abi.encodePacked(\n                                uint2str(i),\n                                \" Skip not enough balance for execute know: \",\n                                uint2str(denormalizedAmount),\n                                \" from \",\n                                IERC20Metadata(address(action.from)).symbol(),\n                                \" to \",\n                                IERC20Metadata(address(action.to)).symbol(),\n                                \" current \",\n                                uint2str(action.from.balanceOf(address(vault)))\n                            )\n                        )\n                    );\n                    continue;\n                }\n\n                // move tokens to tokenExchange for executing action, amount - NOT normalized to 10**18\n                vault.transfer(action.from, address(action.tokenExchange), denormalizedAmount);\n                // execute exchange\n                try\n                action.tokenExchange.exchange(\n                    address(vault),\n                    action.from,\n                    address(vault),\n                    action.to,\n                    amount\n                )\n                {\n                    action.executed = true;\n                    //TODO: remove\n                    emit ConsoleLog(\n                        string(\n                            abi.encodePacked(\n                                uint2str(i),\n                                \" Exchange \",\n                                uint2str(amount),\n                                \" -> \",\n                                uint2str(denormalizedAmount),\n                                \" from \",\n                                IERC20Metadata(address(action.from)).symbol(),\n                                \" to \",\n                                IERC20Metadata(address(action.to)).symbol()\n                            )\n                        )\n                    );\n                } catch Error(string memory reason) {\n                    revert(\n                    string(\n                        abi.encodePacked(\n                            reason,\n                            \"\\n+ action.tokenExchange.exchange: \",\n                            uint2str(amount),\n                            \" from \",\n                            IERC20Metadata(address(action.from)).symbol(),\n                            \" to \",\n                            IERC20Metadata(address(action.to)).symbol()\n                        )\n                    )\n                    );\n                } catch {\n                    revert(\n                    string(\n                        abi.encodePacked(\n                            \"action.tokenExchange.exchange: No reason \",\n                            uint2str(amount),\n                            \" from \",\n                            IERC20Metadata(address(action.from)).symbol(),\n                            \" to \",\n                            IERC20Metadata(address(action.to)).symbol()\n                        )\n                    )\n                    );\n                }\n\n                // action.tokenExchange.exchange(\n                //     address(vault),\n                //     action.from,\n                //     address(vault),\n                //     action.to,\n                //     amount\n                // );\n                // action.executed = true;\n                //TODO: remove\n                emit ConsoleLog(\n                    string(\n                        abi.encodePacked(\n                            \"Exchange \",\n                            uint2str(amount),\n                            \" from \",\n                            IERC20Metadata(address(action.from)).symbol(),\n                            \" to \",\n                            IERC20Metadata(address(action.to)).symbol()\n                        )\n                    )\n                );\n                someActionExecuted = true;\n            }\n        }\n    }\n\n    /**\n     * Claim rewards from Curve gauge where we have staked LP tokens\n     */\n    function claimRewards() external override {\n        rewardManager.claimRewards();\n    }\n\n\n    //TODO: remove\n    function toAsciiString(address x) internal pure returns (string memory) {\n        bytes memory s = new bytes(40);\n        for (uint i = 0; i < 20; i++) {\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8 * (19 - i)))));\n            bytes1 hi = bytes1(uint8(b) / 16);\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n        return string(s);\n    }\n\n    //TODO: remove\n    function char(bytes1 b) internal pure returns (bytes1 c) {\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n        else return bytes1(uint8(b) + 0x57);\n    }\n\n    //TODO: remove\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            k = k - 1;\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n"
    },
    "contracts/interfaces/IPortfolioManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IPortfolioManager {\n    function invest(IERC20 _token, uint256 _amount) external;\n\n    function withdraw(IERC20 _token, uint256 _amount) external returns (uint256);\n\n    function balanceOnReward() external;\n\n    function claimRewards() external;\n}\n"
    },
    "contracts/Balancer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interfaces/IMark2Market.sol\";\nimport \"./interfaces/IActionBuilder.sol\";\nimport \"./interfaces/ITokenExchange.sol\";\nimport \"./token_exchanges/Usdc2AUsdcTokenExchange.sol\";\n\n//TODO: use AccessControl or Ownable from zeppelin\ncontract Balancer is AccessControl {\n    // ---  fields\n\n    IMark2Market public m2m;\n    address[] public actionBuildersInOrder;\n\n    // ---  events\n\n    //TODO: remove\n    event ConsoleLog(string str);\n\n    // ---  modifiers\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Restricted to admins\");\n        _;\n    }\n\n    // ---  constructor\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    // ---  setters\n\n    function setMark2Market(address _m2m) external onlyAdmin {\n        require(_m2m != address(0), \"Zero address not allowed\");\n        m2m = IMark2Market(_m2m);\n    }\n\n    function setActionBuilders(address[] calldata _actionBuildersInOrder) external onlyAdmin {\n        for (uint8 i = 0; i < _actionBuildersInOrder.length; i++) {\n            _addActionBuilderAt(_actionBuildersInOrder[i], i);\n        }\n        // truncate array if needed\n        if (actionBuildersInOrder.length > _actionBuildersInOrder.length) {\n            uint256 removeCount = actionBuildersInOrder.length - _actionBuildersInOrder.length;\n            for (uint8 i = 0; i < removeCount; i++) {\n                actionBuildersInOrder.pop();\n            }\n        }\n    }\n\n    function addActionBuilderAt(address actionBuilder, uint256 index) external onlyAdmin {\n        _addActionBuilderAt(actionBuilder, index);\n    }\n\n    function _addActionBuilderAt(address actionBuilder, uint256 index) internal {\n        uint256 currentlength = actionBuildersInOrder.length;\n        // expand array id needed\n        if (currentlength == 0 || currentlength - 1 < index) {\n            uint256 additionalCount = index - currentlength + 1;\n            for (uint8 i = 0; i < additionalCount; i++) {\n                actionBuildersInOrder.push();\n            }\n        }\n        actionBuildersInOrder[index] = actionBuilder;\n    }\n\n    // ---  logic\n\n    function buildBalanceActions() public returns (IActionBuilder.ExchangeAction[] memory) {\n        // Same to zero withdrawal balance\n        return buildBalanceActions(IERC20(address(0)), 0);\n    }\n\n    function buildBalanceActions(IERC20 withdrawToken, uint256 withdrawAmount)\n        public\n        returns (IActionBuilder.ExchangeAction[] memory)\n    {\n        try m2m.assetPricesForBalance(address(withdrawToken), withdrawAmount) returns (\n            IMark2Market.TotalAssetPrices memory assetPrices\n        ) {\n            // // 1. get current prices from M2M\n            // IMark2Market.TotalAssetPrices memory assetPrices = m2m.assetPricesForBalance(\n            //     address(withdrawToken),\n            //     withdrawAmount\n            // );\n\n            // 2. calc total price\n            uint256 totalUsdcPrice = assetPrices.totalUsdcPrice;\n\n            //TODO: remove\n            log(\"totalUsdcPrice: \", totalUsdcPrice);\n\n            // 3. make actions\n            IActionBuilder.ExchangeAction[]\n                memory actionOrder = new IActionBuilder.ExchangeAction[](\n                    actionBuildersInOrder.length\n                );\n            //TODO: remove\n            log(\"actionBuildersInOrder.length: \", actionBuildersInOrder.length);\n\n            for (uint8 i = 0; i < actionBuildersInOrder.length; i++) {\n                try\n                    IActionBuilder(actionBuildersInOrder[i]).buildAction(assetPrices, actionOrder)\n                returns (IActionBuilder.ExchangeAction memory action) {\n                    actionOrder[i] = action;\n                } catch Error(string memory reason) {\n                    revert(\n                        string(\n                            abi.encodePacked(\n                                uint2str(i),\n                                \" \",\n                                reason,\n                                \"| IActionBuilder.buildAction: code: \",\n                                IActionBuilder(actionBuildersInOrder[i]).getActionCode()\n                            )\n                        )\n                    );\n                } catch {\n                    revert(\n                        string(\n                            abi.encodePacked(\n                                uint2str(i),\n                                \"| IActionBuilder.buildAction: code: \",\n                                IActionBuilder(actionBuildersInOrder[i]).getActionCode()\n                            )\n                        )\n                    );\n                }\n\n                // IActionBuilder.ExchangeAction memory action = IActionBuilder(actionBuildersInOrder[i])\n                //     .buildAction(assetPrices, actionOrder);\n                // actionOrder[i] = action;\n            }\n            //TODO: remove\n            log(\"actionOrder.length: \", actionOrder.length);\n\n            return actionOrder;\n        } catch Error(string memory reason) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        reason,\n                        \"| m2m.assetPricesForBalance: No reason \",\n                        \" withdrawToken \",\n                        toAsciiString(address(withdrawToken)),\n                        \" withdrawAmount \",\n                        uint2str(withdrawAmount)\n                    )\n                )\n            );\n        } catch {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"m2m.assetPricesForBalance: No reason \",\n                        \" withdrawToken \",\n                        toAsciiString(address(withdrawToken)),\n                        \" withdrawAmount \",\n                        uint2str(withdrawAmount)\n                    )\n                )\n            );\n        }\n\n        // // 1. get current prices from M2M\n        // IMark2Market.TotalAssetPrices memory assetPrices = m2m.assetPricesForBalance(\n        //     address(withdrawToken),\n        //     withdrawAmount\n        // );\n\n        // // 2. calc total price\n        // uint256 totalUsdcPrice = assetPrices.totalUsdcPrice;\n\n        // //TODO: remove\n        // log(\"totalUsdcPrice: \", totalUsdcPrice);\n\n        // // 3. make actions\n        // IActionBuilder.ExchangeAction[]\n        //     memory actionOrder = new IActionBuilder.ExchangeAction[](\n        //         actionBuildersInOrder.length\n        //     );\n        // //TODO: remove\n        // log(\"actionBuildersInOrder.length: \", actionBuildersInOrder.length);\n\n        // for (uint8 i = 0; i < actionBuildersInOrder.length; i++) {\n        //     IActionBuilder.ExchangeAction memory action = IActionBuilder(actionBuildersInOrder[i])\n        //         .buildAction(assetPrices, actionOrder);\n        //     actionOrder[i] = action;\n        // }\n        // //TODO: remove\n        // log(\"actionOrder.length: \", actionOrder.length);\n\n        // return actionOrder;\n    }\n\n    //TODO: remove\n    function log(string memory message, uint value) internal {\n        emit ConsoleLog(string(abi.encodePacked(message, uint2str(value))));\n    }\n\n    //TODO: remove\n    function toAsciiString(address x) internal pure returns (string memory) {\n        bytes memory s = new bytes(40);\n        for (uint i = 0; i < 20; i++) {\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8 * (19 - i)))));\n            bytes1 hi = bytes1(uint8(b) / 16);\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n        return string(s);\n    }\n\n    //TODO: remove\n    function char(bytes1 b) internal pure returns (bytes1 c) {\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n        else return bytes1(uint8(b) + 0x57);\n    }\n\n    //TODO: remove\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            k = k - 1;\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n"
    },
    "contracts/token_exchanges/Usdc2AUsdcTokenExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../interfaces/IConnector.sol\";\n\ncontract Usdc2AUsdcTokenExchange is ITokenExchange {\n    IConnector public aaveConnector;\n    IERC20 public usdcToken;\n    IERC20 public aUsdcToken;\n\n    constructor(\n        address _aaveConnector,\n        address _usdcToken,\n        address _aUsdcToken\n    ) {\n        require(_aaveConnector != address(0), \"Zero address not allowed\");\n        require(_usdcToken != address(0), \"Zero address not allowed\");\n        require(_aUsdcToken != address(0), \"Zero address not allowed\");\n\n        aaveConnector = IConnector(_aaveConnector);\n        usdcToken = IERC20(_usdcToken);\n        aUsdcToken = IERC20(_aUsdcToken);\n    }\n\n    function exchange(\n        address spender,\n        IERC20 from,\n        address receiver,\n        IERC20 to,\n        uint256 amount\n    ) external override {\n        require(\n            (from == usdcToken && to == aUsdcToken) || (from == aUsdcToken && to == usdcToken),\n            \"Usdc2AUsdcTokenExchange: Some token not compatible\"\n        );\n\n        if (amount == 0) {\n            from.transfer(spender, from.balanceOf(address(this)));\n            return;\n        }\n\n        if (from == usdcToken && to == aUsdcToken) {\n            //TODO: denominator usage\n            uint256 denominator = 10**(18 - IERC20Metadata(address(usdcToken)).decimals());\n            amount = amount / denominator;\n\n            require(\n                usdcToken.balanceOf(address(this)) >= amount,\n                \"Usdc2AUsdcTokenExchange: Not enough usdcToken\"\n            );\n\n            // check after denormilization\n            if (amount == 0) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            usdcToken.transfer(address(aaveConnector), amount);\n            aaveConnector.stake(address(usdcToken), amount, receiver);\n        } else {\n            //TODO: denominator usage\n            uint256 denominator = 10**(18 - IERC20Metadata(address(aUsdcToken)).decimals());\n            amount = amount / denominator;\n\n            require(\n                aUsdcToken.balanceOf(address(this)) >= amount,\n                \"Usdc2AUsdcTokenExchange: Not enough aUsdcToken\"\n            );\n\n            // check after denormilization\n            if (amount == 0) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            aUsdcToken.transfer(address(aaveConnector), amount);\n            uint256 withdrewAmount = aaveConnector.unstake(address(usdcToken), amount, receiver);\n\n            //TODO: may be add some checks for withdrewAmount\n        }\n    }\n}\n"
    },
    "contracts/token_exchanges/A3Crv2A3CrvGaugeTokenExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../connectors/curve/interfaces/IRewardOnlyGauge.sol\";\n\ncontract A3Crv2A3CrvGaugeTokenExchange is ITokenExchange {\n    IRewardOnlyGauge public rewardGauge;\n    IERC20 public a3CrvToken;\n    IERC20 public a3CrvGaugeToken;\n\n    constructor(address _curveGauge) {\n        require(_curveGauge != address(0), \"Zero address not allowed\");\n\n        rewardGauge = IRewardOnlyGauge(_curveGauge);\n        a3CrvToken = IERC20(rewardGauge.lp_token());\n        a3CrvGaugeToken = IERC20(_curveGauge);\n    }\n\n    function exchange(\n        address spender,\n        IERC20 from,\n        address receiver,\n        IERC20 to,\n        uint256 amount\n    ) external override {\n        require(\n            (from == a3CrvToken && to == a3CrvGaugeToken) ||\n                (from == a3CrvGaugeToken && to == a3CrvToken),\n            \"A3Crv2A3CrvGaugeTokenExchange: Some token not compatible\"\n        );\n\n        if (amount == 0) {\n            from.transfer(spender, from.balanceOf(address(this)));\n            return;\n        }\n\n        if (from == a3CrvToken && to == a3CrvGaugeToken) {\n            //TODO: denominator usage\n            uint256 denominator = 10**(18 - IERC20Metadata(address(a3CrvToken)).decimals());\n            amount = amount / denominator;\n\n            require(\n                a3CrvToken.balanceOf(address(this)) >= amount,\n                \"A3Crv2A3CrvGaugeTokenExchange: Not enough a3CrvToken\"\n            );\n\n            // check after denormilization\n            if (amount == 0) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            // gauge need approve on deposit cause by transferFrom inside deposit\n            a3CrvToken.approve(address(rewardGauge), amount);\n            rewardGauge.deposit(amount, receiver, false);\n        } else {\n            //TODO: denominator usage\n            uint256 denominator = 10**(18 - IERC20Metadata(address(a3CrvGaugeToken)).decimals());\n            amount = amount / denominator;\n\n            require(\n                a3CrvGaugeToken.balanceOf(address(this)) >= amount,\n                \"A3Crv2A3CrvGaugeTokenExchange: Not enough a3CrvGaugeToken\"\n            );\n\n            // check after denormilization\n            if (amount == 0) {\n                from.transfer(spender, from.balanceOf(address(this)));\n                return;\n            }\n\n            // gauge doesn't need approve on withdraw, but we should have amount token\n            // on tokenExchange\n            rewardGauge.withdraw(amount, false);\n            require(\n                a3CrvToken.balanceOf(address(this)) >= amount,\n                \"A3Crv2A3CrvGaugeTokenExchange: Not enough a3CrvToken after withdraw\"\n            );\n            // reward gauge transfer tokens to msg.sender, so transfer to receiver\n            a3CrvToken.transfer(receiver, a3CrvToken.balanceOf(address(this)));\n        }\n    }\n}\n"
    },
    "contracts/tests/USDCtest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract USDCtest is ERC20 {\n    constructor() ERC20(\"USDCtest\", \"USDC\") {\n        _mint(msg.sender, 10**24);\n    }\n}\n"
    },
    "contracts/tests/aUSDCtest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract aUSDCtest is ERC20 {\n    constructor() ERC20(\"aUSDCtest\", \"aUSDC\") {\n        _mint(msg.sender, 10**24);\n    }\n}\n"
    },
    "contracts/DAItest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract DAItest is ERC20 {\n    constructor() ERC20(\"DAItest\", \"DAI\") {\n        _mint(msg.sender, 10**24);\n    }\n}\n"
    },
    "contracts/action_builders/WMatic2UsdcActionBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../interfaces/IActionBuilder.sol\";\nimport \"../interfaces/IMark2Market.sol\";\n\ncontract WMatic2UsdcActionBuilder is IActionBuilder {\n    bytes32 constant ACTION_CODE = keccak256(\"WMatic2Usdc\");\n\n    ITokenExchange public tokenExchange;\n    IERC20 public usdcToken;\n    IERC20 public wMaticToken;\n\n    constructor(\n        address _tokenExchange,\n        address _usdcToken,\n        address _wMaticToken\n    ) {\n        require(_tokenExchange != address(0), \"Zero address not allowed\");\n        require(_usdcToken != address(0), \"Zero address not allowed\");\n        require(_wMaticToken != address(0), \"Zero address not allowed\");\n\n        tokenExchange = ITokenExchange(_tokenExchange);\n        usdcToken = IERC20(_usdcToken);\n        wMaticToken = IERC20(_wMaticToken);\n    }\n\n    function getActionCode() external pure override returns (bytes32) {\n        return ACTION_CODE;\n    }\n\n    function buildAction(\n        IMark2Market.TotalAssetPrices memory totalAssetPrices,\n        ExchangeAction[] memory actions\n    ) external view override returns (ExchangeAction memory) {\n        IMark2Market.AssetPrices[] memory assetPrices = totalAssetPrices.assetPrices;\n\n        // get diff from iteration over prices because can't use mapping in memory params to external functions\n        IMark2Market.AssetPrices memory wMaticPrices;\n        IMark2Market.AssetPrices memory usdcPrices;\n        for (uint8 i = 0; i < assetPrices.length; i++) {\n            if (assetPrices[i].asset == address(wMaticToken)) {\n                wMaticPrices = assetPrices[i];\n                continue;\n            }\n            if (assetPrices[i].asset == address(usdcToken)) {\n                usdcPrices = assetPrices[i];\n                continue;\n            }\n        }\n\n        // because we know that wMatic is leaf in tree and we can use this value\n        uint256 diff = wMaticPrices.diffToTarget;\n\n        IERC20 from;\n        IERC20 to;\n        bool targetIsZero;\n        if (wMaticPrices.targetIsZero || wMaticPrices.diffToTargetSign < 0) {\n            from = wMaticToken;\n            to = usdcToken;\n            targetIsZero = wMaticPrices.targetIsZero;\n        } else {\n            from = usdcToken;\n            to = wMaticToken;\n            targetIsZero = usdcPrices.targetIsZero;\n        }\n\n        ExchangeAction memory action = ExchangeAction(\n            tokenExchange,\n            ACTION_CODE,\n            from,\n            to,\n            diff,\n            targetIsZero,\n            false\n        );\n\n        return action;\n    }\n}\n"
    },
    "contracts/action_builders/Usdc2AUsdcActionBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../interfaces/IActionBuilder.sol\";\nimport \"../interfaces/IMark2Market.sol\";\n\ncontract Usdc2AUsdcActionBuilder is IActionBuilder {\n    bytes32 constant ACTION_CODE = keccak256(\"Usc2AUsdc\");\n\n    ITokenExchange public tokenExchange;\n    IERC20 public usdcToken;\n    IERC20 public aUsdcToken;\n\n    constructor(\n        address _tokenExchange,\n        address _usdcToken,\n        address _aUsdcToken\n    ) {\n        require(_tokenExchange != address(0), \"Zero address not allowed\");\n        require(_usdcToken != address(0), \"Zero address not allowed\");\n        require(_aUsdcToken != address(0), \"Zero address not allowed\");\n\n        tokenExchange = ITokenExchange(_tokenExchange);\n        usdcToken = IERC20(_usdcToken);\n        aUsdcToken = IERC20(_aUsdcToken);\n    }\n\n    function getActionCode() external pure override returns (bytes32) {\n        return ACTION_CODE;\n    }\n\n    function buildAction(\n        IMark2Market.TotalAssetPrices memory totalAssetPrices,\n        ExchangeAction[] memory actions\n    ) external view override returns (ExchangeAction memory) {\n        IMark2Market.AssetPrices[] memory assetPrices = totalAssetPrices.assetPrices;\n\n        // get diff from iteration over prices because can't use mapping in memory params to external functions\n        IMark2Market.AssetPrices memory usdcPrices;\n        IMark2Market.AssetPrices memory aUsdcPrices;\n        for (uint8 i = 0; i < assetPrices.length; i++) {\n            if (assetPrices[i].asset == address(usdcToken)) {\n                usdcPrices = assetPrices[i];\n                continue;\n            }\n            if (assetPrices[i].asset == address(aUsdcToken)) {\n                aUsdcPrices = assetPrices[i];\n                continue;\n            }\n        }\n\n        // because we know that usdc is leaf in tree and we can use this value\n        uint256 diff = usdcPrices.diffToTarget;\n\n        IERC20 from;\n        IERC20 to;\n        bool targetIsZero;\n        if (usdcPrices.targetIsZero || usdcPrices.diffToTargetSign < 0) {\n            from = usdcToken;\n            to = aUsdcToken;\n            targetIsZero = usdcPrices.targetIsZero;\n        } else {\n            from = aUsdcToken;\n            to = usdcToken;\n            targetIsZero = aUsdcPrices.targetIsZero;\n        }\n\n        ExchangeAction memory action = ExchangeAction(\n            tokenExchange,\n            ACTION_CODE,\n            from,\n            to,\n            diff,\n            targetIsZero,\n            false\n        );\n\n        return action;\n    }\n}\n"
    },
    "contracts/action_builders/Crv2UsdcActionBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../interfaces/IActionBuilder.sol\";\nimport \"../interfaces/IMark2Market.sol\";\n\ncontract Crv2UsdcActionBuilder is IActionBuilder {\n    bytes32 constant ACTION_CODE = keccak256(\"Crv2Usdc\");\n\n    ITokenExchange public tokenExchange;\n    IERC20 public usdcToken;\n    IERC20 public crvToken;\n\n    constructor(\n        address _tokenExchange,\n        address _usdcToken,\n        address _crvToken\n    ) {\n        require(_tokenExchange != address(0), \"Zero address not allowed\");\n        require(_usdcToken != address(0), \"Zero address not allowed\");\n        require(_crvToken != address(0), \"Zero address not allowed\");\n\n        tokenExchange = ITokenExchange(_tokenExchange);\n        usdcToken = IERC20(_usdcToken);\n        crvToken = IERC20(_crvToken);\n    }\n\n    function getActionCode() external pure override returns (bytes32) {\n        return ACTION_CODE;\n    }\n\n    function buildAction(\n        IMark2Market.TotalAssetPrices memory totalAssetPrices,\n        ExchangeAction[] memory actions\n    ) external view override returns (ExchangeAction memory) {\n        IMark2Market.AssetPrices[] memory assetPrices = totalAssetPrices.assetPrices;\n\n        // get diff from iteration over prices because can't use mapping in memory params to external functions\n        IMark2Market.AssetPrices memory wMaticPrices;\n        IMark2Market.AssetPrices memory usdcPrices;\n        for (uint8 i = 0; i < assetPrices.length; i++) {\n            if (assetPrices[i].asset == address(crvToken)) {\n                wMaticPrices = assetPrices[i];\n                continue;\n            }\n            if (assetPrices[i].asset == address(usdcToken)) {\n                usdcPrices = assetPrices[i];\n                continue;\n            }\n        }\n\n        // because we know that wMatic is leaf in tree and we can use this value\n        uint256 diff = wMaticPrices.diffToTarget;\n\n        IERC20 from;\n        IERC20 to;\n        bool targetIsZero;\n        if (wMaticPrices.targetIsZero || wMaticPrices.diffToTargetSign < 0) {\n            from = crvToken;\n            to = usdcToken;\n            targetIsZero = wMaticPrices.targetIsZero;\n        } else {\n            from = usdcToken;\n            to = crvToken;\n            targetIsZero = usdcPrices.targetIsZero;\n        }\n\n        ExchangeAction memory action = ExchangeAction(\n            tokenExchange,\n            ACTION_CODE,\n            from,\n            to,\n            diff,\n            targetIsZero,\n            false\n        );\n\n        return action;\n    }\n}\n"
    },
    "contracts/action_builders/AUsdc2A3CrvActionBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ITokenExchange.sol\";\nimport \"../interfaces/IActionBuilder.sol\";\nimport \"../interfaces/IMark2Market.sol\";\n\ncontract AUsdc2A3CrvActionBuilder is IActionBuilder {\n    bytes32 constant ACTION_CODE = keccak256(\"AUsdc2A3Crv\");\n\n    ITokenExchange public tokenExchange;\n    IERC20 public aUsdcToken;\n    IERC20 public a3CrvToken;\n    IActionBuilder public usdc2AUsdcActionBuilder;\n\n    constructor(\n        address _tokenExchange,\n        address _aUsdcToken,\n        address _a3CrvToken,\n        address _usdc2AUsdcActionBuilder\n    ) {\n        require(_tokenExchange != address(0), \"Zero address not allowed\");\n        require(_aUsdcToken != address(0), \"Zero address not allowed\");\n        require(_a3CrvToken != address(0), \"Zero address not allowed\");\n        require(_usdc2AUsdcActionBuilder != address(0), \"Zero address not allowed\");\n\n        tokenExchange = ITokenExchange(_tokenExchange);\n        aUsdcToken = IERC20(_aUsdcToken);\n        a3CrvToken = IERC20(_a3CrvToken);\n        usdc2AUsdcActionBuilder = IActionBuilder(_usdc2AUsdcActionBuilder);\n    }\n\n    function getActionCode() external pure override returns (bytes32) {\n        return ACTION_CODE;\n    }\n\n    function buildAction(\n        IMark2Market.TotalAssetPrices memory totalAssetPrices,\n        ExchangeAction[] memory actions\n    ) external view override returns (ExchangeAction memory) {\n        IMark2Market.AssetPrices[] memory assetPrices = totalAssetPrices.assetPrices;\n\n        // get diff from iteration over prices because can't use mapping in memory params to external functions\n        IMark2Market.AssetPrices memory aUsdcPrices;\n        IMark2Market.AssetPrices memory a3CrvPrices;\n        for (uint8 i = 0; i < assetPrices.length; i++) {\n            if (assetPrices[i].asset == address(aUsdcToken)) {\n                aUsdcPrices = assetPrices[i];\n                continue;\n            }\n            if (assetPrices[i].asset == address(a3CrvToken)) {\n                a3CrvPrices = assetPrices[i];\n                continue;\n            }\n        }\n\n        // get diffUsdc2AUsdc to correct current diff\n        ExchangeAction memory usdc2AUsdcAction;\n        bytes32 usdc2AUsdcActionCode = usdc2AUsdcActionBuilder.getActionCode();\n        bool foundDependencyAction = false;\n        for (uint8 i = 0; i < actions.length; i++) {\n            // here we need USDC diff to make action right\n            if (actions[i].code == usdc2AUsdcActionCode) {\n                usdc2AUsdcAction = actions[i];\n                foundDependencyAction = true;\n                break;\n            }\n        }\n        require(foundDependencyAction, \"Required action not in action list, check calc ordering\");\n\n        // use aUsdc diff to start calc diff\n        uint256 diff = aUsdcPrices.diffToTarget;\n        int8 sign = aUsdcPrices.diffToTargetSign;\n\n        // correct diff value by usdc2AUsdc diff\n        if (address(aUsdcToken) == address(usdc2AUsdcAction.to)) {\n            // if in action move aUsdc->usdc then we should decrease diff (sub)\n            (diff, sign) = unsignSub(diff, sign, usdc2AUsdcAction.amount);\n        } else {\n            // if in action move usdc->aUsdc then we should encrease diff (add)\n            (diff, sign) = unsignAdd(diff, sign, usdc2AUsdcAction.amount);\n        }\n\n        IERC20 from;\n        IERC20 to;\n        bool targetIsZero;\n        //TODO: need to define needed of usage for targetIsZero\n        if (sign < 0) {\n            from = aUsdcToken;\n            to = a3CrvToken;\n            targetIsZero = aUsdcPrices.targetIsZero;\n        } else {\n            from = a3CrvToken;\n            to = aUsdcToken;\n            targetIsZero = a3CrvPrices.targetIsZero;\n        }\n\n        ExchangeAction memory action = ExchangeAction(\n            tokenExchange,\n            ACTION_CODE,\n            from,\n            to,\n            diff,\n            targetIsZero,\n            false\n        );\n\n        return action;\n    }\n\n    function unsignAdd(\n        uint256 value,\n        int8 sign,\n        uint256 addAmount\n    ) internal pure returns (uint256, int8) {\n        int8 resSign = sign;\n        if (sign < 0) {\n            if (value > addAmount) {\n                value = value - addAmount;\n            } else {\n                value = addAmount - value;\n                resSign = int8(1);\n            }\n        } else {\n            value = value + addAmount;\n        }\n        return (value, resSign);\n    }\n\n    function unsignSub(\n        uint256 value,\n        int8 sign,\n        uint256 subAmount\n    ) internal pure returns (uint256, int8) {\n        int8 resSign = sign;\n        if (sign > 0) {\n            if (value > subAmount) {\n                value = value - subAmount;\n            } else {\n                value = subAmount - value;\n                resSign = int8(-1);\n            }\n        } else {\n            value = value + subAmount;\n        }\n        return (value, resSign);\n    }\n}\n"
    },
    "contracts/Exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interfaces/IERC20MintableBurnable.sol\";\nimport \"./interfaces/IConnector.sol\";\nimport \"./OvernightToken.sol\";\nimport \"./interfaces/IPortfolioManager.sol\";\nimport \"./PortfolioManager.sol\";\nimport \"./interfaces/IMark2Market.sol\";\n\ncontract Exchange is AccessControl {\n    OvernightToken public ovn;\n    IERC20 public usdc;\n    PortfolioManager public pm; //portfolio manager contract\n    IMark2Market public m2m;\n\n    uint256 public buyFee = 40;\n    uint256 public buyFeeDenominator = 100000; // ~ 100 %\n\n    uint256 public redeemFee = 40;\n    uint256 public redeemFeeDenominator = 100000; // ~ 100 %\n\n    event EventExchange(string label, uint256 amount, uint256 fee, address sender);\n    event RewardEvent(\n        uint256 totalOvn,\n        uint256 totalUsdc,\n        uint256 totallyAmountRewarded,\n        uint256 totallySaved\n    );\n    event NoEnoughForRewardEvent(uint256 totalOvn, uint256 totalUsdc);\n    event UpdatedBuyFee(uint256 fee, uint256 feeDenominator);\n    event UpdatedRedeemFee(uint256 fee, uint256 feeDenominator);\n    event PaidBuyFee(uint256 amount, uint256 feeAmount);\n    event PaidRedeemFee(uint256 amount, uint256 feeAmount);\n\n    modifier onlyAdmin() {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Restricted to admins\");\n        _;\n    }\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function setTokens(address _ovn, address _usdc) external onlyAdmin {\n        require(_ovn != address(0), \"Zero address not allowed\");\n        require(_usdc != address(0), \"Zero address not allowed\");\n        ovn = OvernightToken(_ovn);\n        usdc = IERC20(_usdc);\n    }\n\n    function setAddr(address _addrPM, address _addrM2M) external onlyAdmin {\n        require(_addrPM != address(0), \"Zero address not allowed\");\n        require(_addrM2M != address(0), \"Zero address not allowed\");\n        pm = PortfolioManager(_addrPM);\n        m2m = IMark2Market(_addrM2M);\n    }\n\n    function setBuyFee(uint256 _fee, uint256 _feeDenominator) external onlyAdmin {\n        require(_feeDenominator != 0, \"Zero denominator not allowed\");\n        buyFee = _fee;\n        buyFeeDenominator = _feeDenominator;\n        emit UpdatedBuyFee(buyFee, buyFeeDenominator);\n    }\n\n    function setRedeemFee(uint256 _fee, uint256 _feeDenominator) external onlyAdmin {\n        require(_feeDenominator != 0, \"Zero denominator not allowed\");\n        redeemFee = _fee;\n        redeemFeeDenominator = _feeDenominator;\n        emit UpdatedBuyFee(redeemFee, redeemFeeDenominator);\n    }\n\n    function balance() public view returns (uint256) {\n        return ovn.balanceOf(msg.sender);\n    }\n\n    function buy(address _addrTok, uint256 _amount) external {\n        require(_addrTok == address(usdc), \"Only USDC tokens currently available for buy\");\n\n        uint256 balance = IERC20(_addrTok).balanceOf(msg.sender);\n        require(balance >= _amount, \"Not enough tokens to buy\");\n\n        IERC20(_addrTok).transferFrom(msg.sender, address(this), _amount);\n\n        uint256 buyFeeAmount = (_amount * buyFee) / buyFeeDenominator;\n        uint256 buyAmount = _amount - buyFeeAmount;\n        emit PaidBuyFee(buyAmount, buyFeeAmount);\n\n        emit EventExchange(\"buy\", buyAmount, buyFeeAmount, msg.sender);\n\n    ovn.mint(msg.sender, buyAmount);\n\n        IERC20(_addrTok).transfer(address(pm), _amount);\n        pm.invest(IERC20(_addrTok), _amount);\n    }\n\n    event ErrorLogging(string reason);\n\n    function redeem(address _addrTok, uint256 _amount) external {\n        require(_addrTok == address(usdc), \"Only USDC tokens currently available for redeem\");\n\n        uint256 redeemFeeAmount = (_amount * redeemFee) / redeemFeeDenominator;\n        uint256 redeemAmount = _amount - redeemFeeAmount;\n        emit PaidRedeemFee(redeemAmount, redeemFeeAmount);\n\n        emit EventExchange(\"redeem\", redeemAmount, redeemFeeAmount, msg.sender);\n\n        //TODO: Real unstacke amount may be different to _amount\n\n        // try PM.withdraw(IERC20(_addrTok), _amount) returns (uint256 unstakedAmount) {\n\n        //     // Or just burn from sender\n        //     ovn.burn(msg.sender, _amount);\n\n        //     // TODO: correct amount by rates or oracles\n        //     // TODO: check threshhold limits to withdraw deposite\n        //     IERC20(_addrTok).transfer(msg.sender, unstakedAmount);\n\n        // } catch Error(string memory reason) {\n        //     // This may occur if there is an overflow with the two numbers and the `AddNumbers` contract explicitly fails with a `revert()`\n        //     emit ErrorLogging(reason);\n        // } catch {\n        //     emit ErrorLogging(\"No reason\");\n        //     // revert (string(buf.buf));\n        // }\n\n        uint256 unstakedAmount = pm.withdraw(IERC20(_addrTok), redeemAmount);\n\n        // Or just burn from sender\n        ovn.burn(msg.sender, _amount);\n\n        // TODO: correct amount by rates or oracles\n        // TODO: check threshhold limits to withdraw deposite\n        require(\n            IERC20(_addrTok).balanceOf(address(this)) >= unstakedAmount,\n            \"Not enough for transfer unstakedAmount\"\n        );\n        IERC20(_addrTok).transfer(msg.sender, unstakedAmount);\n    }\n\n    function reward() external onlyAdmin {\n        // 0. call claiming reward and rebalancing on PM TODO: may be need move to another place\n        // 1. get current amount of OVN\n        // 2. get total sum of USDC we can get from any source\n        // 3. calc difference between total count of OVN and USDC\n        // 4. go through all OVN owners and mint to their addresses proportionally OVN\n\n        pm.claimRewards();\n        pm.balanceOnReward();\n\n        uint256 totalOvnSupply = ovn.totalSupply();\n        IMark2Market.TotalAssetPrices memory assetPrices = m2m.assetPricesForBalance();\n        uint256 totalUsdc = assetPrices.totalUsdcPrice;\n        // denormilize from 10**18 to 10**6 as OVN decimals\n        totalUsdc = totalUsdc / 10**12;\n        if (totalUsdc <= totalOvnSupply) {\n            emit NoEnoughForRewardEvent(totalOvnSupply, totalUsdc);\n            return;\n        }\n        uint difference = totalUsdc - totalOvnSupply;\n\n        uint totallyAmountRewarded = 0;\n        for (uint8 i = 0; i < ovn.ownerLength(); i++) {\n            address ovnOwnerAddress = ovn.ownerAt(i);\n            uint ovnBalance = ovn.balanceOf(ovnOwnerAddress);\n            uint additionalMintAmount = (ovnBalance * difference) / totalOvnSupply;\n            if (additionalMintAmount > 0) {\n                ovn.mint(ovnOwnerAddress, additionalMintAmount);\n                totallyAmountRewarded += additionalMintAmount;\n            }\n        }\n        //TODO: what to do with saved usdc? Do we need to mint it to PM\n\n        emit RewardEvent(\n            totalOvnSupply,\n            totalUsdc,\n            totallyAmountRewarded,\n            difference - totallyAmountRewarded\n        );\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len;\n        while (_i != 0) {\n            k = k - 1;\n            bstr[k] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n"
    },
    "contracts/connectors/ConnectorAAVE.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0 <0.9.0;\nimport \"../interfaces/IConnector.sol\";\nimport \"./aave/interfaces/ILendingPool.sol\";\nimport \"./aave/interfaces/ILendingPoolAddressesProvider.sol\";\nimport \"./aave/interfaces/IPriceOracleGetter.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {WadRayMath} from \"./aave/libraries/math/WadRayMath.sol\";\n\nimport \"../OwnableExt.sol\";\n\ncontract ConnectorAAVE is IConnector, OwnableExt {\n    using WadRayMath for uint256;\n    ILendingPoolAddressesProvider public lpap;\n    \n    event UpdatedLpap(address lpap);\n\n    function setLpap(address _lpap) public onlyOwner {\n        require(_lpap != address(0), \"Zero address not allowed\");\n        lpap = ILendingPoolAddressesProvider(_lpap);\n        emit UpdatedLpap(_lpap);\n    }\n\n    function stake(\n        address _asset,\n        uint256 _amount,\n        address _beneficiar\n    ) public override {\n        ILendingPool pool = ILendingPool(lpap.getLendingPool());\n        IERC20(_asset).approve(address(pool), _amount);\n        pool.deposit(_asset, _amount, _beneficiar, 0);\n    }\n\n    function unstake(\n        address _asset,\n        uint256 _amount,\n        address _to\n    ) public override returns (uint256) {\n        ILendingPool pool = ILendingPool(lpap.getLendingPool());\n\n        uint256 w = pool.withdraw(_asset, _amount, _to);\n        DataTypes.ReserveData memory res = pool.getReserveData(_asset);\n\n        IERC20(res.aTokenAddress).transfer(\n            msg.sender,\n            IERC20(res.aTokenAddress).balanceOf(address(this))\n        );\n        return w;\n    }\n}\n"
    },
    "contracts/connectors/aave/interfaces/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.8.0;\n\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\nimport {DataTypes} from '../protocol/DataTypes.sol';\n\ninterface ILendingPool {\n  /**\n   * @dev Emitted on deposit()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address initiating the deposit\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n   * @param amount The amount deposited\n   * @param referral The referral code used\n   **/\n  event Deposit(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint16 indexed referral\n  );\n\n  /**\n   * @dev Emitted on withdraw()\n   * @param reserve The address of the underlyng asset being withdrawn\n   * @param user The address initiating the withdrawal, owner of aTokens\n   * @param to Address that will receive the underlying\n   * @param amount The amount to be withdrawn\n   **/\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n  /**\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n   * @param reserve The address of the underlying asset being borrowed\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n   * initiator of the transaction on flashLoan()\n   * @param onBehalfOf The address that will be getting the debt\n   * @param amount The amount borrowed out\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n   * @param borrowRate The numeric rate at which the user has borrowed\n   * @param referral The referral code used\n   **/\n  event Borrow(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint256 borrowRateMode,\n    uint256 borrowRate,\n    uint16 indexed referral\n  );\n\n  /**\n   * @dev Emitted on repay()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The beneficiary of the repayment, getting his debt reduced\n   * @param repayer The address of the user initiating the repay(), providing the funds\n   * @param amount The amount repaid\n   **/\n  event Repay(\n    address indexed reserve,\n    address indexed user,\n    address indexed repayer,\n    uint256 amount\n  );\n\n  /**\n   * @dev Emitted on swapBorrowRateMode()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user swapping his rate mode\n   * @param rateMode The rate mode that the user wants to swap to\n   **/\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n  /**\n   * @dev Emitted on setUserUseReserveAsCollateral()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user enabling the usage as collateral\n   **/\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on setUserUseReserveAsCollateral()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user enabling the usage as collateral\n   **/\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on rebalanceStableBorrowRate()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user for which the rebalance has been executed\n   **/\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on flashLoan()\n   * @param target The address of the flash loan receiver contract\n   * @param initiator The address initiating the flash loan\n   * @param asset The address of the asset being flash borrowed\n   * @param amount The amount flash borrowed\n   * @param premium The fee flash borrowed\n   * @param referralCode The referral code used\n   **/\n  event FlashLoan(\n    address indexed target,\n    address indexed initiator,\n    address indexed asset,\n    uint256 amount,\n    uint256 premium,\n    uint16 referralCode\n  );\n\n  /**\n   * @dev Emitted when the pause is triggered.\n   */\n  event Paused();\n\n  /**\n   * @dev Emitted when the pause is lifted.\n   */\n  event Unpaused();\n\n  /**\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n   * LendingPoolCollateral manager using a DELEGATECALL\n   * This allows to have the events in the generated ABI for LendingPool.\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n   * @param user The address of the borrower getting liquidated\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n   * @param liquidator The address of the liquidator\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n   * to receive the underlying collateral asset directly\n   **/\n  event LiquidationCall(\n    address indexed collateralAsset,\n    address indexed debtAsset,\n    address indexed user,\n    uint256 debtToCover,\n    uint256 liquidatedCollateralAmount,\n    address liquidator,\n    bool receiveAToken\n  );\n\n  /**\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n   * gets added to the LendingPool ABI\n   * @param reserve The address of the underlying asset of the reserve\n   * @param liquidityRate The new liquidity rate\n   * @param stableBorrowRate The new stable borrow rate\n   * @param variableBorrowRate The new variable borrow rate\n   * @param liquidityIndex The new liquidity index\n   * @param variableBorrowIndex The new variable borrow index\n   **/\n  event ReserveDataUpdated(\n    address indexed reserve,\n    uint256 liquidityRate,\n    uint256 stableBorrowRate,\n    uint256 variableBorrowRate,\n    uint256 liquidityIndex,\n    uint256 variableBorrowIndex\n  );\n\n  /**\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to deposit\n   * @param amount The amount to be deposited\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n   * @param to Address that will receive the underlying, same as msg.sender if the user\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n   *   different wallet\n   * @return The final amount withdrawn\n   **/\n  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n\n  /**\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n   * @param asset The address of the underlying asset to borrow\n   * @param amount The amount to be borrowed\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n   * if he has been given credit delegation allowance\n   **/\n  function borrow(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n  /**\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n   * other borrower whose debt should be removed\n   * @return The final amount repaid\n   **/\n  function repay(\n    address asset,\n    uint256 amount,\n    uint256 rateMode,\n    address onBehalfOf\n  ) external returns (uint256);\n\n  /**\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n   * @param asset The address of the underlying asset borrowed\n   * @param rateMode The rate mode that the user wants to swap to\n   **/\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n  /**\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n   * - Users can be rebalanced if the following conditions are satisfied:\n   *     1. Usage ratio is above 95%\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n   *        borrowed at a stable rate and depositors are not earning enough\n   * @param asset The address of the underlying asset borrowed\n   * @param user The address of the user to be rebalanced\n   **/\n  function rebalanceStableBorrowRate(address asset, address user) external;\n\n  /**\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n   * @param asset The address of the underlying asset deposited\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n   **/\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n  /**\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n   * @param user The address of the borrower getting liquidated\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n   * to receive the underlying collateral asset directly\n   **/\n  function liquidationCall(\n    address collateralAsset,\n    address debtAsset,\n    address user,\n    uint256 debtToCover,\n    bool receiveAToken\n  ) external;\n\n  /**\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n   * as long as the amount taken plus a fee is returned.\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n   * For further details please visit https://developers.aave.com\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n   * @param assets The addresses of the assets being flash-borrowed\n   * @param amounts The amounts amounts being flash-borrowed\n   * @param modes Types of the debt to open if the flash loan is not returned:\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n   * @param params Variadic packed params to pass to the receiver as extra information\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function flashLoan(\n    address receiverAddress,\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata modes,\n    address onBehalfOf,\n    bytes calldata params,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @dev Returns the user account data across all the reserves\n   * @param user The address of the user\n   * @return totalCollateralETH the total collateral in ETH of the user\n   * @return totalDebtETH the total debt in ETH of the user\n   * @return availableBorrowsETH the borrowing power left of the user\n   * @return currentLiquidationThreshold the liquidation threshold of the user\n   * @return ltv the loan to value of the user\n   * @return healthFactor the current health factor of the user\n   **/\n  function getUserAccountData(address user)\n    external\n    view\n    returns (\n      uint256 totalCollateralETH,\n      uint256 totalDebtETH,\n      uint256 availableBorrowsETH,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n    );\n\n  function initReserve(\n    address reserve,\n    address aTokenAddress,\n    address stableDebtAddress,\n    address variableDebtAddress,\n    address interestRateStrategyAddress\n  ) external;\n\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\n    external;\n\n  function setConfiguration(address reserve, uint256 configuration) external;\n\n  /**\n   * @dev Returns the configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The configuration of the reserve\n   **/\n  function getConfiguration(address asset)\n    external\n    view\n    returns (DataTypes.ReserveConfigurationMap memory);\n\n  /**\n   * @dev Returns the configuration of the user across all the reserves\n   * @param user The user address\n   * @return The configuration of the user\n   **/\n  function getUserConfiguration(address user)\n    external\n    view\n    returns (DataTypes.UserConfigurationMap memory);\n\n  /**\n   * @dev Returns the normalized income normalized income of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve's normalized income\n   */\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n  /**\n   * @dev Returns the normalized variable debt per unit of asset\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve normalized variable debt\n   */\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n  /**\n   * @dev Returns the state and configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The state of the reserve\n   **/\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n  function finalizeTransfer(\n    address asset,\n    address from,\n    address to,\n    uint256 amount,\n    uint256 balanceFromAfter,\n    uint256 balanceToBefore\n  ) external;\n\n  function getReservesList() external view returns (address[] memory);\n\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n  function setPause(bool val) external;\n\n  function paused() external view returns (bool);\n}\n"
    },
    "contracts/connectors/aave/interfaces/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >= 0.8.0;\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n  event MarketIdSet(string newMarketId);\n  event LendingPoolUpdated(address indexed newAddress);\n  event ConfigurationAdminUpdated(address indexed newAddress);\n  event EmergencyAdminUpdated(address indexed newAddress);\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n  event PriceOracleUpdated(address indexed newAddress);\n  event LendingRateOracleUpdated(address indexed newAddress);\n  event ProxyCreated(bytes32 id, address indexed newAddress);\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n  function getMarketId() external view returns (string memory);\n\n  function setMarketId(string calldata marketId) external;\n\n  function setAddress(bytes32 id, address newAddress) external;\n\n  function setAddressAsProxy(bytes32 id, address impl) external;\n\n  function getAddress(bytes32 id) external view returns (address);\n\n  function getLendingPool() external view returns (address);\n\n  function setLendingPoolImpl(address pool) external;\n\n  function getLendingPoolConfigurator() external view returns (address);\n\n  function setLendingPoolConfiguratorImpl(address configurator) external;\n\n  function getLendingPoolCollateralManager() external view returns (address);\n\n  function setLendingPoolCollateralManager(address manager) external;\n\n  function getPoolAdmin() external view returns (address);\n\n  function setPoolAdmin(address admin) external;\n\n  function getEmergencyAdmin() external view returns (address);\n\n  function setEmergencyAdmin(address admin) external;\n\n  function getPriceOracle() external view returns (address);\n\n  function setPriceOracle(address priceOracle) external;\n\n  function getLendingRateOracle() external view returns (address);\n\n  function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
    },
    "contracts/connectors/aave/interfaces/IPriceOracleGetter.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >= 0.8.0;\n\n/**\n * @title IPriceOracleGetter interface\n * @notice Interface for the Aave price oracle.\n **/\n\ninterface IPriceOracleGetter {\n  /**\n   * @dev returns the asset price in ETH\n   * @param asset the address of the asset\n   * @return the ETH price of the asset\n   **/\n  function getAssetPrice(address asset) external view returns (uint256);\n}\n"
    },
    "contracts/connectors/aave/libraries/math/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.6.12;\n\n//import {Errors} from '../helpers/Errors.sol';\n\n/**\n * @title WadRayMath library\n * @author Aave\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n **/\n\nlibrary WadRayMath {\n  uint256 internal constant WAD = 1e18;\n  uint256 internal constant halfWAD = WAD / 2;\n\n  uint256 internal constant RAY = 1e27;\n  uint256 internal constant halfRAY = RAY / 2;\n\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n  /**\n   * @return One ray, 1e27\n   **/\n  function ray() internal pure returns (uint256) {\n    return RAY;\n  }\n\n  /**\n   * @return One wad, 1e18\n   **/\n\n  function wad() internal pure returns (uint256) {\n    return WAD;\n  }\n\n  /**\n   * @return Half ray, 1e27/2\n   **/\n  function halfRay() internal pure returns (uint256) {\n    return halfRAY;\n  }\n\n  /**\n   * @return Half ray, 1e18/2\n   **/\n  function halfWad() internal pure returns (uint256) {\n    return halfWAD;\n  }\n\n  /**\n   * @dev Multiplies two wad, rounding half up to the nearest wad\n   * @param a Wad\n   * @param b Wad\n   * @return The result of a*b, in wad\n   **/\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n\n    require(a <= (type(uint256).max - halfWAD) / b, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\n\n    return (a * b + halfWAD) / WAD;\n  }\n\n  /**\n   * @dev Divides two wad, rounding half up to the nearest wad\n   * @param a Wad\n   * @param b Wad\n   * @return The result of a/b, in wad\n   **/\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, 'Errors.MATH_DIVISION_BY_ZERO');\n    uint256 halfB = b / 2;\n\n    require(a <= (type(uint256).max - halfB) / WAD, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\n\n    return (a * WAD + halfB) / b;\n  }\n\n  /**\n   * @dev Multiplies two ray, rounding half up to the nearest ray\n   * @param a Ray\n   * @param b Ray\n   * @return The result of a*b, in ray\n   **/\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n\n    require(a <= (type(uint256).max - halfRAY) / b, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\n\n    return (a * b + halfRAY) / RAY;\n  }\n\n  /**\n   * @dev Divides two ray, rounding half up to the nearest ray\n   * @param a Ray\n   * @param b Ray\n   * @return The result of a/b, in ray\n   **/\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, 'Errors.MATH_DIVISION_BY_ZERO');\n    uint256 halfB = b / 2;\n\n    require(a <= (type(uint256).max - halfB) / RAY, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\n\n    return (a * RAY + halfB) / b;\n  }\n\n  /**\n   * @dev Casts ray down to wad\n   * @param a Ray\n   * @return a casted to wad, rounded half up to the nearest wad\n   **/\n  function rayToWad(uint256 a) internal pure returns (uint256) {\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\n    uint256 result = halfRatio + a;\n    require(result >= halfRatio, 'Errors.MATH_ADDITION_OVERFLOW');\n\n    return result / WAD_RAY_RATIO;\n  }\n\n  /**\n   * @dev Converts wad up to ray\n   * @param a Wad\n   * @return a converted in ray\n   **/\n  function wadToRay(uint256 a) internal pure returns (uint256) {\n    uint256 result = a * WAD_RAY_RATIO;\n    require(result / WAD_RAY_RATIO == a, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\n    return result;\n  }\n}\n"
    },
    "contracts/connectors/aave/protocol/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity  >=0.8.0;\n\nlibrary DataTypes {\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    uint40 lastUpdateTimestamp;\n    //tokens addresses\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint8 id;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: Reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60-63: reserved\n    //bit 64-79: reserve factor\n    uint256 data;\n  }\n\n  struct UserConfigurationMap {\n    uint256 data;\n  }\n\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\n}\n"
    },
    "contracts/tests/DepositAAVE.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\nimport \"../connectors/aave/interfaces/ILendingPool.sol\";\nimport \"../connectors/aave/interfaces/ILendingPoolAddressesProvider.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract DepositAAVE {\n    function deposit(\n        address _asset,\n        uint256 _amount,\n        address _ben,\n        address _LPAP\n    ) public payable {\n        ILendingPoolAddressesProvider lpap = ILendingPoolAddressesProvider(_LPAP);\n        ILendingPool pool = ILendingPool(lpap.getLendingPool());\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\n        IERC20(_asset).approve(address(pool), _amount);\n        pool.deposit(_asset, _amount, _ben, 0);\n    }\n}\n"
    },
    "contracts/tests/BuyonSwap.sol": {
      "content": "pragma solidity >=0.8.0 <0.9.0;\nimport \"../connectors/swaps/interfaces/IUniswapV2Router02.sol\";\n\ncontract BuyonSwap {\n    function buy(address _addrActive2, address _router) public payable {\n        IUniswapV2Router02 r2 = IUniswapV2Router02(_router);\n        uint[] memory amountRet;\n\n        address[] memory path = new address[](2);\n        path[0] = r2.WETH();\n        path[1] = _addrActive2;\n        amountRet = r2.getAmountsOut(msg.value, path);\n\n        amountRet = r2.swapExactETHForTokens{value: msg.value}(\n            (amountRet[1] * 9) / 10,\n            path,\n            msg.sender,\n            block.timestamp + 600\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}